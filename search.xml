<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>秋</title>
      <link href="/2020/09/08/%E7%A7%8B/"/>
      <url>/2020/09/08/%E7%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>算起来，我来这里已经三个月，一个季度。这些时间里，我见到很多新面孔，也有许多小故事。突然想起来，我说要将身边的故事讲出来，就记了下来。</p><p>一叶落而知秋，公园里的水似乎开始有了皱纹，梧桐树下堆积的树叶渐多。早晚气温越来越低，不如人们内心来的火热。白天下过雨，现在是傍晚七点十八分，白色T恤黑色短裤或许是最值得嘲讽的搭配。耳边环绕着几只蚊子亲昵的嗡嗡声，左手边的湖水中不见妖娆的身影，常见的那条小鱼似乎也觉得凉。看着手机荧幕，弹出的消息里，不是讨论工作就是微商广告充斥的群聊。我想着，右边的草丛里那只蟋蟀或许和我一样，但我不会唱歌，模仿不出大家期待的声音，于是我关闭了光的源头。</p><p>坐在石椅上，我特意留出了一部分空余，除了放下我的东西，还能做一个人，十分期待未曾相识的面孔。我想学着放下完全的戒备，也想试着找回曾经的骄傲。</p><p>轻轻踱步的是年迈的老人，步履阑珊，渐行渐远渐无言。不时一声轻叹，似乎是半生的总结，诉说着过去的辉煌，如今的沧桑，未来的不舍。</p><span id="more"></span><p>抱着文件夹的是一位大叔，三四十岁的年纪，匆匆而过，满头大汗。背后的椅子上落座的是他，嚎啕大哭的是他，毅然离开的也是他。</p><p>背着双肩包的是年轻的学生，微醺一身酒气，双眼通红，如同暗夜的精灵。远远地感觉是个酒鬼，当他走近才发现是个学生，一路抽泣。电话那头还在说着什么，却似乎也是无声无事无春秋。</p><p>公园门口的摊贩也没有几句吆喝，昏黄的灯光静静的凝视着这里走过的每一个人。我记录着身边的人和事，都在我的心里。那么，会有人把我的事情记在心里吗，我不知道，也不去想。我怕徒增烦恼。</p><p>往年的这个时候，我也曾遇到过几位老人。</p><p>刚上学那年的火车上，对面的两位老人刚从俄罗斯旅游回来。一夜无眠，听着他们闲聊，似乎发现过这世间美好的一个环节。老李刚退休不久，侄女似乎也是从我将报道的学校毕业的。他讲述着，在俄罗斯游玩时想方便，找了许久却也找不到公共厕所，最后迫于无奈只能在小树林解决，正当他尴尬时，发现周边三三两两都是在小树林解决难题的俄罗斯人。儿女双全，已然退休，亲友皆在，这是老李值得自豪的人生大事，一路欣喜，我也没有了困意。</p><p>去年秋天，白露以前，还是在这个公园里。我和朋友试着下象棋，有位老人教了许久。半个多小时的时间里，老人多次表现出“朽木不可雕也”的表情，但耐心依旧。干瘦的他未曾讲述过多，只是不时回头看看公交站牌，几次低语的是“这孩子怎么还没来”。或许在等自家儿子或是女儿，也或许是孙子孙女外孙外女。我家老人，也曾在村口等待，除了一起闲聊的人，没人知道这件事。一局棋罢，老人又回到公交站旁。</p><p>记得他说，初学不知含义，三十年才懂人间。</p><p>成年人崩溃的时候，往往就在一瞬间。</p><p>这二十多年来，我见了些许哭泣。我曾经幼稚的认为，女生的哭泣，或许可能应该差不多是我心中最柔软的一部分，直到见过亲人离世，见过同事痛哭，见过路人呐喊。</p><p>古人曾说男儿有泪不轻弹，不知道还有几人记得，古人也曾说只是未到伤心处。纪念堂旁每天最不缺少的就是哀嚎，从远处走进的可能是一个儿子的老父亲，也可能是丈夫的妻子，还可能是一位父亲的孩子。每天痛苦的人都不同，不变的是痛苦的情感。逝去更知思念，人间尽皆。</p><p>公园里嚎啕大哭的男人今年或许才三十几岁，正是最好的时候。领导的批评，妻子的责怪，孩子的不解，都成为压力的源泉，日夜不竭。我想起有个男生先后接到老板要求加班到十二点和女朋友要求马上回家送钥匙开门的电话，我想起有个女孩在公交车上一口一口啃着面包又强忍着眼泪，我想起商业街的广场上刚吐过又挥舞起刀枪，怒吼着中华武术强身健体的男人。</p><p>之前有采访过一位广西的疍家哥，他说了很多次，生活不会理解我们，每个行业都不容易，大家都有自己的难处。</p><p>不知道怎么去讲述这些杂乱且又繁多的小事，我只能看到一点点，慢慢的拼接。这个落叶的时节，故事总是那么伤情。对我见到的每一个人来说，这些都是值得铭记的人生历程，或许伤感，或许高兴。</p><p>学着热爱生活，是我最近才懂的事情。不知从什么时候开始，我百无禁忌不再挑食，但凡能够吃饱，就会觉得满足。我有一位朋友，把做饭当做乐趣，他告诉我，学会享受这个过程，你会收获更多期待。</p><p>生活的确艰难，从小到大纷繁复杂的事情会越来越多。所以，对自己好一点吧，没有人替我们坚强，学会做自己的光，自己成长。每一位等待的人，都是一种守候，我们在守候别人，自然也会有人守候我们。</p><p>去年秋天似乎还没有走远，一眨眼今年秋天又到了。</p><p>落下的树叶和鸣蝉一起，阐释着湖水老去的事实，也告诉着我，及时成长。不去向过去翻看，所有的都得结束，然后重新开始。</p><p>希望我们都能提笔记下时间，尽可能拥抱未来。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2019/02/22/%E7%AC%94%E8%AE%B05/"/>
      <url>/2019/02/22/%E7%AC%94%E8%AE%B05/</url>
      
        <content type="html"><![CDATA[<ul><li><p>一、生活就是对人的兴趣，就是成为整体中的一份子，将自己的力量贡献出来，谋求人类的福祉。</p></li><li><p>二、人一旦确立人生目标，随之便会展开自我管理 。</p></li><li><p>三、一个人的经历虽然不会决定其一生的命运，但会对人的命运产生影响。如果将某种特殊经历作为自己未来人生的基础，那么我们势必会收到误导。</p></li><li><p>四、存留于脑海中的记忆会凝结成我们的生活经验，记忆让我们通过这些经验找到人生意义之所在</p></li><li><p>五、人的一生，从始至终，心灵与肉体之间的合作就一直进行着，两者犹如一个整体，不可分割</p></li><li><p>六、愤怒事实上是一种用于控制某个人或某种情形的工具，可我们不满足于描述他的愤怒。</p><span id="more"></span></li><li><p>七、在任何一种凌驾于他人之上的举止背后都有一种急需隐藏的自卑感存在。</p></li><li><p>八、人一旦坠入爱河，就会变得温柔起来，而且爱的深的那个人更容易受伤。</p></li><li><p>九、梦是用来麻醉和欺骗我们自己的，要理解梦不是一件容易的事。如果我们都理解了梦的含义，便不会再被梦所愚弄，那梦也就不再具有唤起感觉和情绪的力量。</p></li><li><p>十、无论何时，人们都想成为征服者，想要战胜，征服别人。</p></li><li><p>十一、人们不断奋斗，试图从卑微走向高贵，从失败走向胜利，从底层走向高层。</p></li><li><p>十二、如果人与人之间，没有感情，没有合作，没有奉献，那人生将是一片沙漠。</p></li><li><p>十三、当今这个时代，只是历史长河中的一个阶段，在人类过去、现在、未来的整个进程中，他只属于其中的一部分。</p></li><li><p>十四、世上会有邪恶和困难、偏见和灾难，但这是我们自己的世界，长处和弊端都是这个世界的一部分。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 分支</title>
      <link href="/2018/08/25/git%20%E5%88%86%E6%94%AF/"/>
      <url>/2018/08/25/git%20%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<p>分支是 Git 最重要的概念之一，也是最常用的操作之一。几乎所有 Git 操作流程都离不开分支。</p><p><code>git branch</code>命令可以列出本地的所有分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><p>创建一个名为<code>MyBranch</code>的新分支，但是依然停留在当前分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch MyBranch</span><br></pre></td></tr></table></figure><p>在远程主机<code>origin</code>上创建一个<code>MyBranch</code>的分支，并与本地的同名分支建立追踪关系。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin MyBranch</span><br></pre></td></tr></table></figure><p>将当前分支改名为<code>MyBranch</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -m MyBranch</span><br></pre></td></tr></table></figure><p>删除<code>MyBranch</code>分支，前提是该分支没有未合并的变动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d MyBranch</span><br></pre></td></tr></table></figure><span id="more"></span><p>强制删除<code>MyBranch</code>分支，不管有没有未合并变化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D MyBranch</span><br></pre></td></tr></table></figure><p>切换到<code>MyBranch</code>分支，当前的工作区会变为<code>MyBranch</code>分支的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout MyBranch</span><br></pre></td></tr></table></figure><p>基于<code>MyBranch</code>分支创建一个新的<code>NewBranch</code>分支，新的<code>NewBranch</code>分支将成为当前的工作区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b NewBranch MyBranch</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我理解的日子</title>
      <link href="/2018/08/04/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84%E6%97%A5%E5%AD%90/"/>
      <url>/2018/08/04/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84%E6%97%A5%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>这次回家，来探望阔别已久的大山。心情如过山车，起落不平，我始终害怕坐过山车。</p><p>过去的日子，一定有些许难堪，但我知道，从未如此迷茫和悲伤。突然想到前天晚上爸爸妈妈陪我聊到半夜，差点哭出声。发生的事情很多，也不知从何说起。若是有机会，自不必言说；若是没有机会，怎能有再提的想法呀。</p><p>轰隆隆的雷声没停，落日的余晖显露。一人半还高的玉米地里，刚刚钻出背着青草的母亲；咩咩着的小羊，听得懂脚步；脏兮兮的狗子，耷拉着耳朵，和眼皮。我没有出屋，怕家里的老母鸡看见肿胀的眼睛。</p><p>耳边传来父亲逗笑的话，但妈妈头疼着。我暂停了课程，现在是下午六点十二分钟。刚吃过饭，两人又骑车离开了家。西梁坡地长出了许多杂草，总得有人收拾。</p><p>这样的生活，已然二十余年。有人轻松，有人忙碌。</p><p>我的身上也发生了一些故事，也只有父母才愿意安慰幼稚的我。可能是被宠坏了吧，这点打击都受不得了。哭了几天，似乎也想的清楚明白，无非是再走一次类似的路罢了。我不负我，亦未辜负，我们都应该是这样。</p><p>好事还是不少的。远处，前日里风雨吹倒的玉米，已然扶起；眼前刚出生几天的小羊甚是干净；姥姥之前回去的时候很开心，说过两天再来找我。我还没敢告诉她，也不知道她该是怎样的心情。</p><p>我还能做点什么呢，没有了。我怎么不知道呢，只好更努努力，多挣钱，好好攒钱，以后万一遇到爸妈需要时别因为钱的事情发愁。</p><p>父母比我更努力，我想象不到。这些年他们是如何省吃俭用攒下似乎足够我用度，是如何忍痛不语承受似乎不让我十分理解的伤痛？我不知道，也不敢问。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2018/06/28/%E7%AC%94%E8%AE%B04/"/>
      <url>/2018/06/28/%E7%AC%94%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<ul><li>一、“生活不就是一个麻烦接一个麻烦嘛，其实没有必要低落，因为等你解决了这个麻烦之后，你再回头看的时候，你会特别有成就感，而且会给自己更多的认同感；所以，活在当下，努力向前，就对了……”</li><li>二、人总在一次次犹豫，摇摆，选择中，破碎迷雾，追溯本源，找到自己真正在意的东西。中间肯定有弯路，但无用功，同样也是有用功。</li><li>三、还没相遇前，我俩各自修行，为的不是要到达彼岸，而是要找到彼此；我俩各自旅行，为的不是要找到自己，而是要寻遇对方。</li><li>四、月色千古如斯，不知换了多少人看，它只是静静的挂在天上，平淡但坚贞。——如爱情。</li><li>五、回忆是个怪物，它让人沉沦在过去，然后轻易把人摧毁。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 标签</title>
      <link href="/2018/05/27/git%20%E6%A0%87%E7%AD%BE/"/>
      <url>/2018/05/27/git%20%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><p>标签必须单独推送。也就是说，<code>git push</code>命令默认不会推送标签，必须使用<code>--tags</code>参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &amp;&amp; git push --tags</span><br></pre></td></tr></table></figure><p>上面的命令先推送新的 commit，成功后再单独推送标签。</p><p><code>--follow-tags</code>参数会使得 commit 以及与之相关的标签（注意，不是所有的标签）一起推送。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --follow-tags</span><br></pre></td></tr></table></figure><p>Git 有一个对应于<code>--follow-tags</code>的配置项，默认是关闭的。如果将它打开，以后执行<code>git push</code>的时候，默认就会带上<code>--follow-tags</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global push.followTags true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 内部实现</title>
      <link href="/2018/04/21/git%20%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/04/21/git%20%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="git-目录"><a href="#git-目录" class="headerlink" title=".git 目录"></a>.git 目录</h2><p>版本管理的所有信息，保存在项目的<code>.git</code>目录之中。如果没有这个目录，Git 就会认为这个仓库没有建立版本管理，必须进行初始化。<code>git init</code>命令的主要作用，就是建立<code>.git</code>目录。</p><p><code>.git/config</code>文件保存仓库的设置。</p><p><code>.git/HEAD</code>文件保存当前工作分支的引用。</p><p><code>.git/hooks</code>目录保存各种事件挂钩的脚本。</p><p><code>.git/objects</code>目录保存文件的内容，格式是二进制<code>blob</code>。</p><h2 id="哈希签名"><a href="#哈希签名" class="headerlink" title="哈希签名"></a>哈希签名</h2><p>每次提交的时候，每个文件、每个树节点（目录）和提交本身，都会生成一个40个字符长的 SHA-1 哈希。</p><p>哈希作为文件名，文件本身保留在<code>.git/objects</code>目录之中。</p><span id="more"></span><h2 id="git-add-命令"><a href="#git-add-命令" class="headerlink" title="git add 命令"></a>git add 命令</h2><p><code>git add</code>会将变动的文件写入<code>.git/objects</code>目录。它内部调用的是<code>git hash-object</code>命令,该命令会计算 SHA-1 哈希，并将 blob 文件放入<code>.git/objects</code>目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git hash-object -w myfile.txt</span><br></pre></td></tr></table></figure><p><code>git cat-file</code>命令可以查看 blob 格式对应的原始文件内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p e69de29bb2d1d6434b8b29ae775ad8c2e48c5391</span><br></pre></td></tr></table></figure><h2 id="git-commit-命令"><a href="#git-commit-命令" class="headerlink" title="git commit 命令"></a>git commit 命令</h2><p><code>git commit</code>命令用于有变动的、并已提交到<code>.git/objects</code>的文件写入历史。</p><p><code>git write-tree</code>为当前仓库创建树节点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git write-tree</span><br></pre></td></tr></table></figure><p><code>git commit-tree</code>命令将指定的树节点写入历史。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span>“first commit”| git commit-tree \ 6e9432aeedbad83fbffb7f8aae4a5d1ab50b7fdf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2018/04/11/%E7%AC%94%E8%AE%B03/"/>
      <url>/2018/04/11/%E7%AC%94%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<ul><li><p>一、传统文化和传统观念是不是一个炉子里的两个烧饼？如果我们的文化适应生产力发展的要求，那就不用转变观念了，中国人坐庄家，让别人跟我们接轨好了。我们老是躲在屋里唱《我的中国心》，多辛酸！</p></li><li><p>二、中国的传统文化是皇恩浩大的文化，它的实用是以皇天在上为先决条件。中国为什么穷？穷就穷在幼稚的思维，穷在期望救主、期望救恩的文化上，这是一个渗透到民族骨子里的价值判断体系，太可怕了。</p></li><li><p>三、透视社会依次有三个层面：技术、制度和文化。小到一个人，大到一个国家一个民族，任何一种命运归根到底都是那种文化属性的产物。强势文化造就强者，弱势文化造就弱者，这是规律，也可以理解为天道，不以人的意志为转移。</p></li><li><p>四、强势文化就是遵循事物规律的文化，弱势文化就是依赖强者的道德期望破格获取的文化，也是期望救主的文化。强势文化在武学上被称为「秘笈”，而弱势文化由于易学、易懂、易用，成了流行品种。</p></li><li><p>五、强盗的本质是破格获取，破格获取与直接获取是两个不同的概念。你们没有自信与强者在同一个规则下公平竞争，这只能说明你是弱者，因为弱势文化所追求的最高价值就是破格获取。所以，强盗的逻辑从本质上讲是最懦弱的生存哲学。</p><span id="more"></span></li><li><p>六、你不知道你，所以你是你，如果你知道了你，你就不是你了。</p></li><li><p>七、传统观念的死结就在一个『靠』字上，在家靠父母，出门靠朋友，靠上帝、靠菩萨、靠皇恩……总之靠什么都行，就是别靠自己。这是一个沉积了几千年的文化属性问题，非几次新文化运动就能开悟。</p></li><li><p>八、没有竞争的社会就没有活力，而竞争必然会产生贫富、等级，此乃天道，乃社会进步的必然代价。无弱，强焉在？一个『强』字，弱已经在其中了。故而，佛度心苦，修的是一颗平常心。</p></li><li><p>九、等级一直是我们社会文化的禁区，大家所以小心翼翼绕开禁区，是唯恐平等、尊严之类的东西受到伤害。</p></li><li><p>十、释、道、儒均是博大精深的学派，支撑中华民族走过了几千年的文明历程，是伟大的文明。但是，社会在发展，传统文化毕竟是以皇恩浩荡为先决条件的文化，讲的都是皆空、无为、中庸的理，以抑制个性而求生求解。当今社会已经发展到了市场经济的民主与法制，诸家学说也面临一个如实观照而俱进的课题，是传统？还是传承？统则僵死，承则光大。</p></li><li><p>十一、当人一旦从危险里跳出来，他就不再去关注这个事物的危险了，他的目光就会全部落在这个事物的利益上，这就是人。</p></li><li><p>十二、杀富富不去，救贫贫不离。救主的文化唯救主可说，救主不是人，是道，得救不是破了戒的狼吞虎咽，是觉悟。</p></li><li><p>十三、法律是社会道德的底线，是解决最基本、最表面的问题，不解决文化的根本问题，文化的问题只能由文化的觉悟解决。一个民族的文化属性就是这个民族的主，主宰着这个民族的文明、荣辱、兴衰。一个民族最强调道德的时候，正是这个民族道德最沦丧的时候。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2017/12/07/%E7%AC%94%E8%AE%B02/"/>
      <url>/2017/12/07/%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<ul><li><p>一、爱情就是一盘棋，迷的都是当局人……其实，我们谁都不高明，谁都会陷入到自以为是的怪圈中……可是话说回来，这样的爱情才真实吧？</p></li><li><p>二、“上帝说生活是救赎和忏悔，可到底谁需要救赎，谁又需要忏悔？”</p></li><li><p>三、我觉得人活得太贪婪，是一种罪过，是要下地狱的……因为这就是一个残缺的世界，你活在这个残缺的世界里，却处处想着完美，就等同于作乱……这个世界不会完美的，就像月有阴晴圆缺，就像我们到了年纪，一定会死……这谁都改变不了！”</p></li><li><p>四、人人都曾杀死心爱之人，你不妨听听每人的方式；有人使用冰冷的眼神，有人使用热烈的表白，胆小的使用轻轻一吻，无畏的挥出尖利的刀刃。有人毁所爱时还年少，有人毁所爱时已年老；有人用欲望之手扼杀，有人靠金钱之手诱杀；最慈悲的才使用利刀，为了让死者少受折磨……”</p></li><li><p>五、爱情到底是什么呢？是某一瞬间的感动，是日积月累的牵挂，是心里的白鸽？说不清楚，也可能是想到那个人，就会觉得开心。反正，不要同时爱上两个人就好……那恐怕才是人生中最大的痛苦。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 操作</title>
      <link href="/2017/11/26/git%20%E6%93%8D%E4%BD%9C/"/>
      <url>/2017/11/26/git%20%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个 git 代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为 git 代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>git 的设置文件为<code>.gitconfig</code>，它可以在用户主目录下，也可以在项目目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的 git 配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 git 配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure><h2 id="增加-x2F-删除文件"><a href="#增加-x2F-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [<span class="built_in">dir</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git <span class="built_in">rm</span> [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git <span class="built_in">mv</span> [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend &lt;file1&gt; &lt;file2&gt; ...</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete &lt;branch-name&gt;</span><br><span class="line">$ git branch -dr &lt;remote/branch&gt;</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [&lt;file&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复上一个commit的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line"><span class="comment"># git archive</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git简介</title>
      <link href="/2017/11/16/git%20%E7%AE%80%E4%BB%8B/"/>
      <url>/2017/11/16/git%20%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>git是一种源码管理系统（source code management，缩写为SCM）。它对当前文件提供版本管理功能，核心思想是对当前文件建立一个对象数据库（object database），将历史版本信息存放在这个数据库中。</p><h2 id="git操作流程"><a href="#git操作流程" class="headerlink" title="git操作流程"></a>git操作流程</h2><ul><li>安装git</li><li>提交用户名和电子邮件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Some One&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;someone@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><ol><li>git init：新建一个git库</li><li>git status：查看目前状态</li><li>git add &lt;文件名&gt;：添加文件从工作区到暂存区</li><li>git commit -m “提示信息”：从暂存区提交到代码仓库</li><li>git log：查看提交commit的信息</li><li>git remote add origin <a href="https://github.com/try-git/try_git.git">https://github.com/try-git/try_git.git</a> : 添加远程指针</li><li>git push -u origin master：将本地的master分支推送到远程origin主机，-u参数表示记住对应关系，下次可以直接git push推送。</li><li>git pull origin master：将远程主机origin的代码取回本地，与本地的master分支合并</li><li>git diff HEAD：查看与上一次commit的区别</li></ol><span id="more"></span><h3 id="发布一个版本"><a href="#发布一个版本" class="headerlink" title="发布一个版本"></a>发布一个版本</h3><p>为当前分支打上版本号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a [VERSION] -m &quot;released [VERSION]&quot;</span><br><span class="line">$ git push origin [VERSION]</span><br></pre></td></tr></table></figure><h2 id="git对象"><a href="#git对象" class="headerlink" title="git对象"></a>git对象</h2><p>对象数据库包含四类对象。</p><ul><li>Blob：包含二进制数据，它们是文件内容。只要文件内容改变，就会在对象数据库中生成一个blob对象。注意，blob对象只保存文件内容，不含文件名和文件存储位置等信息。如果文件名改变，或者文件储存位置改变，不会生成新的blob对象。</li><li>Tree：blob对象的集合，以及它们的文件名和权限。一个tree对象描述一个时点上的一个目录。</li><li>Commit：描述一个时点上的项目状态，包含一条log信息，一个tree对象和指向父节点（parent commits）的指针。第一个commit对象没有父节点。<ul><li>紀錄 root tree SHA1</li><li>紀錄 parent commit SHA1</li><li>紀錄作者、時間和 commit message 資訊</li></ul></li><li>tag</li></ul><p>对象数据库依赖SHA哈希函数。当一个对象加入数据库，它会被SHA函数处理，得到的结果就是该对象在数据库中的名字（前两个字节被当作目录名，用来提高效率）。</p><p>git命令基本上是图数据库操作命令，用来删除&#x2F;操作节点、移动指针等等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ git init</span><br><span class="line">$ <span class="built_in">echo</span> hello &gt; hello.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ tree .git</span><br><span class="line"><span class="comment"># 存在 .git/objects/ce/013625030ba8dba906f756967f9e9ca394464a</span></span><br><span class="line"><span class="comment"># 這是 hello 內容的 SHA1</span></span><br><span class="line">$ <span class="built_in">printf</span> <span class="string">&quot;blob 6\x00hello\n&quot;</span> | shasum</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> | git hash-object --stdin</span><br><span class="line">$ git cat-file -p ce0136</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面代码有几点需要注意。</p><ul><li><code>git add</code>命令就会生成二进制对象。</li><li>shasum命令返回字符串的SHA哈希函数结果。</li><li><code>git hash-object</code>命令计算一个文件的git对象ID，stdin参数表示从标准输入读取，而不是从本地文件读取。</li><li><code>git cat-file</code>命令显示git对象文件的内容和大小信息，p参数表示以易于阅读的格式显示。</li></ul><p>树对象保存当前目录的快照。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">040000 tree 0eed1217a2947f4930583229987d90fe5e8e0b74 data</span><br><span class="line">100664 blob 5e40c0877058c504203932e5136051cf3cd3519b letter.txt</span><br><span class="line">100664 blob 274c0052dd5408f8ae2bc8440029ff67d79bc5c3 number.txt</span><br></pre></td></tr></table></figure><p>commit（快照）对象也保存在<code>.git/objects</code>目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tree ffe298c3ce8bb07326f888907996eaa48d266db4</span><br><span class="line">author Mary Rose Cook &lt;mary@maryrosecook.com&gt; 1424798436 -0500</span><br><span class="line">committer Mary Rose Cook &lt;mary@maryrosecook.com&gt; 1424798436 -0500</span><br><span class="line"></span><br><span class="line">a1</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>指定全局的.gitignore文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.excludesfile=/Users/flores/.gitignore</span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li>.git&#x2F;refs&#x2F;heads：保存各个分支的指针</li><li>.git&#x2F;HEAD 文件，保存HEAD指针</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure><p>上面代码说明HEAD指向<code>.git/refs/heads/master</code>文件，该文件是一个Hash值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a87cc0f39d12e51be8d68eab5cef1d31e8807a1c</span><br></pre></td></tr></table></figure><ul><li>.git&#x2F;refs&#x2F;tags：保存tag指针</li></ul><h3 id="缓冲区域（index）"><a href="#缓冲区域（index）" class="headerlink" title="缓冲区域（index）"></a>缓冲区域（index）</h3><p>Index区域（.git&#x2F;index）是一个二进制文件，用来保存当前目录在某个时点的状态。</p><p><code>git init</code>命令用来创建index区域，以及对象数据库（.dircache&#x2F;objects）。</p><p>100644 為檔案模式,表示這是一個普通檔案；100755 表示可執行檔,120000 表示 symbolic link。</p><p><code>.git/index</code>文件，保存暂存区的文件名和对应的Hash值，每行对应一个文件。下面是一个例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data/letter.txt 5e40c0877058c504203932e5136051cf3cd3519b</span><br><span class="line">data/number.txt 274c0052dd5408f8ae2bc8440029ff67d79bc5c3</span><br></pre></td></tr></table></figure><h2 id="Git-commit的全过程"><a href="#Git-commit的全过程" class="headerlink" title="Git commit的全过程"></a>Git commit的全过程</h2><ol><li>用內容產生 blob object</li><li>寫入 file mode, blob SHA1, file name 到 staging area</li><li>根據 staging area 產生 Tree object</li><li>用 root tree SHA1 和 parent commit SHA1 產生<br>commit object</li><li>用 commit SHA1 更新 master 參考</li></ol><p>如何不用 <code>git add</code> 和 <code>git commit</code>指令完成 commit 動作?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># git add的部分</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hola&quot;</span> | git hash-object -w --stdin</span><br><span class="line">$ git update-index --add --cacheinfo \</span><br><span class="line">100644 5c1b14949828006ed75a3e8858957f86a2f7e2eb hola.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># git commit的部分</span></span><br><span class="line"></span><br><span class="line">$ git write-tree</span><br><span class="line">$ git commit-tree 27b9d5 -m <span class="string">&quot;Second commit&quot;</span> -p 30b060</span><br><span class="line">$ git update-ref refs/heads/master 97b806c9e5561a08e0df1f1a60857baad3a1f02e</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h2><p>合并产生的新节点，会有两个父节点。第一个是当前所在分支的父节点，第二个合并进来的那个分支的父节点。</p><h2 id="Tag对象"><a href="#Tag对象" class="headerlink" title="Tag对象"></a>Tag对象</h2><p>Tag 分兩種:annotated tag 才會產生 object。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ git tag -a release</span><br><span class="line">$ git rev-parse release</span><br><span class="line">$ git cat-file -p 2450f3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tag对象的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">object 309be0</span><br><span class="line">type commit</span><br><span class="line">tag release</span><br><span class="line">tagger ihower 1375383070 +0800</span><br><span class="line">Release!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Reference（指针）"><a href="#Reference（指针）" class="headerlink" title="Reference（指针）"></a>Reference（指针）</h2><p>所谓指针（reference），只是一个链接，用来指向其他物体，方便引用。Git有三种指针，但是所有指针归根结底都是指向某个commit。</p><ul><li>Tag指针：指向某个commit，或者指向某个tag对象。保存位置在.git&#x2F;refs&#x2F;tags&#x2F;目录，文件名为tag名，内容为某个commit或ref object的SHA1哈希。</li><li>Branch指针：指向某个commit。每次该分支有新的commit，指针就会变动。</li><li>HEAD指针：指向目前所在的Branch，用来区分目前在哪个分支。比如，内容为ref: refs&#x2F;heads&#x2F;<br>master。</li></ul><h2 id="团队开发模式"><a href="#团队开发模式" class="headerlink" title="团队开发模式"></a>团队开发模式</h2><p>集中式工作流程：團隊內部私有專案，大家都有權限 Push 到共用的 Repository</p><p>管理員工作流程：適合一般 Open Source 專案,只有少部分人有權限可以 Push到 Repository,其他開發者用用 request pull 請求合併。例如 GitHub 提供的 Fork 和 Pull Request 功能。</p><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><h3 id="github-flow"><a href="#github-flow" class="headerlink" title="github flow"></a>github flow</h3><ul><li>master 是 stable&#x2F;production 可佈署的版本</li><li>任何開發從 master branch 分支出 feature branch</li><li>送 pull request 開始進行行討論、code review和測試</li><li>最後合併回 master 代表可以佈署了</li></ul><p>pros and cons</p><ul><li>簡單、清楚、容易了解</li><li>搭配 Github 的 Pull Request 介面</li><li>沒有 release branch,東⻄一進 master 就上 production</li></ul><h3 id="Ruby-on-Rails"><a href="#Ruby-on-Rails" class="headerlink" title="Ruby on Rails"></a>Ruby on Rails</h3><ul><li>master 是開發版本</li><li>feature branches 審核完後,合併進 master</li><li>maintenance branches,用 cherry-pick 做 backporting</li><li>基本上就是 Github flow 加上 maintenance branches 維護舊版的設計</li><li>版本號(Tag)打在 master 上,透過 preview 和 beta 的版本號提前釋出</li></ul><h3 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h3><ul><li>master 預備釋出的版本,feature branches 從這裡分支出去</li><li>feature branch 完成後,合併進 next</li><li>next 整合版本,完成的 feature branch 先合併到這裡進行測試</li><li>在 next 測好的 feature branch,才合併進 master</li><li>可以將 master 合併進 next,減少之後的 code conflicts</li><li>不會將 next 合併進 master</li><li>nightly 每天 1:00 UTC 自動從 next branch 分支支出來跑自動測試</li></ul><h2 id="Git远程操作"><a href="#Git远程操作" class="headerlink" title="Git远程操作"></a>Git远程操作</h2><p>Git的repo一般是用来指本地库，远程库（remote）主要用来存档、合作、分享和触发持续集成。 </p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>corbet, <a href="https://lwn.net/Articles/131657/">The guts of git</a>: 最早的一篇介绍Git的文章，可以了解Git的总体设计思路</li><li>张文钿, <a href="http://ihower.tw/blog/archives/7938">git从微观到宏观</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sftp 命令</title>
      <link href="/2017/06/17/sftp%20%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/06/17/sftp%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><code>sftp</code>是 SSH 提供的一个客户端应用程序，主要用来安全地访问 FTP。因为 FTP 是不加密协议，很不安全，<code>sftp</code>就相当于将 FTP 放入了 SSH。</p><p>下面的命令连接 FTP 主机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sftp username@hostname</span><br></pre></td></tr></table></figure><p>执行上面的命令，会要求输入 FTP 的密码。密码验证成功以后，就会出现 FTP 的提示符<code>sftp&gt; </code>，下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sftp USER@penguin.example.com</span><br><span class="line">USER@penguin.example.com<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Connected to penguin.example.com.</span></span><br><span class="line"><span class="string">sftp&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>FTP 的提示符下面，就可以输入各种 FTP 命令了，这部分完全跟传统的 FTP 用法完全一样。</p><ul><li><code>ls [directory]</code>：列出一个远程目录的内容。如果没有指定目标目录，则默认列出当前目录。</li><li><code>cd directory</code>：从当前目录改到指定目录。</li><li><code>mkdir directory</code>：创建一个远程目录。</li><li><code>rmdir path</code>：删除一个远程目录。</li><li><code>put localfile [remotefile]</code>：本地文件传输到远程主机。</li><li><code>get remotefile [localfile]</code>：远程文件传输到本地。</li><li><code>help</code>：显示帮助信息。</li><li><code>bye</code>：退出 sftp。</li><li><code>quit</code>：退出 sftp。</li><li><code>exit</code>：退出 sftp。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SSH 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsync 命令</title>
      <link href="/2017/05/31/rsync%20%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/05/31/rsync%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>rsync 是一个常用的 Linux 应用程序，用于文件同步。</p><p>它可以在本地计算机与远程计算机之间，或者两个本地目录之间同步文件（但不支持两台远程计算机之间的同步）。它也可以当作文件复制工具，替代<code>cp</code>和<code>mv</code>命令。</p><p>它名称里面的<code>r</code>指的是 remote，rsync 其实就是“远程同步”（remote sync）的意思。与其他文件传输工具（如 FTP 或 scp）不同，rsync 的最大特点是会检查发送方和接收方已有的文件，仅传输有变动的部分（默认规则是文件大小或修改时间有变动）。</p><p>虽然 rsync 不是 SSH 工具集的一部分，但因为也涉及到远程操作，所以放在这里一起介绍。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果本机或者远程计算机没有安装 rsync，可以用下面的命令安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian</span></span><br><span class="line">$ sudo apt-get install rsync</span><br><span class="line"></span><br><span class="line"><span class="comment"># Red Hat</span></span><br><span class="line">$ sudo yum install rsync</span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch Linux</span></span><br><span class="line">$ sudo pacman -S rsync</span><br></pre></td></tr></table></figure><p>注意，传输的双方都必须安装 rsync。</p><span id="more"></span><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>rsync 可以用于本地计算机的两个目录之间的同步。下面就用本地同步举例，顺便讲解 rsync 几个主要参数的用法。</p><h3 id="r参数"><a href="#r参数" class="headerlink" title="-r参数"></a><code>-r</code>参数</h3><p>本机使用 rsync 命令时，可以作为<code>cp</code>和<code>mv</code>命令的替代方法，将源目录拷贝到目标目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -r <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-r</code>表示递归，即包含子目录。注意，<code>-r</code>是必须的，否则 rsync 运行不会成功。<code>source</code>目录表示源目录，<code>destination</code>表示目标目录。上面命令执行以后，目标目录下就会出现<code>destination/source</code>这个子目录。</p><p>如果有多个文件或目录需要同步，可以写成下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -r source1 source2 destination</span><br></pre></td></tr></table></figure><p>上面命令中，<code>source1</code>、<code>source2</code>都会被同步到<code>destination</code>目录。</p><h3 id="a参数"><a href="#a参数" class="headerlink" title="-a参数"></a><code>-a</code>参数</h3><p><code>-a</code>参数可以替代<code>-r</code>，除了可以递归同步以外，还可以同步元信息（比如修改时间、权限等）。由于 rsync 默认使用文件大小和修改时间决定文件是否需要更新，所以<code>-a</code>比<code>-r</code>更有用。下面的用法才是常见的写法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -a <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure><p>目标目录<code>destination</code>如果不存在，rsync 会自动创建。执行上面的命令后，源目录<code>source</code>被完整地复制到了目标目录<code>destination</code>下面，即形成了<code>destination/source</code>的目录结构。</p><p>如果只想同步源目录<code>source</code>里面的内容到目标目录<code>destination</code>，则需要在源目录后面加上斜杠。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -a <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>上面命令执行后，<code>source</code>目录里面的内容，就都被复制到了<code>destination</code>目录里面，并不会在<code>destination</code>下面创建一个<code>source</code>子目录。</p><h3 id="n参数"><a href="#n参数" class="headerlink" title="-n参数"></a><code>-n</code>参数</h3><p>如果不确定 rsync 执行后会产生什么结果，可以先用<code>-n</code>或<code>--dry-run</code>参数模拟执行的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -anv <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-n</code>参数模拟命令执行的结果，并不真的执行命令。<code>-v</code>参数则是将结果输出到终端，这样就可以看到哪些内容会被同步。</p><h3 id="delete参数"><a href="#delete参数" class="headerlink" title="--delete参数"></a><code>--delete</code>参数</h3><p>默认情况下，rsync 只确保源目录的所有内容（明确排除的文件除外）都复制到目标目录。它不会使两个目录保持相同，并且不会删除文件。如果要使得目标目录成为源目录的镜像副本，则必须使用<code>--delete</code>参数，这将删除只存在于目标目录、不存在于源目录的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -av --delete <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>上面命令中，<code>--delete</code>参数会使得<code>destination</code>成为<code>source</code>的一个镜像。</p><h2 id="排除文件"><a href="#排除文件" class="headerlink" title="排除文件"></a>排除文件</h2><h3 id="exclude参数"><a href="#exclude参数" class="headerlink" title="--exclude参数"></a><code>--exclude</code>参数</h3><p>有时，我们希望同步时排除某些文件或目录，这时可以用<code>--exclude</code>参数指定排除模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -av --exclude=<span class="string">&#x27;*.txt&#x27;</span> <span class="built_in">source</span>/ destination</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ rsync -av --exclude <span class="string">&#x27;*.txt&#x27;</span> <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>上面命令排除了所有 TXT 文件。</p><p>注意，rsync 会同步以“点”开头的隐藏文件，如果要排除隐藏文件，可以这样写<code>--exclude=&quot;.*&quot;</code>。</p><p>如果要排除某个目录里面的所有文件，但不希望排除目录本身，可以写成下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -av --exclude <span class="string">&#x27;dir1/*&#x27;</span> <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>多个排除模式，可以用多个<code>--exclude</code>参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -av --exclude <span class="string">&#x27;file1.txt&#x27;</span> --exclude <span class="string">&#x27;dir1/*&#x27;</span> <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>多个排除模式也可以利用 Bash 的大扩号的扩展功能，只用一个<code>--exclude</code>参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -av --exclude=&#123;<span class="string">&#x27;file1.txt&#x27;</span>,<span class="string">&#x27;dir1/*&#x27;</span>&#125; <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>如果排除模式很多，可以将它们写入一个文件，每个模式一行，然后用<code>--exclude-from</code>参数指定这个文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -av --exclude-from=<span class="string">&#x27;exclude-file.txt&#x27;</span> <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><h3 id="include参数"><a href="#include参数" class="headerlink" title="--include参数"></a><code>--include</code>参数</h3><p><code>--include</code>参数用来指定必须同步的文件模式，往往与<code>--exclude</code>结合使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -av --include=<span class="string">&quot;*.txt&quot;</span> --exclude=<span class="string">&#x27;*&#x27;</span> <span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>上面命令指定同步时，排除所有文件，但是会包括 TXT 文件。</p><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><h3 id="SSH-协议"><a href="#SSH-协议" class="headerlink" title="SSH 协议"></a>SSH 协议</h3><p>rsync 除了支持本地两个目录之间的同步，也支持远程同步。它可以将本地内容，同步到远程服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -av <span class="built_in">source</span>/ username@remote_host:destination</span><br></pre></td></tr></table></figure><p>也可以将远程内容同步到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -av username@remote_host:<span class="built_in">source</span>/ destination</span><br></pre></td></tr></table></figure><p>rsync 默认使用 SSH 进行远程登录和数据传输。</p><p>由于早期 rsync 不使用 SSH 协议，需要用<code>-e</code>参数指定协议，后来才改的。所以，下面<code>-e ssh</code>可以省略。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -av -e ssh <span class="built_in">source</span>/ user@remote_host:/destination</span><br></pre></td></tr></table></figure><p>但是，如果 ssh 命令有附加的参数，则必须使用<code>-e</code>参数指定所要执行的 SSH 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -av -e <span class="string">&#x27;ssh -p 2234&#x27;</span> <span class="built_in">source</span>/ user@remote_host:/destination</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-e</code>参数指定 SSH 使用2234端口。</p><h3 id="rsync-协议"><a href="#rsync-协议" class="headerlink" title="rsync 协议"></a>rsync 协议</h3><p>除了使用 SSH，如果另一台服务器安装并运行了 rsync 守护程序，则也可以用<code>rsync://</code>协议（默认端口873）进行传输。具体写法是服务器与目标目录之间使用双冒号分隔<code>::</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -av <span class="built_in">source</span>/ 192.168.122.32::module/destination</span><br></pre></td></tr></table></figure><p>注意，上面地址中的<code>module</code>并不是实际路径名，而是 rsync 守护程序指定的一个资源名，由管理员分配。</p><p>如果想知道 rsync 守护程序分配的所有 module 列表，可以执行下面命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync rsync://192.168.122.32</span><br></pre></td></tr></table></figure><p>rsync 协议除了使用双冒号，也可以直接用<code>rsync://</code>协议指定地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -av <span class="built_in">source</span>/ rsync://192.168.122.32/module/destination</span><br></pre></td></tr></table></figure><h2 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h2><p>rsync 的最大特点就是它可以完成增量备份，也就是默认只复制有变动的文件。</p><p>除了源目录与目标目录直接比较，rsync 还支持使用基准目录，即将源目录与基准目录之间变动的部分，同步到目标目录。</p><p>具体做法是，第一次同步是全量备份，所有文件在基准目录里面同步一份。以后每一次同步都是增量备份，只同步源目录与基准目录之间有变动的部分，将这部分保存在一个新的目标目录。这个新的目标目录之中，也是包含所有文件，但实际上，只有那些变动过的文件是存在于该目录，其他没有变动的文件都是指向基准目录文件的硬链接。</p><p><code>--link-dest</code>参数用来指定同步时的基准目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -a --delete --link-dest /compare/path /source/path /target/path</span><br></pre></td></tr></table></figure><p>上面命令中，<code>--link-dest</code>参数指定基准目录<code>/compare/path</code>，然后源目录<code>/source/path</code>跟基准目录进行比较，找出变动的文件，将它们拷贝到目标目录<code>/target/path</code>。那些没变动的文件则会生成硬链接。这个命令的第一次备份时是全量备份，后面就都是增量备份了。</p><p>下面是一个脚本示例，备份用户的主目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A script to perform incremental backups using rsync</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"><span class="built_in">set</span> -o nounset</span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br><span class="line"></span><br><span class="line"><span class="built_in">readonly</span> SOURCE_DIR=<span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> BACKUP_DIR=<span class="string">&quot;/mnt/data/backups&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> DATETIME=<span class="string">&quot;<span class="subst">$(date &#x27;+%Y-%m-%d_%H:%M:%S&#x27;)</span>&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> BACKUP_PATH=<span class="string">&quot;<span class="variable">$&#123;BACKUP_DIR&#125;</span>/<span class="variable">$&#123;DATETIME&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> LATEST_LINK=<span class="string">&quot;<span class="variable">$&#123;BACKUP_DIR&#125;</span>/latest&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$&#123;BACKUP_DIR&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">rsync -av --delete \</span><br><span class="line">  <span class="string">&quot;<span class="variable">$&#123;SOURCE_DIR&#125;</span>/&quot;</span> \</span><br><span class="line">  --link-dest <span class="string">&quot;<span class="variable">$&#123;LATEST_LINK&#125;</span>&quot;</span> \</span><br><span class="line">  --exclude=<span class="string">&quot;.cache&quot;</span> \</span><br><span class="line">  <span class="string">&quot;<span class="variable">$&#123;BACKUP_PATH&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$&#123;LATEST_LINK&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">ln</span> -s <span class="string">&quot;<span class="variable">$&#123;BACKUP_PATH&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;LATEST_LINK&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>上面脚本中，每一次同步都会生成一个新目录<code>$&#123;BACKUP_DIR&#125;/$&#123;DATETIME&#125;</code>，并将软链接<code>$&#123;BACKUP_DIR&#125;/latest</code>指向这个目录。下一次备份时，就将<code>$&#123;BACKUP_DIR&#125;/latest</code>作为基准目录，生成新的备份目录。最后，再将软链接<code>$&#123;BACKUP_DIR&#125;/latest</code>指向新的备份目录。</p><h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><p><code>-a</code>、<code>--archive</code>参数表示存档模式，保存所有的元数据，比如修改时间（modification time）、权限、所有者等，并且软链接也会同步过去。</p><p><code>--append</code>参数指定文件接着上次中断的地方，继续传输。</p><p><code>--append-verify</code>参数跟<code>--append</code>参数类似，但会对传输完成后的文件进行一次校验。如果校验失败，将重新发送整个文件。</p><p><code>-b</code>、<code>--backup</code>参数指定在删除或更新目标目录已经存在的文件时，将该文件更名后进行备份，默认行为是删除。更名规则是添加由<code>--suffix</code>参数指定的文件后缀名，默认是<code>~</code>。</p><p><code>--backup-dir</code>参数指定文件备份时存放的目录，比如<code>--backup-dir=/path/to/backups</code>。</p><p><code>--bwlimit</code>参数指定带宽限制，默认单位是 KB&#x2F;s，比如<code>--bwlimit=100</code>。</p><p><code>-c</code>、<code>--checksum</code>参数改变<code>rsync</code>的校验方式。默认情况下，rsync 只检查文件的大小和最后修改日期是否发生变化，如果发生变化，就重新传输；使用这个参数以后，则通过判断文件内容的校验和，决定是否重新传输。</p><p><code>--delete</code>参数删除只存在于目标目录、不存在于源目标的文件，即保证目标目录是源目标的镜像。</p><p><code>-e</code>参数指定使用 SSH 协议传输数据。</p><p><code>--exclude</code>参数指定排除不进行同步的文件，比如<code>--exclude=&quot;*.iso&quot;</code>。</p><p><code>--exclude-from</code>参数指定一个本地文件，里面是需要排除的文件模式，每个模式一行。</p><p><code>--existing</code>、<code>--ignore-non-existing</code>参数表示不同步目标目录中不存在的文件和目录。</p><p><code>-h</code>参数表示以人类可读的格式输出。</p><p><code>-h</code>、<code>--help</code>参数返回帮助信息。</p><p><code>-i</code>参数表示输出源目录与目标目录之间文件差异的详细情况。</p><p><code>--ignore-existing</code>参数表示只要该文件在目标目录中已经存在，就跳过去，不再同步这些文件。</p><p><code>--include</code>参数指定同步时要包括的文件，一般与<code>--exclude</code>结合使用。</p><p><code>--link-dest</code>参数指定增量备份的基准目录。</p><p><code>-m</code>参数指定不同步空目录。</p><p><code>--max-size</code>参数设置传输的最大文件的大小限制，比如不超过200KB（<code>--max-size=&#39;200k&#39;</code>）。</p><p><code>--min-size</code>参数设置传输的最小文件的大小限制，比如不小于10KB（<code>--min-size=10k</code>）。</p><p><code>-n</code>参数或<code>--dry-run</code>参数模拟将要执行的操作，而并不真的执行。配合<code>-v</code>参数使用，可以看到哪些内容会被同步过去。</p><p><code>-P</code>参数是<code>--progress</code>和<code>--partial</code>这两个参数的结合。</p><p><code>--partial</code>参数允许恢复中断的传输。不使用该参数时，<code>rsync</code>会删除传输到一半被打断的文件；使用该参数后，传输到一半的文件也会同步到目标目录，下次同步时再恢复中断的传输。一般需要与<code>--append</code>或<code>--append-verify</code>配合使用。</p><p><code>--partial-dir</code>参数指定将传输到一半的文件保存到一个临时目录，比如<code>--partial-dir=.rsync-partial</code>。一般需要与<code>--append</code>或<code>--append-verify</code>配合使用。</p><p><code>--progress</code>参数表示显示进展。</p><p><code>-r</code>参数表示递归，即包含子目录。</p><p><code>--remove-source-files</code>参数表示传输成功后，删除发送方的文件。</p><p><code>--size-only</code>参数表示只同步大小有变化的文件，不考虑文件修改时间的差异。</p><p><code>--suffix</code>参数指定文件名备份时，对文件名添加的后缀，默认是<code>~</code>。</p><p><code>-u</code>、<code>--update</code>参数表示同步时跳过目标目录中修改时间更新的文件，即不同步这些有更新的时间戳的文件。</p><p><code>-v</code>参数表示输出细节。<code>-vv</code>表示输出更详细的信息，<code>-vvv</code>表示输出最详细的信息。</p><p><code>--version</code>参数返回 rsync 的版本。</p><p><code>-z</code>参数指定同步时压缩数据。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories-on-a-vps">How To Use Rsync to Sync Local and Remote Directories on a VPS</a>, Justin Ellingwood</li><li><a href="https://www.howtoforge.com/mirroring_with_rsync">Mirror Your Web Site With rsync</a>, Falko Timme</li><li><a href="https://linuxconfig.org/examples-on-how-to-use-rsync-for-local-and-remote-data-backups-and-synchonization">Examples on how to use Rsync</a>, Egidio Docile</li><li><a href="https://linuxconfig.org/how-to-create-incremental-backups-using-rsync-on-linux">How to create incremental backups using rsync on Linux</a>, Egidio Docile</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SSH 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scp 命令</title>
      <link href="/2017/05/16/scp%20%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/05/16/scp%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><code>scp</code>是 SSH 提供的一个客户端程序，用来在两台主机之间加密传送文件（即复制文件）。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>scp</code>是 secure copy 的缩写，相当于<code>cp</code>命令 + SSH。它的底层是 SSH 协议，默认端口是22，相当于先使用<code>ssh</code>命令登录远程主机，然后再执行拷贝操作。</p><p><code>scp</code>主要用于以下三种复制操作。</p><ul><li>本地复制到远程。</li><li>远程复制到本地。</li><li>两个远程系统之间的复制。</li></ul><p>使用<code>scp</code>传输数据时，文件和密码都是加密的，不会泄漏敏感信息。</p><span id="more"></span><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><code>scp</code>的语法类似<code>cp</code>的语法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure><p>上面命令中，<code>source</code>是文件当前的位置，<code>destination</code>是文件所要复制到的位置。它们都可以包含用户名和主机名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp user@host:foo.txt bar.txt</span><br></pre></td></tr></table></figure><p>上面命令将远程主机（<code>user@host</code>）用户主目录下的<code>foo.txt</code>，复制为本机当前目录的<code>bar.txt</code>。可以看到，主机与文件之间要使用冒号（<code>:</code>）分隔。</p><p><code>scp</code>会先用 SSH 登录到远程主机，然后在加密连接之中复制文件。客户端发起连接后，会提示用户输入密码，这部分是跟 SSH 的用法一致的。</p><p>用户名和主机名都是可以省略的。用户名的默认值是本机的当前用户名，主机名默认为当前主机。注意，<code>scp</code>会使用 SSH 客户端的配置文件<code>.ssh/config</code>，如果配置文件里面定义了主机的别名，这里也可以使用别名连接。</p><p><code>scp</code>支持一次复制多个文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp source1 source2 destination</span><br></pre></td></tr></table></figure><p>上面命令会将<code>source1</code>和<code>source2</code>两个文件，复制到<code>destination</code>。</p><p>注意，如果所要复制的文件，在目标位置已经存在同名文件，<code>scp</code>会在没有警告的情况下覆盖同名文件。</p><h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h2><p><strong>（1）本地文件复制到远程</strong></p><p>复制本机文件到远程系统的用法如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">$ scp SourceFile user@host:directory/TargetFile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">$ scp file.txt remote_username@10.10.0.2:/remote/directory</span><br></pre></td></tr></table></figure><p>下面是复制整个目录的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本机的 documents 目录拷贝到远程主机，</span></span><br><span class="line"><span class="comment"># 会在远程主机创建 documents 目录</span></span><br><span class="line">$ scp -r documents username@server_ip:/path_to_remote_directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本机整个目录拷贝到远程目录下</span></span><br><span class="line">$ scp -r localmachine/path_to_the_directory username@server_ip:/path_to_remote_directory/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本机目录下的所有内容拷贝到远程目录下</span></span><br><span class="line">$ scp -r localmachine/path_to_the_directory/* username@server_ip:/path_to_remote_directory/</span><br></pre></td></tr></table></figure><p><strong>（2）远程文件复制到本地</strong></p><p>从远程主机复制文件到本地的用法如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">$ scp user@host:directory/SourceFile TargetFile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">$ scp remote_username@10.10.0.2:/remote/file.txt /local/directory</span><br></pre></td></tr></table></figure><p>下面是复制整个目录的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拷贝一个远程目录到本机目录下</span></span><br><span class="line">$ scp -r username@server_ip:/path_to_remote_directory local-machine/path_to_the_directory/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝远程目录下的所有内容，到本机目录下</span></span><br><span class="line">$ scp -r username@server_ip:/path_to_remote_directory/* local-machine/path_to_the_directory/</span><br><span class="line">$ scp -r user@host:directory/SourceFolder TargetFolder</span><br></pre></td></tr></table></figure><p><strong>（3）两个远程系统之间的复制</strong></p><p>本机发出指令，从远程主机 A 拷贝到远程主机 B 的用法如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">$ scp user@host1:directory/SourceFile user@host2:directory/SourceFile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">$ scp user1@host1.com:/files/file.txt user2@host2.com:/files</span><br></pre></td></tr></table></figure><p>系统将提示你输入两个远程帐户的密码。数据将直接从一个远程主机传输到另一个远程主机。</p><h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><p><strong>（1）<code>-c</code></strong></p><p><code>-c</code>参数用来指定文件拷贝数据传输的加密算法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -c blowfish some_file your_username@remotehost.edu:~</span><br></pre></td></tr></table></figure><p>上面代码指定加密算法为<code>blowfish</code>。</p><p><strong>（2）<code>-C</code></strong></p><p><code>-C</code>参数表示是否在传输时压缩文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -c blowfish -C local_file your_username@remotehost.edu:~</span><br></pre></td></tr></table></figure><p><strong>（3）<code>-F</code></strong></p><p><code>-F</code>参数用来指定 ssh_config 文件，供 ssh 使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -F /home/pungki/proxy_ssh_config Label.pdf root@172.20.10.8:/root</span><br></pre></td></tr></table></figure><p><strong>（4）<code>-i</code></strong></p><p><code>-i</code>参数用来指定密钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -vCq -i private_key.pem ~/test.txt root@192.168.1.3:/some/path/test.txt</span><br></pre></td></tr></table></figure><p><strong>（5）<code>-l</code></strong></p><p><code>-l</code>参数用来限制传输数据的带宽速率，单位是 Kbit&#x2F;sec。对于多人分享的带宽，这个参数可以留出一部分带宽供其他人使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -l 80 yourusername@yourserver:/home/yourusername/* .</span><br></pre></td></tr></table></figure><p>上面代码中，<code>scp</code>命令占用的带宽限制为每秒 80K 比特位，即每秒 10K 字节。</p><p><strong>（6）<code>-p</code></strong></p><p><code>-p</code>参数用来保留修改时间（modification time）、访问时间（access time）、文件状态（mode）等原始文件的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -p ~/test.txt root@192.168.1.3:/some/path/test.txt</span><br></pre></td></tr></table></figure><p><strong>（7）<code>-P</code></strong></p><p><code>-P</code>参数用来指定远程主机的 SSH 端口。如果远程主机使用默认端口22，可以不用指定，否则需要用<code>-P</code>参数在命令中指定。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -P 2222 user@host:directory/SourceFile TargetFile</span><br></pre></td></tr></table></figure><p><strong>（8）<code>-q</code></strong></p><p><code>-q</code>参数用来关闭显示拷贝的进度条。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -q Label.pdf mrarianto@202.x.x.x:.</span><br></pre></td></tr></table></figure><p><strong>（9）<code>-r</code></strong></p><p><code>-r</code>参数表示是否以递归方式复制目录。</p><p><strong>（10）<code>-v</code></strong></p><p><code>-v</code>参数用来显示详细的输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -v ~/test.txt root@192.168.1.3:/root/help2356.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SSH 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 证书登录</title>
      <link href="/2017/04/22/SSH%20%E8%AF%81%E4%B9%A6%E7%99%BB%E5%BD%95/"/>
      <url>/2017/04/22/SSH%20%E8%AF%81%E4%B9%A6%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>SSH 是服务器登录工具，一般情况下都采用密码登录或密钥登录。</p><p>但是，SSH 还有第三种登录方法，那就是证书登录。某些情况下，它是更合理、更安全的登录方法，本文就介绍这种登录方法。</p><h2 id="非证书登录的缺点"><a href="#非证书登录的缺点" class="headerlink" title="非证书登录的缺点"></a>非证书登录的缺点</h2><p>密码登录和密钥登录，都有各自的缺点。</p><p>密码登录需要输入服务器密码，这非常麻烦，也不安全，存在被暴力破解的风险。</p><p>密钥登录需要服务器保存用户的公钥，也需要用户保存服务器公钥的指纹。这对于多用户、多服务器的大型机构很不方便，如果有员工离职，需要将他的公钥从每台服务器删除。</p><h2 id="证书登录是什么？"><a href="#证书登录是什么？" class="headerlink" title="证书登录是什么？"></a>证书登录是什么？</h2><p>证书登录就是为了解决上面的缺点而设计的。它引入了一个证书颁发机构（Certificate Authority，简称 CA），对信任的服务器颁发服务器证书，对信任的用户颁发用户证书。</p><p>登录时，用户和服务器不需要提前知道彼此的公钥，只需要交换各自的证书，验证是否可信即可。</p><p>证书登录的主要优点有两个：（1）用户和服务器不用交换公钥，这更容易管理，也具有更好的可扩展性。（2）证书可以设置到期时间，而公钥没有到期时间。针对不同的情况，可以设置有效期很短的证书，进一步提高安全性。</p><span id="more"></span><h2 id="证书登录的流程"><a href="#证书登录的流程" class="headerlink" title="证书登录的流程"></a>证书登录的流程</h2><p>SSH 证书登录之前，如果还没有证书，需要生成证书。具体方法是：（1）用户和服务器都将自己的公钥，发给 CA；（2）CA 使用服务器公钥，生成服务器证书，发给服务器；（3）CA 使用用户的公钥，生成用户证书，发给用户。</p><p>有了证书以后，用户就可以登录服务器了。整个过程都是 SSH 自动处理，用户无感知。</p><p>第一步，用户登录服务器时，SSH 自动将用户证书发给服务器。</p><p>第二步，服务器检查用户证书是否有效，以及是否由可信的 CA 颁发。证实以后，就可以信任用户。</p><p>第三步，SSH 自动将服务器证书发给用户。</p><p>第四步，用户检查服务器证书是否有效，以及是否由信任的 CA 颁发。证实以后，就可以信任服务器。</p><p>第五步，双方建立连接，服务器允许用户登录。</p><h2 id="生成-CA-的密钥"><a href="#生成-CA-的密钥" class="headerlink" title="生成 CA 的密钥"></a>生成 CA 的密钥</h2><p>证书登录的前提是，必须有一个 CA，而 CA 本质上就是一对密钥，跟其他密钥没有不同，CA 就用这对密钥去签发证书。</p><p>虽然 CA 可以用同一对密钥签发用户证书和服务器证书，但是出于安全性和灵活性，最好用不同的密钥分别签发。所以，CA 至少需要两对密钥，一对是签发用户证书的密钥，假设叫做<code>user_ca</code>，另一对是签发服务器证书的密钥，假设叫做<code>host_ca</code>。</p><p>使用下面的命令，生成<code>user_ca</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成 CA 签发用户证书的密钥</span></span><br><span class="line">$ ssh-keygen -t rsa -b 4096 -f ~/.ssh/user_ca -C user_ca</span><br></pre></td></tr></table></figure><p>上面的命令会在<code>~/.ssh</code>目录生成一对密钥：<code>user_ca</code>（私钥）和<code>user_ca.pub</code>（公钥）。</p><p>这个命令的各个参数含义如下。</p><ul><li><code>-t rsa</code>：指定密钥算法 RSA。</li><li><code>-b 4096</code>：指定密钥的位数是4096位。安全性要求不高的场合，这个值可以小一点，但是不应小于1024。</li><li><code>-f ~/.ssh/user_ca</code>：指定生成密钥的位置和文件名。</li><li><code>-C user_ca</code>：指定密钥的识别字符串，相当于注释，可以随意设置。</li></ul><p>使用下面的命令，生成<code>host_ca</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成 CA 签发服务器证书的密钥</span></span><br><span class="line">$ ssh-keygen -t rsa -b 4096 -f host_ca -C host_ca</span><br></pre></td></tr></table></figure><p>上面的命令会在<code>~/.ssh</code>目录生成一对密钥：<code>host_ca</code>（私钥）和<code>host_ca.pub</code>（公钥）。</p><p>现在，<code>~/.ssh</code>目录应该至少有四把密钥。</p><ul><li><code>~/.ssh/user_ca</code></li><li><code>~/.ssh/user_ca.pub</code></li><li><code>~/.ssh/host_ca</code></li><li><code>~/.ssh/host_ca.pub</code></li></ul><h2 id="CA-签发服务器证书"><a href="#CA-签发服务器证书" class="headerlink" title="CA 签发服务器证书"></a>CA 签发服务器证书</h2><p>有了 CA 以后，就可以签发服务器证书了。</p><p>签发证书，除了 CA 的密钥以外，还需要服务器的公钥。一般来说，SSH 服务器（通常是<code>sshd</code>）安装时，已经生成密钥<code>/etc/ssh/ssh_host_rsa_key</code>了。如果没有的话，可以用下面的命令生成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ssh-keygen -f /etc/ssh/ssh_host_rsa_key -b 4096 -t rsa</span><br></pre></td></tr></table></figure><p>上面命令会在<code>/etc/ssh</code>目录，生成<code>ssh_host_rsa_key</code>（私钥）和<code>ssh_host_rsa_key.pub</code>（公钥）。然后，需要把服务器公钥<code>ssh_host_rsa_key.pub</code>，复制或上传到 CA 所在的服务器。</p><p>上传以后，CA 就可以使用密钥<code>host_ca</code>为服务器的公钥<code>ssh_host_rsa_key.pub</code>签发服务器证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -s host_ca -I host.example.com -h -n host.example.com -V +52w ssh_host_rsa_key.pub</span><br></pre></td></tr></table></figure><p>上面的命令会生成服务器证书<code>ssh_host_rsa_key-cert.pub</code>（服务器公钥名字加后缀<code>-cert</code>）。这个命令各个参数的含义如下。</p><ul><li><code>-s</code>：指定 CA 签发证书的密钥。</li><li><code>-I</code>：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。</li><li><code>-h</code>：指定该证书是服务器证书，而不是用户证书。</li><li><code>-n host.example.com</code>：指定服务器的域名，表示证书仅对该域名有效。如果有多个域名，则使用逗号分隔。用户登录该域名服务器时，SSH 通过证书的这个值，分辨应该使用哪张证书发给用户，用来证明服务器的可信性。</li><li><code>-V +52w</code>：指定证书的有效期，这里为52周（一年）。默认情况下，证书是永远有效的。建议使用该参数指定有效期，并且有效期最好短一点，最长不超过52周。</li><li><code>ssh_host_rsa_key.pub</code>：服务器公钥。</li></ul><p>生成证书以后，可以使用下面的命令，查看证书的细节。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -L -f ssh_host_rsa_key-cert.pub</span><br></pre></td></tr></table></figure><p>最后，为证书设置权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> 600 ssh_host_rsa_key-cert.pub</span><br></pre></td></tr></table></figure><h2 id="CA-签发用户证书"><a href="#CA-签发用户证书" class="headerlink" title="CA 签发用户证书"></a>CA 签发用户证书</h2><p>下面，再用 CA 签发用户证书。这时需要用户的公钥，如果没有的话，客户端可以用下面的命令生成一对密钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -f ~/.ssh/user_key -b 4096 -t rsa</span><br></pre></td></tr></table></figure><p>上面命令会在<code>~/.ssh</code>目录，生成<code>user_key</code>（私钥）和<code>user_key.pub</code>（公钥）。</p><p>然后，将用户公钥<code>user_key.pub</code>，上传或复制到 CA 服务器。接下来，就可以使用 CA 的密钥<code>user_ca</code>为用户公钥<code>user_key.pub</code>签发用户证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -s user_ca -I user@example.com -n user -V +1d user_key.pub</span><br></pre></td></tr></table></figure><p>上面的命令会生成用户证书<code>user_key-cert.pub</code>（用户公钥名字加后缀<code>-cert</code>）。这个命令各个参数的含义如下。</p><ul><li><code>-s</code>：指定 CA 签发证书的密钥</li><li><code>-I</code>：身份字符串，可以随便设置，相当于注释，方便区分证书，将来可以使用这个字符串撤销证书。</li><li><code>-n user</code>：指定用户名，表示证书仅对该用户名有效。如果有多个用户名，使用逗号分隔。用户以该用户名登录服务器时，SSH 通过这个值，分辨应该使用哪张证书，证明自己的身份，发给服务器。</li><li><code>-V +1d</code>：指定证书的有效期，这里为1天，强制用户每天都申请一次证书，提高安全性。默认情况下，证书是永远有效的。</li><li><code>user_key.pub</code>：用户公钥。</li></ul><p>生成证书以后，可以使用下面的命令，查看证书的细节。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -L -f user_key-cert.pub</span><br></pre></td></tr></table></figure><p>最后，为证书设置权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> 600 user_key-cert.pub</span><br></pre></td></tr></table></figure><h2 id="服务器安装证书"><a href="#服务器安装证书" class="headerlink" title="服务器安装证书"></a>服务器安装证书</h2><p>CA 生成服务器证书<code>ssh_host_rsa_key-cert.pub</code>以后，需要将该证书发回服务器，可以使用下面的<code>scp</code>命令，将证书拷贝过去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp ~/.ssh/ssh_host_rsa_key-cert.pub root@host.example.com:/etc/ssh/</span><br></pre></td></tr></table></figure><p>然后，将下面一行添加到服务器配置文件<code>/etc/ssh/sshd_config</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub</span><br></pre></td></tr></table></figure><p>上面的代码告诉 sshd，服务器证书是哪一个文件。</p><p>重新启动 sshd。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart sshd.service</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ sudo service sshd restart</span><br></pre></td></tr></table></figure><h2 id="服务器安装-CA-公钥"><a href="#服务器安装-CA-公钥" class="headerlink" title="服务器安装 CA 公钥"></a>服务器安装 CA 公钥</h2><p>为了让服务器信任用户证书，必须将 CA 签发用户证书的公钥<code>user_ca.pub</code>，拷贝到服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp ~/.ssh/user_ca.pub root@host.example.com:/etc/ssh/</span><br></pre></td></tr></table></figure><p>上面的命令，将 CA 签发用户证书的公钥<code>user_ca.pub</code>，拷贝到 SSH 服务器的<code>/etc/ssh</code>目录。</p><p>然后，将下面一行添加到服务器配置文件<code>/etc/ssh/sshd_config</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TrustedUserCAKeys /etc/ssh/user_ca.pub</span><br></pre></td></tr></table></figure><p>上面的做法是将<code>user_ca.pub</code>加到<code>/etc/ssh/sshd_config</code>，这会产生全局效果，即服务器的所有账户都会信任<code>user_ca</code>签发的所有用户证书。</p><p>另一种做法是将<code>user_ca.pub</code>加到服务器某个账户的<code>~/.ssh/authorized_keys</code>文件，只让该账户信任<code>user_ca</code>签发的用户证书。具体方法是打开<code>~/.ssh/authorized_keys</code>，追加一行，开头是<code>@cert-authority principals=&quot;...&quot;</code>，然后后面加上<code>user_ca.pub</code>的内容，大概是下面这个样子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@cert-authority principals=<span class="string">&quot;user&quot;</span> ssh-rsa AAAAB3Nz...XNRM1EX2gQ==</span><br></pre></td></tr></table></figure><p>上面代码中，<code>principals=&quot;user&quot;</code>指定用户登录的服务器账户名，一般就是<code>authorized_keys</code>文件所在的账户。</p><p>重新启动 sshd。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart sshd.service</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ sudo service sshd restart</span><br></pre></td></tr></table></figure><p>至此，SSH 服务器已配置为信任<code>user_ca</code>签发的证书。</p><h2 id="客户端安装证书"><a href="#客户端安装证书" class="headerlink" title="客户端安装证书"></a>客户端安装证书</h2><p>客户端安装用户证书很简单，就是从 CA 将用户证书<code>user_key-cert.pub</code>复制到客户端，与用户的密钥<code>user_key</code>保存在同一个目录即可。</p><h2 id="客户端安装-CA-公钥"><a href="#客户端安装-CA-公钥" class="headerlink" title="客户端安装 CA 公钥"></a>客户端安装 CA 公钥</h2><p>为了让客户端信任服务器证书，必须将 CA 签发服务器证书的公钥<code>host_ca.pub</code>，加到客户端的<code>/etc/ssh/ssh_known_hosts</code>文件（全局级别）或者<code>~/.ssh/known_hosts</code>文件（用户级别）。</p><p>具体做法是打开<code>ssh_known_hosts</code>或<code>known_hosts</code>文件，追加一行，开头为<code>@cert-authority *.example.com</code>，然后将<code>host_ca.pub</code>文件的内容（即公钥）粘贴在后面，大概是下面这个样子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@cert-authority *.example.com ssh-rsa AAAAB3Nz...XNRM1EX2gQ==</span><br></pre></td></tr></table></figure><p>上面代码中，<code>*.example.com</code>是域名的模式匹配，表示只要服务器符合该模式的域名，且签发服务器证书的 CA 匹配后面给出的公钥，就都可以信任。如果没有域名限制，这里可以写成<code>*</code>。如果有多个域名模式，可以使用逗号分隔；如果服务器没有域名，可以用主机名（比如<code>host1,host2,host3</code>）或者 IP 地址（比如<code>11.12.13.14,21.22.23.24</code>）。</p><p>然后，就可以使用证书，登录远程服务器了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i ~/.ssh/user_key user@host.example.com</span><br></pre></td></tr></table></figure><p>上面命令的<code>-i</code>参数用来指定用户的密钥。如果证书与密钥在同一个目录，则连接服务器时将自动使用该证书。</p><h2 id="废除证书"><a href="#废除证书" class="headerlink" title="废除证书"></a>废除证书</h2><p>废除证书的操作，分成用户证书的废除和服务器证书的废除两种。</p><p>服务器证书的废除，用户需要在<code>known_hosts</code>文件里面，修改或删除对应的<code>@cert-authority</code>命令的那一行。</p><p>用户证书的废除，需要在服务器新建一个<code>/etc/ssh/revoked_keys</code>文件，然后在配置文件<code>sshd_config</code>添加一行，内容如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RevokedKeys /etc/ssh/revoked_keys</span><br></pre></td></tr></table></figure><p><code>revoked_keys</code>文件保存不再信任的用户公钥，由下面的命令生成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -kf /etc/ssh/revoked_keys -z 1 ~/.ssh/user1_key.pub</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-z</code>参数用来指定用户公钥保存在<code>revoked_keys</code>文件的哪一行，这个例子是保存在第1行。</p><p>如果以后需要废除其他的用户公钥，可以用下面的命令保存在第2行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -ukf /etc/ssh/revoked_keys -z 2 ~/.ssh/user2_key.pub</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://smallstep.com/blog/ssh-emergency-access/">SSH Emergency Access</a>, Carl Tashian</li><li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/sec-using_openssh_certificate_authentication">Using OpenSSH Certificate Authentication</a>, Red Hat Enterprise Linux Deployment Guide</li><li><a href="https://gravitational.com/blog/how-to-ssh-properly/">How to SSH Properly</a>, Gus Luxton</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SSH 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 端口转发</title>
      <link href="/2017/03/26/SSH%20%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
      <url>/2017/03/26/SSH%20%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SSH 除了登录服务器，还有一大用途，就是作为加密通信的中介，充当两台服务器之间的通信加密跳板，使得原本不加密的通信变成加密通信。这个功能称为端口转发（port forwarding），又称 SSH 隧道（tunnel）。</p><p>端口转发有两个主要作用：</p><p>（1）将不加密的数据放在 SSH 安全连接里面传输，使得原本不安全的网络服务增加了安全性，比如通过端口转发访问 Telnet、FTP 等明文服务，数据传输就都会加密。</p><p>（2）作为数据通信的加密跳板，绕过网络防火墙。</p><p>端口转发有三种使用方法：动态转发，本地转发，远程转发。下面逐一介绍。</p><span id="more"></span><h2 id="动态转发"><a href="#动态转发" class="headerlink" title="动态转发"></a>动态转发</h2><p>动态转发指的是，本机与 SSH 服务器之间创建了一个加密连接，然后本机内部针对某个端口的通信，都通过这个加密连接转发。它的一个使用场景就是，访问所有外部网站，都通过 SSH 转发。</p><p>动态转发需要把本地端口绑定到 SSH 服务器。至于 SSH 服务器要去访问哪一个网站，完全是动态的，取决于原始通信，所以叫做动态转发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -D local-port tunnel-host -N</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-D</code>表示动态转发，<code>local-port</code>是本地端口，<code>tunnel-host</code>是 SSH 服务器，<code>-N</code>表示这个 SSH 连接只进行端口转发，不登录远程 Shell，不能执行远程命令，只能充当隧道。</p><p>举例来说，如果本地端口是<code>2121</code>，那么动态转发的命令就是下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -D 2121 tunnel-host -N</span><br></pre></td></tr></table></figure><p>注意，这种转发采用了 SOCKS5 协议。访问外部网站时，需要把 HTTP 请求转成 SOCKS5 协议，才能把本地端口的请求转发出去。</p><p>下面是 SSH 隧道建立后的一个使用实例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -x socks5://localhost:2121 http://www.example.com</span><br></pre></td></tr></table></figure><p>上面命令中，curl 的<code>-x</code>参数指定代理服务器，即通过 SOCKS5 协议的本地<code>2121</code>端口，访问<code>http://www.example.com</code>。</p><p>如果经常使用动态转发，可以将设置写入 SSH 客户端的用户个人配置文件（<code>~/.ssh/config</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DynamicForward tunnel-host:local-port</span><br></pre></td></tr></table></figure><h2 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a>本地转发</h2><p>本地转发（local forwarding）指的是，SSH 服务器作为中介的跳板机，建立本地计算机与特定目标网站之间的加密连接。本地转发是在本地计算机的 SSH 客户端建立的转发规则。</p><p>它会指定一个本地端口（local-port），所有发向那个端口的请求，都会转发到 SSH 跳板机（tunnel-host），然后 SSH 跳板机作为中介，将收到的请求发到目标服务器（target-host）的目标端口（target-port）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L local-port:target-host:target-port tunnel-host</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-L</code>参数表示本地转发，<code>local-port</code>是本地端口，<code>target-host</code>是你想要访问的目标服务器，<code>target-port</code>是目标服务器的端口，<code>tunnel-host</code>是 SSH 跳板机。</p><p>举例来说，现在有一台 SSH 跳板机<code>tunnel-host</code>，我们想要通过这台机器，在本地<code>2121</code>端口与目标网站<code>www.example.com</code>的80端口之间建立 SSH 隧道，就可以写成下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L 2121:www.example.com:80 tunnel-host -N</span><br></pre></td></tr></table></figure><p>然后，访问本机的<code>2121</code>端口，就是访问<code>www.example.com</code>的80端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:2121</span><br></pre></td></tr></table></figure><p>注意，本地端口转发采用 HTTP 协议，不用转成 SOCKS5 协议。</p><p>另一个例子是加密访问邮件获取协议 POP3。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L 1100:mail.example.com:110 mail.example.com</span><br></pre></td></tr></table></figure><p>上面命令将本机的1100端口，绑定邮件服务器<code>mail.example.com</code>的110端口（POP3 协议的默认端口）。端口转发建立以后，POP3 邮件客户端只需要访问本机的1100端口，请求就会通过 SSH 跳板机（这里是<code>mail.example.com</code>），自动转发到<code>mail.example.com</code>的110端口。</p><p>上面这种情况有一个前提条件，就是<code>mail.example.com</code>必须运行 SSH 服务器。否则，就必须通过另一台 SSH 服务器中介，执行的命令要改成下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L 1100:mail.example.com:110 other.example.com</span><br></pre></td></tr></table></figure><p>上面命令中，本机的1100端口还是绑定<code>mail.example.com</code>的110端口，但是由于<code>mail.example.com</code>没有运行 SSH 服务器，所以必须通过<code>other.example.com</code>中介。本机的 POP3 请求通过1100端口，先发给<code>other.example.com</code>的22端口（sshd 默认端口），再由后者转给<code>mail.example.com</code>，得到数据以后再原路返回。</p><p>注意，采用上面的中介方式，只有本机到<code>other.example.com</code>的这一段是加密的，<code>other.example.com</code>到<code>mail.example.com</code>的这一段并不加密。</p><p>这个命令最好加上<code>-N</code>参数，表示不在 SSH 跳板机执行远程命令，让 SSH 只充当隧道。另外还有一个<code>-f</code>参数表示 SSH 连接在后台运行。</p><p>如果经常使用本地转发，可以将设置写入 SSH 客户端的用户个人配置文件（<code>~/.ssh/config</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host test.example.com</span><br><span class="line">LocalForward client-IP:client-port server-IP:server-port</span><br></pre></td></tr></table></figure><h2 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a>远程转发</h2><p>远程转发指的是在远程 SSH 服务器建立的转发规则。</p><p>它跟本地转发正好反过来。建立本地计算机到远程计算机的 SSH 隧道以后，本地转发是通过本地计算机访问远程计算机，而远程转发则是通过远程计算机访问本地计算机。它的命令格式如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -R remote-port:target-host:target-port -N remotehost</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-R</code>参数表示远程端口转发，<code>remote-port</code>是远程计算机的端口，<code>target-host</code>和<code>target-port</code>是目标服务器及其端口，<code>remotehost</code>是远程计算机。</p><p>远程转发主要针对内网的情况。下面举两个例子。</p><p>第一个例子是内网某台服务器<code>localhost</code>在 80 端口开了一个服务，可以通过远程转发将这个 80 端口，映射到具有公网 IP 地址的<code>my.public.server</code>服务器的 8080 端口，使得访问<code>my.public.server:8080</code>这个地址，就可以访问到那台内网服务器的 80 端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -R 8080:localhost:80 -N my.public.server</span><br></pre></td></tr></table></figure><p>上面命令是在内网<code>localhost</code>服务器上执行，建立从<code>localhost</code>到<code>my.public.server</code>的 SSH 隧道。运行以后，用户访问<code>my.public.server:8080</code>，就会自动映射到<code>localhost:80</code>。</p><p>第二个例子是本地计算机<code>local</code>在外网，SSH 跳板机和目标服务器<code>my.private.server</code>都在内网，必须通过 SSH 跳板机才能访问目标服务器。但是，本地计算机<code>local</code>无法访问内网之中的 SSH 跳板机，而 SSH 跳板机可以访问本机计算机。</p><p>由于本机无法访问内网 SSH 跳板机，就无法从外网发起 SSH 隧道，建立端口转发。必须反过来，从 SSH 跳板机发起隧道，建立端口转发，这时就形成了远程端口转发。跳板机执行下面的命令，绑定本地计算机<code>local</code>的<code>2121</code>端口，去访问<code>my.private.server:80</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -R 2121:my.private.server:80 -N <span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>上面命令是在 SSH 跳板机上执行的，建立跳板机到<code>local</code>的隧道，并且这条隧道的出口映射到<code>my.private.server:80</code>。</p><p>显然，远程转发要求本地计算机<code>local</code>也安装了 SSH 服务器，这样才能接受 SSH 跳板机的远程登录。</p><p>执行上面的命令以后，跳板机到<code>local</code>的隧道已经建立了。然后，就可以从本地计算机访问目标服务器了，即在本机执行下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:2121</span><br></pre></td></tr></table></figure><p>本机执行上面的命令以后，就会输出服务器<code>my.private.server</code>的 80 端口返回的内容。</p><p>如果经常执行远程端口转发，可以将设置写入 SSH 客户端的用户个人配置文件（<code>~/.ssh/config</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host remote-forward</span><br><span class="line">  HostName test.example.com</span><br><span class="line">  RemoteForward remote-port target-host:target-port</span><br></pre></td></tr></table></figure><p>完成上面的设置后，执行下面的命令就会建立远程转发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -N remote-forward</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">$ ssh -R remote-port:target-host:target-port -N test.example.com</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面看两个端口转发的实例。</p><h3 id="简易-VPN"><a href="#简易-VPN" class="headerlink" title="简易 VPN"></a>简易 VPN</h3><p>VPN 用来在外网与内网之间建立一条加密通道。内网的服务器不能从外网直接访问，必须通过一个跳板机，如果本机可以访问跳板机，就可以使用 SSH 本地转发，简单实现一个 VPN。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L 2080:corp-server:80 -L 2443:corp-server:443 tunnel-host -N</span><br></pre></td></tr></table></figure><p>上面命令通过 SSH 跳板机，将本机的<code>2080</code>端口绑定内网服务器的<code>80</code>端口，本机的<code>2443</code>端口绑定内网服务器的<code>443</code>端口。</p><h3 id="两级跳板"><a href="#两级跳板" class="headerlink" title="两级跳板"></a>两级跳板</h3><p>端口转发可以有多级，比如新建两个 SSH 隧道，第一个隧道转发给第二个隧道，第二个隧道才能访问目标服务器。</p><p>首先，在本机新建第一级隧道。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L 7999:localhost:2999 tunnel1-host</span><br></pre></td></tr></table></figure><p>上面命令在本地<code>7999</code>端口与<code>tunnel1-host</code>之间建立一条隧道，隧道的出口是<code>tunnel1-host</code>的<code>localhost:2999</code>，也就是<code>tunnel1-host</code>收到本机的请求以后，转发给自己的<code>2999</code>端口。</p><p>然后，在第一台跳板机（<code>tunnel1-host</code>）执行下面的命令，新建第二级隧道。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -L 2999:target-host:7999 tunnel2-host -N</span><br></pre></td></tr></table></figure><p>上面命令将第一台跳板机<code>tunnel1-host</code>的<code>2999</code>端口，通过第二台跳板机<code>tunnel2-host</code>，连接到目标服务器<code>target-host</code>的<code>7999</code>端口。</p><p>最终效果就是，访问本机的<code>7999</code>端口，就会转发到<code>target-host</code>的<code>7999</code>端口。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://solitum.net/posts/an-illustrated-guide-to-ssh-tunnels/">An Illustrated Guide to SSH Tunnels</a>, Scott Wiersdorf</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SSH 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 服务器</title>
      <link href="/2017/03/13/SSH%20%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2017/03/13/SSH%20%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SSH 的架构是服务器&#x2F;客户端模式，两端运行的软件是不一样的。OpenSSH 的客户端软件是 ssh，服务器软件是 sshd。本章介绍 sshd 的各种知识。</p><p>如果没有安装 sshd，可以用下面的命令安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian</span></span><br><span class="line">$ sudo aptitude install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># Red Hat</span></span><br><span class="line">$ sudo yum install openssh-server</span><br></pre></td></tr></table></figure><p>一般来说，sshd 安装后会跟着系统一起启动。如果当前 sshd 没有启动，可以用下面的命令启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sshd</span><br></pre></td></tr></table></figure><p>上面的命令运行后，如果提示“sshd re-exec requires execution with an absolute path”，就需要使用绝对路径来启动。这是为了防止有人出于各种目的，放置同名软件在<code>$PATH</code>变量指向的目录中，代替真正的 sshd。</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Centos、Ubuntu、OS X</span></span><br><span class="line">$ /usr/sbin/sshd</span><br></pre></td></tr></table></figure><p>上面的命令运行以后，sshd 自动进入后台，所以命令后面不需要加上<code>&amp;</code>。</p><p>除了直接运行可执行文件，也可以通过 Systemd 启动 sshd。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ sudo systemctl start sshd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">$ sudo systemctl stop sshd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">$ sudo systemctl restart sshd.service</span><br></pre></td></tr></table></figure><p>下面的命令让 sshd 在计算机下次启动时自动运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> sshd.service</span><br></pre></td></tr></table></figure><h2 id="sshd-配置文件"><a href="#sshd-配置文件" class="headerlink" title="sshd 配置文件"></a>sshd 配置文件</h2><p>sshd 的配置文件在<code>/etc/ssh</code>目录，主配置文件是<code>sshd_config</code>，此外还有一些安装时生成的密钥。</p><ul><li><code>/etc/ssh/sshd_config</code>：配置文件</li><li><code>/etc/ssh/ssh_host_ecdsa_key</code>：ECDSA 私钥。</li><li><code>/etc/ssh/ssh_host_ecdsa_key.pub</code>：ECDSA 公钥。</li><li><code>/etc/ssh/ssh_host_key</code>：用于 SSH 1 协议版本的 RSA 私钥。</li><li><code>/etc/ssh/ssh_host_key.pub</code>：用于 SSH 1 协议版本的 RSA 公钥。</li><li><code>/etc/ssh/ssh_host_rsa_key</code>：用于 SSH 2 协议版本的 RSA 私钥。</li><li><code>/etc/ssh/ssh_host_rsa_key.pub</code>：用于 SSH 2 协议版本的 RSA 公钥。</li><li><code>/etc/pam.d/sshd</code>：PAM 配置文件。</li></ul><p>注意，如果重装 sshd，上面这些密钥都会重新生成，导致客户端重新连接 ssh 服务器时，会跳出警告，拒绝连接。为了避免这种情况，可以在重装 sshd 时，先备份<code>/etc/ssh</code>目录，重装后再恢复这个目录。</p><p>配置文件<code>sshd_config</code>的格式是，每个命令占据一行。每行都是配置项和对应的值，配置项的大小写不敏感，与值之间使用空格分隔。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Port 2034</span><br></pre></td></tr></table></figure><p>上面的配置命令指定，配置项<code>Port</code>的值是<code>2034</code>。<code>Port</code>写成<code>port</code>也可。</p><p>配置文件还有另一种格式，就是配置项与值之间有一个等号，等号前后的空格可选。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Port = 2034</span><br></pre></td></tr></table></figure><p>配置文件里面，<code>#</code>开头的行表示注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一行注释</span></span><br></pre></td></tr></table></figure><p>注意，注释只能放在一行的开头，不能放在一行的结尾。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Port 2034 <span class="comment"># 此处不允许注释</span></span><br></pre></td></tr></table></figure><p>上面的写法是错误的。</p><p>另外，空行等同于注释。</p><p>sshd 启动时会自动读取默认的配置文件。如果希望使用其他的配置文件，可以用 sshd 命令的<code>-f</code>参数指定。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sshd -f /usr/local/ssh/my_config</span><br></pre></td></tr></table></figure><p>上面的命令指定 sshd 使用另一个配置文件<code>my_config</code>。</p><p>修改配置文件以后，可以用 sshd 命令的<code>-t</code>（test）检查有没有语法错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sshd -t</span><br></pre></td></tr></table></figure><p>配置文件修改以后，并不会自动生效，必须重新启动 sshd。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart sshd.service</span><br></pre></td></tr></table></figure><h2 id="sshd-密钥"><a href="#sshd-密钥" class="headerlink" title="sshd 密钥"></a>sshd 密钥</h2><p>sshd 有自己的一对或多对密钥。它使用密钥向客户端证明自己的身份。所有密钥都是公钥和私钥成对出现，公钥的文件名一般是私钥文件名加上后缀<code>.pub</code>。</p><p>DSA 格式的密钥文件默认为<code>/etc/ssh/ssh_host_dsa_key</code>（公钥为<code>ssh_host_dsa_key.pub</code>），RSA 格式的密钥为<code>/etc/ssh/ssh_host_rsa_key</code>（公钥为<code>ssh_host_rsa_key.pub</code>）。如果需要支持 SSH 1 协议，则必须有密钥<code>/etc/ssh/ssh_host_key</code>。</p><p>如果密钥不是默认文件，那么可以通过配置文件<code>sshd_config</code>的<code>HostKey</code>配置项指定。默认密钥的<code>HostKey</code>设置如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HostKey for protocol version 1</span></span><br><span class="line"><span class="comment"># HostKey /etc/ssh/ssh_host_key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HostKeys for protocol version 2</span></span><br><span class="line"><span class="comment"># HostKey /etc/ssh/ssh_host_rsa_key</span></span><br><span class="line"><span class="comment"># HostKey /etc/ssh/ssh_host_dsa_ke</span></span><br></pre></td></tr></table></figure><p>上面命令前面的<code>#</code>表示这些行都是注释，因为这是默认值，有没有这几行都一样。</p><p>如果要修改密钥，就要去掉行首的<code>#</code>，指定其他密钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HostKey /usr/local/ssh/my_dsa_key</span><br><span class="line">HostKey /usr/local/ssh/my_rsa_key</span><br><span class="line">HostKey /usr/local/ssh/my_old_ssh1_key</span><br></pre></td></tr></table></figure><h2 id="sshd-配置项"><a href="#sshd-配置项" class="headerlink" title="sshd 配置项"></a>sshd 配置项</h2><p>以下是<code>/etc/ssh/sshd_config</code>文件里面的配置项。</p><p><strong>AcceptEnv</strong></p><p><code>AcceptEnv</code>指定允许接受客户端通过<code>SendEnv</code>命令发来的哪些环境变量，即允许客户端设置服务器的环境变量清单，变量名之间使用空格分隔（<code>AcceptEnv PATH TERM</code>）。</p><p><strong>AllowGroups</strong></p><p><code>AllowGroups</code>指定允许登录的用户组（<code>AllowGroups groupName</code>，多个组之间用空格分隔。如果不使用该项，则允许所有用户组登录。</p><p><strong>AllowUsers</strong></p><p><code>AllowUsers</code>指定允许登录的用户，用户名之间使用空格分隔（<code>AllowUsers user1 user2</code>），也可以使用多行<code>AllowUsers</code>命令指定，用户名支持使用通配符。如果不使用该项，则允许所有用户登录。该项也可以使用<code>用户名@域名</code>的格式（比如<code>AllowUsers jones@example.com</code>）。</p><p><strong>AllowTcpForwarding</strong></p><p><code>AllowTcpForwarding</code>指定是否允许端口转发，默认值为<code>yes</code>（<code>AllowTcpForwarding yes</code>），<code>local</code>表示只允许本地端口转发，<code>remote</code>表示只允许远程端口转发。</p><p><strong>AuthorizedKeysFile</strong></p><p><code>AuthorizedKeysFile</code>指定储存用户公钥的目录，默认是用户主目录的<code>ssh/authorized_keys</code>目录（<code>AuthorizedKeysFile .ssh/authorized_keys</code>）。</p><p><strong>Banner</strong></p><p><code>Banner</code>指定用户登录后，sshd 向其展示的信息文件（<code>Banner /usr/local/etc/warning.txt</code>），默认不展示任何内容。</p><p><strong>ChallengeResponseAuthentication</strong></p><p><code>ChallengeResponseAuthentication</code>指定是否使用“键盘交互”身份验证方案，默认值为<code>yes</code>（<code>ChallengeResponseAuthentication yes</code>）。</p><p>从理论上讲，“键盘交互”身份验证方案可以向用户询问多重问题，但是实践中，通常仅询问用户密码。如果要完全禁用基于密码的身份验证，请将<code>PasswordAuthentication</code>和<code>ChallengeResponseAuthentication</code>都设置为<code>no</code>。</p><p><strong>Ciphers</strong></p><p><code>Ciphers</code>指定 sshd 可以接受的加密算法（<code>Ciphers 3des-cbc</code>），多个算法之间使用逗号分隔。</p><p><strong>ClientAliveCountMax</strong></p><p><code>ClientAliveCountMax</code>指定建立连接后，客户端失去响应时，服务器尝试连接的次数（<code>ClientAliveCountMax 8</code>）。</p><p><strong>ClientAliveInterval</strong></p><p><code>ClientAliveInterval</code>指定允许客户端发呆的时间，单位为秒（<code>ClientAliveInterval 180</code>）。如果这段时间里面，客户端没有发送任何信号，SSH 连接将关闭。</p><p><strong>Compression</strong></p><p><code>Compression</code>指定客户端与服务器之间的数据传输是否压缩。默认值为<code>yes</code>（<code>Compression yes</code>）</p><p><strong>DenyGroups</strong></p><p><code>DenyGroups</code>指定不允许登录的用户组（<code>DenyGroups groupName</code>）。</p><p><strong>DenyUsers</strong></p><p><code>DenyUsers</code>指定不允许登录的用户（<code>DenyUsers user1</code>），用户名之间使用空格分隔，也可以使用多行<code>DenyUsers</code>命令指定。</p><p><strong>FascistLogging</strong></p><p>SSH 1 版本专用，指定日志输出全部 Debug 信息（<code>FascistLogging yes</code>）。</p><p><strong>HostKey</strong></p><p><code>HostKey</code>指定 sshd 服务器的密钥，详见前文。</p><p><strong>KeyRegenerationInterval</strong></p><p><code>KeyRegenerationInterval</code>指定 SSH 1 版本的密钥重新生成时间间隔，单位为秒，默认是3600秒（<code>KeyRegenerationInterval 3600</code>）。</p><p><strong>ListenAddress</strong></p><p><code>ListenAddress</code>指定 sshd 监听的本机 IP 地址，即 sshd 启用的 IP 地址，默认是 0.0.0.0（<code>ListenAddress 0.0.0.0</code>）表示在本机所有网络接口启用。可以改成只在某个网络接口启用（比如<code>ListenAddress 192.168.10.23</code>），也可以指定某个域名启用（比如<code>ListenAddress server.example.com</code>）。</p><p>如果要监听多个指定的 IP 地址，可以使用多行<code>ListenAddress</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ListenAddress 172.16.1.1</span><br><span class="line">ListenAddress 192.168.0.1</span><br></pre></td></tr></table></figure><p><strong>LoginGraceTime</strong></p><p><code>LoginGraceTime</code>指定允许客户端登录时发呆的最长时间，比如用户迟迟不输入密码，连接就会自动断开，单位为秒（<code>LoginGraceTime 60</code>）。如果设为<code>0</code>，就表示没有限制。</p><p><strong>LogLevel</strong></p><p><code>LogLevel</code>指定日志的详细程度，可能的值依次为<code>QUIET</code>、<code>FATAL</code>、<code>ERROR</code>、<code>INFO</code>、<code>VERBOSE</code>、<code>DEBUG</code>、<code>DEBUG1</code>、<code>DEBUG2</code>、<code>DEBUG3</code>，默认为<code>INFO</code>（<code>LogLevel INFO</code>）。</p><p><strong>MACs</strong></p><p><code>MACs</code>指定sshd 可以接受的数据校验算法（<code>MACs hmac-sha1</code>），多个算法之间使用逗号分隔。</p><p><strong>MaxAuthTries</strong></p><p><code>MaxAuthTries</code>指定允许 SSH 登录的最大尝试次数（<code>MaxAuthTries 3</code>），如果密码输入错误达到指定次数，SSH 连接将关闭。</p><p><strong>MaxStartups</strong></p><p><code>MaxStartups</code>指定允许同时并发的 SSH 连接数量（MaxStartups）。如果设为<code>0</code>，就表示没有限制。</p><p>这个属性也可以设为<code>A:B:C</code>的形式，比如<code>MaxStartups 10:50:20</code>，表示如果达到10个并发连接，后面的连接将有50%的概率被拒绝；如果达到20个并发连接，则后面的连接将100%被拒绝。</p><p><strong>PasswordAuthentication</strong></p><p><code>PasswordAuthentication</code>指定是否允许密码登录，默认值为<code>yes</code>（<code>PasswordAuthentication yes</code>），建议改成<code>no</code>（禁止密码登录，只允许密钥登录）。</p><p><strong>PermitEmptyPasswords</strong></p><p><code>PermitEmptyPasswords</code>指定是否允许空密码登录，即用户的密码是否可以为空，默认为<code>yes</code>（<code>PermitEmptyPasswords yes</code>），建议改成<code>no</code>（禁止无密码登录）。</p><p><strong>PermitRootLogin</strong></p><p><code>PermitRootLogin</code>指定是否允许根用户登录，默认为<code>yes</code>（<code>PermitRootLogin yes</code>），建议改成<code>no</code>（禁止根用户登录）。</p><p>还有一种写法是写成<code>prohibit-password</code>，表示 root 用户不能用密码登录，但是可以用密钥登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin prohibit-password</span><br></pre></td></tr></table></figure><p><strong>PermitUserEnvironment</strong></p><p><code>PermitUserEnvironment</code>指定是否允许 sshd 加载客户端的<code>~/.ssh/environment</code>文件和<code>~/.ssh/authorized_keys</code>文件里面的<code>environment= options</code>环境变量设置。默认值为<code>no</code>（<code>PermitUserEnvironment no</code>）。</p><p><strong>Port</strong></p><p><code>Port</code>指定 sshd 监听的端口，即客户端连接的端口，默认是22（<code>Port 22</code>）。出于安全考虑，可以改掉这个端口（比如<code>Port 8822</code>）。</p><p>配置文件可以使用多个<code>Port</code>命令，同时监听多个端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Port 22</span><br><span class="line">Port 80</span><br><span class="line">Port 443</span><br><span class="line">Port 8080</span><br></pre></td></tr></table></figure><p>上面的示例表示同时监听4个端口。</p><p><strong>PrintMotd</strong></p><p><code>PrintMotd</code>指定用户登录后，是否向其展示系统的 motd（Message of the day）的信息文件<code>/etc/motd</code>。该文件用于通知所有用户一些重要事项，比如系统维护时间、安全问题等等。默认值为<code>yes</code>（<code>PrintMotd yes</code>），由于 Shell 一般会展示这个信息文件，所以这里可以改为<code>no</code>。</p><p><strong>PrintLastLog</strong></p><p><code>PrintLastLog</code>指定是否打印上一次用户登录时间，默认值为<code>yes</code>（<code>PrintLastLog yes</code>）。</p><p><strong>Protocol</strong></p><p><code>Protocol</code>指定 sshd 使用的协议。<code>Protocol 1</code>表示使用 SSH 1 协议，建议改成<code>Protocol 2</code>（使用 SSH 2 协议）。<code>Protocol 2,1</code>表示同时支持两个版本的协议。</p><p><strong>PubKeyAuthentication</strong></p><p><code>PubKeyAuthentication</code>指定是否允许公钥登录，默认值为<code>yes</code>（<code>PubKeyAuthentication yes</code>）。</p><p><strong>QuietMode</strong></p><p>SSH 1 版本专用，指定日志只输出致命的错误信息（<code>QuietMode yes</code>）。</p><p><strong>RSAAuthentication</strong></p><p><code>RSAAuthentication</code>指定允许 RSA 认证，默认值为<code>yes</code>（<code>RSAAuthentication yes</code>）。</p><p><strong>ServerKeyBits</strong></p><p><code>ServerKeyBits</code>指定 SSH 1 版本的密钥重新生成时的位数，默认是768（<code>ServerKeyBits 768</code>）。</p><p><strong>StrictModes</strong></p><p><code>StrictModes</code>指定 sshd 是否检查用户的一些重要文件和目录的权限。默认为<code>yes</code>（<code>StrictModes yes</code>），即对于用户的 SSH 配置文件、密钥文件和所在目录，SSH 要求拥有者必须是根用户或用户本人，用户组和其他人的写权限必须关闭。</p><p><strong>SyslogFacility</strong></p><p><code>SyslogFacility</code>指定 Syslog 如何处理 sshd 的日志，默认是 Auth（<code>SyslogFacility AUTH</code>）。</p><p><strong>TCPKeepAlive</strong></p><p><code>TCPKeepAlive</code>指定打开 sshd 跟客户端 TCP 连接的 keepalive 参数（<code>TCPKeepAlive yes</code>）。</p><p><strong>UseDNS</strong></p><p><code>UseDNS</code>指定用户 SSH 登录一个域名时，服务器是否使用 DNS，确认该域名对应的 IP 地址包含本机（<code>UseDNS yes</code>）。打开该选项意义不大，而且如果 DNS 更新不及时，还有可能误判，建议关闭。</p><p><strong>UseLogin</strong></p><p><code>UseLogin</code>指定用户认证内部是否使用<code>/usr/bin/login</code>替代 SSH 工具，默认为<code>no</code>（<code>UseLogin no</code>）。</p><p><strong>UserPrivilegeSeparation</strong></p><p><code>UserPrivilegeSeparation</code>指定用户认证通过以后，使用另一个子线程处理用户权限相关的操作，这样有利于提高安全性。默认值为<code>yes</code>（<code>UsePrivilegeSeparation yes</code>）。</p><p><strong>VerboseMode</strong></p><p>SSH 2 版本专用，指定日志输出详细的 Debug 信息（<code>VerboseMode yes</code>）。</p><p><strong>X11Forwarding</strong></p><p><code>X11Forwarding</code>指定是否打开 X window 的转发，默认值为 no（<code>X11Forwarding no</code>）。</p><p>修改配置文件以后，可以使用下面的命令验证，配置文件是否有语法错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sshd -t</span><br></pre></td></tr></table></figure><p>新的配置文件生效，必须重启 sshd。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart sshd</span><br></pre></td></tr></table></figure><h2 id="sshd-的命令行配置项"><a href="#sshd-的命令行配置项" class="headerlink" title="sshd 的命令行配置项"></a>sshd 的命令行配置项</h2><p>sshd 命令有一些配置项。这些配置项在调用时指定，可以覆盖配置文件的设置。</p><p>（1）<code>-d</code></p><p><code>-d</code>参数用于显示 debug 信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sshd -d</span><br></pre></td></tr></table></figure><p>（2）<code>-D</code></p><p><code>-D</code>参数指定 sshd 不作为后台守护进程运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sshd -D</span><br></pre></td></tr></table></figure><p>（3）<code>-e</code></p><p><code>-e</code>参数将 sshd 写入系统日志 syslog 的内容导向标准错误（standard error）。</p><p>（4）<code>-f</code></p><p><code>-f</code>参数指定配置文件的位置。</p><p>（5）<code>-h</code></p><p><code>-h</code>参数用于指定密钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sshd -h /usr/local/ssh/my_rsa_key</span><br></pre></td></tr></table></figure><p>（6）<code>-o</code></p><p><code>-o</code>参数指定配置文件的一个配置项和对应的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sshd -o <span class="string">&quot;Port 2034&quot;</span></span><br></pre></td></tr></table></figure><p>配置项和对应值之间，可以使用等号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sshd -o <span class="string">&quot;Port = 2034&quot;</span></span><br></pre></td></tr></table></figure><p>如果省略等号前后的空格，也可以不使用引号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sshd -o Port=2034</span><br></pre></td></tr></table></figure><p><code>-o</code>参数可以多个一起使用，用来指定多个配置关键字。</p><p>（7）<code>-p</code></p><p><code>-p</code>参数指定 sshd 的服务端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sshd -p 2034</span><br></pre></td></tr></table></figure><p>上面命令指定 sshd 在<code>2034</code>端口启动。</p><p><code>-p</code>参数可以指定多个端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sshd -p 2222 -p 3333</span><br></pre></td></tr></table></figure><p>（8）<code>-t</code></p><p><code>-t</code>参数检查配置文件的语法是否正确。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SSH 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 密钥登录</title>
      <link href="/2017/03/02/SSH%20%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/"/>
      <url>/2017/03/02/SSH%20%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="SSH-密钥登录"><a href="#SSH-密钥登录" class="headerlink" title="SSH 密钥登录"></a>SSH 密钥登录</h1><p>SSH 默认采用密码登录，这种方法有很多缺点，简单的密码不安全，复杂的密码不容易记忆，每次手动输入也很麻烦。密钥登录是比密码登录更好的解决方案。</p><h2 id="密钥是什么"><a href="#密钥是什么" class="headerlink" title="密钥是什么"></a>密钥是什么</h2><p>密钥（key）是一个非常大的数字，通过加密算法得到。对称加密只需要一个密钥，非对称加密需要两个密钥成对使用，分为公钥（public key）和私钥（private key）。</p><p>SSH 密钥登录采用的是非对称加密，每个用户通过自己的密钥登录。其中，私钥必须私密保存，不能泄漏；公钥则是公开的，可以对外发送。它们的关系是，公钥和私钥是一一对应的，每一个私钥都有且仅有一个对应的公钥，反之亦然。</p><p>如果数据使用公钥加密，那么只有使用对应的私钥才能解密，其他密钥都不行；反过来，如果使用私钥加密（这个过程一般称为“签名”），也只有使用对应的公钥解密。</p><span id="more"></span><h2 id="密钥登录的过程"><a href="#密钥登录的过程" class="headerlink" title="密钥登录的过程"></a>密钥登录的过程</h2><p>SSH 密钥登录分为以下的步骤。</p><p>预备步骤，客户端通过<code>ssh-keygen</code>生成自己的公钥和私钥。</p><p>第一步，手动将客户端的公钥放入远程服务器的指定位置。</p><p>第二步，客户端向服务器发起 SSH 登录的请求。</p><p>第三步，服务器收到用户 SSH 登录的请求，发送一些随机数据给用户，要求用户证明自己的身份。</p><p>第四步，客户端收到服务器发来的数据，使用私钥对数据进行签名，然后再发还给服务器。</p><p>第五步，服务器收到客户端发来的加密签名后，使用对应的公钥解密，然后跟原始数据比较。如果一致，就允许用户登录。</p><h2 id="ssh-keygen命令：生成密钥"><a href="#ssh-keygen命令：生成密钥" class="headerlink" title="ssh-keygen命令：生成密钥"></a><code>ssh-keygen</code>命令：生成密钥</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>密钥登录时，首先需要生成公钥和私钥。OpenSSH 提供了一个工具程序<code>ssh-keygen</code>命令，用来生成密钥。</p><p>直接输入<code>ssh-keygen</code>，程序会询问一系列问题，然后生成密钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure><p>通常做法是使用<code>-t</code>参数，指定密钥的加密算法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t dsa</span><br></pre></td></tr></table></figure><p>上面示例中，<code>-t</code>参数用来指定密钥的加密算法，一般会选择 DSA 算法或 RSA 算法。如果省略该参数，默认使用 RSA 算法。</p><p>输入上面的命令以后，<code>ssh-keygen</code>会要求用户回答一些问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t dsa</span><br><span class="line">Generating public/private dsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/username/.ssh/id_dsa):  press ENTER</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): ********</span><br><span class="line">Enter same passphrase again: ********</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/username/.ssh/id_dsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/username/.ssh/id_dsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">14:ba:06:98:a8:98:ad:27:b5:ce:55:85:ec:64:37:19 username@shell.isp.com</span><br></pre></td></tr></table></figure><p>上面示例中，执行<code>ssh-keygen</code>命令以后，会出现第一个问题，询问密钥保存的文件名，默认是<code>~/.ssh/id_dsa</code>文件，这个是私钥的文件名，对应的公钥文件<code>~/.ssh/id_dsa.pub</code>是自动生成的。用户的密钥一般都放在主目录的<code>.ssh</code>目录里面。</p><p>如果选择<code>rsa</code>算法，生成的密钥文件默认就会是<code>~/.ssh/id_rsa</code>（私钥）和<code>~/.ssh/id_rsa.pub</code>（公钥）。</p><p>接着，就会是第二个问题，询问是否要为私钥文件设定密码保护（passphrase）。这样的话，即使入侵者拿到私钥，还是需要破解密码。如果为了方便，不想设定密码保护，可以直接按回车键，密码就会为空。后面还会让你再输入一次密码，两次输入必须一致。注意，这里“密码”的英文单词是 passphrase，这是为了避免与 Linux 账户的密码单词 password 混淆，表示这不是用户系统账户的密码。</p><p>最后，就会生成私钥和公钥，屏幕上还会给出公钥的指纹，以及当前的用户名和主机名作为注释，用来识别密钥的来源。</p><p>公钥文件和私钥文件都是文本文件，可以用文本编辑器看一下它们的内容。公钥文件的内容类似下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAvpB4lUbAaEbh9u6HLig7amsfywD4fqSZq2ikACIUBn3GyRPfeF93l/</span><br><span class="line">weQh702ofXbDydZAKMcDvBJqRhUotQUwqV6HJxqoqPDlPGUUyo8RDIkLUIPRyq</span><br><span class="line">ypZxmK9aCXokFiHoGCXfQ9imUP/w/jfqb9ByDtG97tUJF6nFMP5WzhM= username@shell.isp.com</span><br></pre></td></tr></table></figure><p>上面示例中，末尾的<code>username@shell.isp.com</code>是公钥的注释，用来识别不同的公钥，表示这是哪台主机（<code>shell.isp.com</code>）的哪个用户（<code>username</code>）的公钥，不是必需项。</p><p>注意，公钥只有一行。因为它太长了，所以上面分成三行显示。</p><p>下面的命令可以列出用户所有的公钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l ~/.ssh/id_*.pub</span><br></pre></td></tr></table></figure><p>生成密钥以后，建议修改它们的权限，防止其他人读取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> 600 ~/.ssh/id_rsa</span><br><span class="line">$ <span class="built_in">chmod</span> 600 ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p><code>ssh-keygen</code>的命令行配置项，主要有下面这些。</p><p><strong>（1）<code>-b</code></strong></p><p><code>-b</code>参数指定密钥的二进制位数。这个参数值越大，密钥就越不容易破解，但是加密解密的计算开销也会加大。</p><p>一般来说，<code>-b</code>至少应该是<code>1024</code>，更安全一些可以设为<code>2048</code>或者更高。</p><p><strong>（2）<code>-C</code></strong></p><p><code>-C</code>参数可以为密钥文件指定新的注释，格式为<code>username@host</code>。</p><p>下面命令生成一个4096位 RSA 加密算法的密钥对，并且给出了用户名和主机名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@domain.com&quot;</span></span><br></pre></td></tr></table></figure><p><strong>（3）<code>-f</code></strong></p><p><code>-f</code>参数指定生成的私钥文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t dsa -f mykey</span><br></pre></td></tr></table></figure><p>上面命令会在当前目录生成私钥文件<code>mykey</code>和公钥文件<code>mykey.pub</code>。</p><p><strong>（4）<code>-F</code></strong></p><p><code>-F</code>参数检查某个主机名是否在<code>known_hosts</code>文件里面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -F example.com</span><br></pre></td></tr></table></figure><p><strong>（5）<code>-N</code></strong></p><p><code>-N</code>参数用于指定私钥的密码（passphrase）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t dsa -N secretword</span><br></pre></td></tr></table></figure><p><strong>（6）<code>-p</code></strong></p><p><code>-p</code>参数用于重新指定私钥的密码（passphrase）。它与<code>-N</code>的不同之处在于，新密码不在命令中指定，而是执行后再输入。ssh 先要求输入旧密码，然后要求输入两遍新密码。</p><p><strong>（7）<code>-R</code></strong></p><p><code>-R</code>参数将指定的主机公钥指纹移出<code>known_hosts</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -R example.com</span><br></pre></td></tr></table></figure><p><strong>（8）<code>-t</code></strong></p><p><code>-t</code>参数用于指定生成密钥的加密算法，一般为<code>dsa</code>或<code>rsa</code></p><h2 id="手动上传公钥"><a href="#手动上传公钥" class="headerlink" title="手动上传公钥"></a>手动上传公钥</h2><p>生成密钥以后，公钥必须上传到服务器，才能使用公钥登录。</p><p>OpenSSH 规定，用户公钥保存在服务器的<code>~/.ssh/authorized_keys</code>文件。你要以哪个用户的身份登录到服务器，密钥就必须保存在该用户主目录的<code>~/.ssh/authorized_keys</code>文件。只要把公钥添加到这个文件之中，就相当于公钥上传到服务器了。每个公钥占据一行。如果该文件不存在，可以手动创建。</p><p>用户可以手动编辑该文件，把公钥粘贴进去，也可以在本机计算机上，执行下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ~/.ssh/id_rsa.pub | ssh user@host <span class="string">&quot;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&quot;</span></span><br></pre></td></tr></table></figure><p>上面示例中，<code>user@host</code>要替换成你所要登录的用户名和主机名。</p><p>注意，<code>authorized_keys</code>文件的权限要设为<code>644</code>，即只有文件所有者才能写。如果权限设置不对，SSH 服务器可能会拒绝读取该文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> 644 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>只要公钥上传到服务器，下次登录时，OpenSSH 就会自动采用密钥登录，不再提示输入密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -l username shell.isp.com</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;/home/you/.ssh/id_dsa&#x27;</span>: ************</span><br><span class="line">Last login: Mon Mar 24 02:17:27 2014 from ex.ample.com</span><br><span class="line">shell.isp.com&gt;</span><br></pre></td></tr></table></figure><p>上面例子中，SSH 客户端使用私钥之前，会要求用户输入密码（passphrase），用来解开私钥。</p><h2 id="ssh-copy-id-命令：自动上传公钥"><a href="#ssh-copy-id-命令：自动上传公钥" class="headerlink" title="ssh-copy-id 命令：自动上传公钥"></a>ssh-copy-id 命令：自动上传公钥</h2><p>OpenSSH 自带一个<code>ssh-copy-id</code>命令，可以自动将公钥拷贝到远程服务器的<code>~/.ssh/authorized_keys</code>文件。如果<code>~/.ssh/authorized_keys</code>文件不存在，<code>ssh-copy-id</code>命令会自动创建该文件。</p><p>用户在本地计算机执行下面的命令，就可以把本地的公钥拷贝到服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id -i key_file user@host</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-i</code>参数用来指定公钥文件，<code>user</code>是所要登录的账户名，<code>host</code>是服务器地址。如果省略用户名，默认为当前的本机用户名。执行完该命令，公钥就会拷贝到服务器。</p><p>注意，公钥文件可以不指定路径和<code>.pub</code>后缀名，<code>ssh-copy-id</code>会自动在<code>~/.ssh</code>目录里面寻找。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id -i id_rsa user@host</span><br></pre></td></tr></table></figure><p>上面命令中，公钥文件会自动匹配到<code>~/.ssh/id_rsa.pub</code>。</p><p><code>ssh-copy-id</code>会采用密码登录，系统会提示输入远程服务器的密码。</p><p>注意，<code>ssh-copy-id</code>是直接将公钥添加到<code>authorized_keys</code>文件的末尾。如果<code>authorized_keys</code>文件的末尾不是一个换行符，会导致新的公钥添加到前一个公钥的末尾，两个公钥连在一起，使得它们都无法生效。所以，如果<code>authorized_keys</code>文件已经存在，使用<code>ssh-copy-id</code>命令之前，务必保证<code>authorized_keys</code>文件的末尾是换行符（假设该文件已经存在）。</p><h2 id="ssh-agent-命令，ssh-add-命令"><a href="#ssh-agent-命令，ssh-add-命令" class="headerlink" title="ssh-agent 命令，ssh-add 命令"></a>ssh-agent 命令，ssh-add 命令</h2><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><p>私钥设置了密码以后，每次使用都必须输入密码，有时让人感觉非常麻烦。比如，连续使用<code>scp</code>命令远程拷贝文件时，每次都要求输入密码。</p><p><code>ssh-agent</code>命令就是为了解决这个问题而设计的，它让用户在整个 Bash 对话（session）之中，只在第一次使用 SSH 命令时输入密码，然后将私钥保存在内存中，后面都不需要再输入私钥的密码了。</p><p>第一步，使用下面的命令新建一次命令行对话。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-agent bash</span><br></pre></td></tr></table></figure><p>上面命令中，如果你使用的命令行环境不是 Bash，可以用其他的 Shell 命令代替。比如<code>zsh</code>和<code>fish</code>。</p><p>如果想在当前对话启用<code>ssh-agent</code>，可以使用下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> `ssh-agent`</span><br></pre></td></tr></table></figure><p>上面命令中，<code>ssh-agent</code>会先自动在后台运行，并将需要设置的环境变量输出在屏幕上，类似下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-agent</span><br><span class="line">SSH_AUTH_SOCK=/tmp/ssh-barrett/ssh-22841-agent; <span class="built_in">export</span> SSH_AUTH_SOCK;</span><br><span class="line">SSH_AGENT_PID=22842; <span class="built_in">export</span> SSH_AGENT_PID;</span><br><span class="line"><span class="built_in">echo</span> Agent pid 22842;</span><br></pre></td></tr></table></figure><p><code>eval</code>命令的作用，就是运行上面的<code>ssh-agent</code>命令的输出，设置环境变量。</p><p>第二步，在新建的 Shell 对话里面，使用<code>ssh-add</code>命令添加默认的私钥（比如<code>~/.ssh/id_rsa</code>，或<code>~/.ssh/id_dsa</code>，或<code>~/.ssh/id_ecdsa</code>，或<code>~/.ssh/id_ed25519</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add</span><br><span class="line">Enter passphrase <span class="keyword">for</span> /home/you/.ssh/id_dsa: ********</span><br><span class="line">Identity added: /home/you/.ssh/id_dsa (/home/you/.ssh/id_dsa)</span><br></pre></td></tr></table></figure><p>上面例子中，添加私钥时，会要求输入密码。以后，在这个对话里面再使用密钥时，就不需要输入私钥的密码了，因为私钥已经加载到内存里面了。</p><p>如果添加的不是默认私钥，<code>ssh-add</code>命令需要显式指定私钥文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add my-other-key-file</span><br></pre></td></tr></table></figure><p>上面的命令中，<code>my-other-key-file</code>就是用户指定的私钥文件。</p><p>第三步，使用 ssh 命令正常登录远程服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh remoteHost</span><br></pre></td></tr></table></figure><p>上面命令中，<code>remoteHost</code>是远程服务器的地址，ssh 使用的是默认的私钥。这时如果私钥设有密码，ssh 将不再询问密码，而是直接取出内存里面的私钥。</p><p>如果要使用其他私钥登录服务器，需要使用 ssh 命令的<code>-i</code>参数指定私钥文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh –i OpenSSHPrivateKey remoteHost</span><br></pre></td></tr></table></figure><p>最后，如果要退出<code>ssh-agent</code>，可以直接退出子 Shell（按下 Ctrl + d），也可以使用下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-agent -k</span><br></pre></td></tr></table></figure><h3 id="ssh-add命令"><a href="#ssh-add命令" class="headerlink" title="ssh-add命令"></a><code>ssh-add</code>命令</h3><p><code>ssh-add</code>命令用来将私钥加入<code>ssh-agent</code>，它有如下的参数。</p><p><strong>（1）<code>-d</code></strong></p><p><code>-d</code>参数从内存中删除指定的私钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -d name-of-key-file</span><br></pre></td></tr></table></figure><p><strong>（2）<code>-D</code></strong></p><p><code>-D</code>参数从内存中删除所有已经添加的私钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -D</span><br></pre></td></tr></table></figure><p><strong>（3）<code>-l</code></strong></p><p><code>-l</code>参数列出所有已经添加的私钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -l</span><br></pre></td></tr></table></figure><h2 id="关闭密码登录"><a href="#关闭密码登录" class="headerlink" title="关闭密码登录"></a>关闭密码登录</h2><p>为了安全性，启用密钥登录之后，最好关闭服务器的密码登录。</p><p>对于 OpenSSH，具体方法就是打开服务器 sshd 的配置文件<code>/etc/ssh/sshd_config</code>，将<code>PasswordAuthentication</code>这一项设为<code>no</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure><p>修改配置文件以后，不要忘了重新启动 sshd，否则不会生效。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SSH 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 客户端</title>
      <link href="/2017/02/19/SSH%20%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2017/02/19/SSH%20%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>OpenSSH 的客户端是二进制程序 ssh。它在 Linux&#x2F;Unix 系统的位置是<code>/usr/local/bin/ssh</code>，Windows 系统的位置是<code>\Program Files\OpenSSH\bin\ssh.exe</code>。</p><p>Linux 系统一般都自带 ssh，如果没有就需要安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 和 Debian</span></span><br><span class="line">$ sudo apt install openssh-client</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS 和 Fedora</span></span><br><span class="line">$ sudo dnf install openssh-clients</span><br></pre></td></tr></table></figure><p>安装以后，可以使用<code>-V</code>参数输出版本号，查看一下是否安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -V</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>ssh 最常见的用途就是登录服务器，这要求服务器安装并正在运行 SSH 服务器软件。</p><p>ssh 登录服务器的命令如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh hostname</span><br></pre></td></tr></table></figure><p>上面命令中，<code>hostname</code>是主机名，它可以是域名，也可能是 IP 地址或局域网内部的主机名。不指定用户名的情况下，将使用客户端的当前用户名，作为远程服务器的登录用户名。如果要指定用户名，可以采用下面的语法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@hostname</span><br></pre></td></tr></table></figure><p>上面的命令中，用户名和主机名写在一起了，之间使用<code>@</code>分隔。</p><p>用户名也可以使用<code>ssh</code>的<code>-l</code>参数指定，这样的话，用户名和主机名就不用写在一起了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -l username host</span><br></pre></td></tr></table></figure><p>ssh 默认连接服务器的22端口，<code>-p</code>参数可以指定其他端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p 8821 foo.com</span><br></pre></td></tr></table></figure><p>上面命令连接服务器<code>foo.com</code>的8821端口。</p><h2 id="连接流程"><a href="#连接流程" class="headerlink" title="连接流程"></a>连接流程</h2><p>ssh 连接远程服务器后，首先有一个验证过程，验证远程服务器是否为陌生地址。</p><p>如果是第一次连接某一台服务器，命令行会显示一段文字，表示不认识这台机器，提醒用户确认是否需要连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">&#x27;foo.com (192.168.121.111)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:Vybt22mVXuNuB5unE++yowF7lgA/9/2bLSiO3qmYWBY.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure><p>上面这段文字告诉用户，<code>foo.com</code>这台服务器的指纹是陌生的，让用户选择是否要继续连接（输入 yes 或 no）。</p><p>所谓“服务器指纹”，指的是 SSH 服务器公钥的哈希值。每台 SSH 服务器都有唯一一对密钥，用于跟客户端通信，其中公钥的哈希值就可以用来识别服务器。</p><p>下面的命令可以查看某个公钥的指纹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub</span><br><span class="line">256 da:24:43:0b:2e:c1:3f:a1:84:13:92:01:52:b4:84:ff   (ECDSA)</span><br></pre></td></tr></table></figure><p>上面的例子中，<code>ssh-keygen -l -f</code>命令会输出公钥<code>/etc/ssh/ssh_host_ecdsa_key.pub</code>的指纹。</p><p>ssh 会将本机连接过的所有服务器公钥的指纹，都储存在本机的<code>~/.ssh/known_hosts</code>文件中。每次连接服务器时，通过该文件判断是否为陌生主机（陌生公钥）。</p><p>在上面这段文字后面，输入<code>yes</code>，就可以将当前服务器的指纹也储存在本机<code>~/.ssh/known_hosts</code>文件中，并显示下面的提示。以后再连接的时候，就不会再出现警告了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added <span class="string">&#x27;foo.com (192.168.121.111)&#x27;</span> (RSA) to the list of known hosts</span><br></pre></td></tr></table></figure><p>然后，客户端就会跟服务器建立连接。接着，ssh 就会要求用户输入所要登录账户的密码。用户输入并验证密码正确以后，就能登录远程服务器的 Shell 了。</p><h2 id="服务器密钥变更"><a href="#服务器密钥变更" class="headerlink" title="服务器密钥变更"></a>服务器密钥变更</h2><p>服务器指纹可以防止有人恶意冒充远程主机。如果服务器的密钥发生变更（比如重装了 SSH 服务器），客户端再次连接时，就会发生公钥指纹不吻合的情况。这时，客户端就会中断连接，并显示一段警告信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that the RSA host key has just been changed.</span><br><span class="line">The fingerprint <span class="keyword">for</span> the RSA key sent by the remote host is</span><br><span class="line">77:a5:69:81:9b:eb:40:76:7b:13:04:a9:6c:f4:9c:5d.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key <span class="keyword">in</span> /home/me/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending key <span class="keyword">in</span> /home/me/.ssh/known_hosts:36</span><br></pre></td></tr></table></figure><p>上面这段文字的意思是，该主机的公钥指纹跟<code>~/.ssh/known_hosts</code>文件储存的不一样，必须处理以后才能连接。这时，你需要确认是什么原因，使得公钥指纹发生变更，到底是恶意劫持，还是管理员变更了 SSH 服务器公钥。</p><p>如果新的公钥确认可以信任，需要继续执行连接，你可以执行下面的命令，将原来的公钥指纹从<code>~/.ssh/known_hosts</code>文件删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -R hostname</span><br></pre></td></tr></table></figure><p>上面命令中，<code>hostname</code>是发生公钥变更的主机名。</p><p>除了使用上面的命令，你也可以手工修改<code>known_hosts</code>文件，将公钥指纹删除。</p><p>删除了原来的公钥指纹以后，重新执行 ssh 命令连接远程服务器，将新的指纹加入<code>known_hosts</code>文件，就可以顺利连接了。</p><h2 id="执行远程命令"><a href="#执行远程命令" class="headerlink" title="执行远程命令"></a>执行远程命令</h2><p>SSH 登录成功后，用户就进入了远程主机的命令行环境，所看到的提示符，就是远程主机的提示符。这时，你就可以输入想要在远程主机执行的命令。</p><p>另一种执行远程命令的方法，是将命令直接写在<code>ssh</code>命令的后面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh username@hostname <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>上面的命令会使得 SSH 在登录成功后，立刻在远程主机上执行命令<code>command</code>。</p><p>下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh foo@server.example.com <span class="built_in">cat</span> /etc/hosts</span><br></pre></td></tr></table></figure><p>上面的命令会在登录成功后，立即远程执行命令<code>cat /etc/hosts</code>。</p><p>采用这种语法执行命令时，ssh 客户端不会提供互动式的 Shell 环境，而是直接将远程命令的执行结果输出在命令行。但是，有些命令需要互动式的 Shell 环境，这时就要使用<code>-t</code>参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错</span></span><br><span class="line">$ ssh remote.server.com emacs</span><br><span class="line">emacs: standard input is not a <span class="built_in">tty</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不报错</span></span><br><span class="line">$ ssh -t server.example.com emacs</span><br></pre></td></tr></table></figure><p>上面代码中，<code>emacs</code>命令需要一个互动式 Shell，所以报错。只有加上<code>-t</code>参数，ssh 才会分配一个互动式 Shell。</p><h2 id="加密参数"><a href="#加密参数" class="headerlink" title="加密参数"></a>加密参数</h2><p>SSH 连接的握手阶段，客户端必须跟服务端约定加密参数集（cipher suite）。</p><p>加密参数集包含了若干不同的加密参数，它们之间使用下划线连接在一起，下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TLS_RSA_WITH_AES_128_CBC_SHA</span><br></pre></td></tr></table></figure><p>它的含义如下。</p><ul><li>TLS：加密通信协议</li><li>RSA：密钥交换算法</li><li>AES：加密算法</li><li>128：加密算法的强度</li><li>CBC：加密算法的模式</li><li>SHA：数字签名的 Hash 函数</li></ul><p>下面是一个例子，客户端向服务器发出的握手信息。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Handshake protocol: ClientHello</span><br><span class="line">    Version: TLS 1.2</span><br><span class="line">    Random</span><br><span class="line">        Client time: May 22, 2030 02:43:46 GMT</span><br><span class="line">        Random bytes: b76b0e61829557eb4c611adfd2d36eb232dc1332fe29802e321ee871</span><br><span class="line">    Session ID: (empty)</span><br><span class="line">    Cipher Suites</span><br><span class="line">        Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256”</span><br><span class="line">        Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</span><br><span class="line">        Suite: TLS_RSA_WITH_AES_128_GCM_SHA256</span><br><span class="line">        Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</span><br><span class="line">        Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA</span><br><span class="line">        Suite: TLS_RSA_WITH_AES_128_CBC_SHA</span><br><span class="line">        Suite: TLS_RSA_WITH_3DES_EDE_CBC_SHA</span><br><span class="line">        Suite: TLS_RSA_WITH_RC4_128_SHA</span><br><span class="line">    Compression methods</span><br><span class="line">        Method: null</span><br><span class="line">    Extensions</span><br><span class="line">        Extension: server_name</span><br><span class="line">            Hostname: www.feistyduck.com</span><br><span class="line">        Extension: renegotiation_info</span><br><span class="line">        Extension: elliptic_curves</span><br><span class="line">            Named curve: secp256r1</span><br><span class="line">            Named curve: secp384r1</span><br><span class="line">        Extension: signature_algorithms</span><br><span class="line">            Algorithm: sha1/rsa</span><br><span class="line">            Algorithm: sha256/rsa</span><br><span class="line">            Algorithm: sha1/ecdsa</span><br><span class="line">            Algorithm: sha256/ecdsa”</span><br></pre></td></tr></table></figure><p>上面的握手信息（ClientHello）之中，<code>Cipher Suites</code>字段就是客户端列出可选的加密参数集，服务器在其中选择一个自己支持的参数集。</p><p>服务器选择完毕之后，向客户端发出回应。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Handshake protocol: ServerHello</span><br><span class="line">    Version: TLS 1.2</span><br><span class="line">    Random</span><br><span class="line">        Server time: Mar 10, 2059 02:35:57 GMT”</span><br><span class="line">        Random bytes: 8469b09b480c1978182ce1b59290487609f41132312ca22aacaf5012</span><br><span class="line">    Session ID: 4cae75c91cf5adf55f93c9fb5dd36d19903b1182029af3d527b7a42ef1c32c80</span><br><span class="line">    Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</span><br><span class="line">    Compression method: null</span><br><span class="line">    Extensions</span><br><span class="line">        Extension: server_name</span><br><span class="line">        Extension: renegotiation_info”</span><br></pre></td></tr></table></figure><p>上面的回应信息（ServerHello）中，<code>Cipher Suite</code>字段就是服务器最终选定的加密参数。</p><h2 id="ssh-命令行配置项"><a href="#ssh-命令行配置项" class="headerlink" title="ssh 命令行配置项"></a>ssh 命令行配置项</h2><p>ssh 命令有很多配置项，修改它的默认行为。</p><p><strong>-c</strong></p><p><code>-c</code>参数指定加密算法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -c blowfish,3des server.example.com</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ ssh -c blowfish -c 3des server.example.com</span><br></pre></td></tr></table></figure><p>上面命令指定使用加密算法<code>blowfish</code>或<code>3des</code>。</p><p><strong>-C</strong></p><p><code>-C</code>参数表示压缩数据传输。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -C server.example.com</span><br></pre></td></tr></table></figure><p><strong>-D</strong></p><p><code>-D</code>参数指定本机的 Socks 监听端口，该端口收到的请求，都将转发到远程的 SSH 主机，又称动态端口转发，详见《端口转发》一章。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -D 1080 server</span><br></pre></td></tr></table></figure><p>上面命令将本机 1080 端口收到的请求，都转发到服务器<code>server</code>。</p><p><strong>-f</strong></p><p><code>-f</code>参数表示 SSH 连接在后台运行。</p><p><strong>-F</strong></p><p><code>-F</code>参数指定配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -F /usr/local/ssh/other_config</span><br></pre></td></tr></table></figure><p>上面命令指定使用配置文件<code>other_config</code>。</p><p><strong>-i</strong></p><p><code>-i</code>参数用于指定私钥，意为“identity_file”，默认值为<code>~/.ssh/id_dsa</code>（DSA 算法）和<code>~/.ssh/id_rsa</code>（RSA 算法）。注意，对应的公钥必须存放到服务器，详见《密钥登录》一章。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i my-key server.example.com</span><br></pre></td></tr></table></figure><p><strong>-l</strong></p><p><code>-l</code>参数指定远程登录的账户名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -l sally server.example.com</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">$ ssh sally@server.example.com</span><br></pre></td></tr></table></figure><p><strong>-L</strong></p><p><code>-L</code>参数设置本地端口转发，详见《端口转发》一章。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh  -L 9999:targetServer:80 user@remoteserver</span><br></pre></td></tr></table></figure><p>上面命令中，所有发向本地<code>9999</code>端口的请求，都会经过<code>remoteserver</code>发往 targetServer 的 80 端口，这就相当于直接连上了 targetServer 的 80 端口。</p><p><strong>-m</strong></p><p><code>-m</code>参数指定校验数据完整性的算法（message authentication code，简称 MAC）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -m hmac-sha1,hmac-md5 server.example.com</span><br></pre></td></tr></table></figure><p>上面命令指定数据校验算法为<code>hmac-sha1</code>或<code>hmac-md5</code>。</p><p><strong>-N</strong></p><p><code>-N</code>参数用于端口转发，表示建立的 SSH 只用于端口转发，不能执行远程命令，这样可以提供安全性，详见《端口转发》一章。</p><p><strong>-o</strong></p><p><code>-o</code>参数用来指定一个配置命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -o <span class="string">&quot;Keyword Value&quot;</span></span><br></pre></td></tr></table></figure><p>举例来说，配置文件里面有如下内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User sally</span><br><span class="line">Port 220</span><br></pre></td></tr></table></figure><p>通过<code>-o</code>参数，可以把上面两个配置命令从命令行传入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -o <span class="string">&quot;User sally&quot;</span> -o <span class="string">&quot;Port 220&quot;</span> server.example.com</span><br></pre></td></tr></table></figure><p>使用等号时，配置命令可以不用写在引号里面，但是等号前后不能有空格。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -o User=sally -o Port=220 server.example.com</span><br></pre></td></tr></table></figure><p><strong>-p</strong></p><p><code>-p</code>参数指定 SSH 客户端连接的服务器端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p 2035 server.example.com</span><br></pre></td></tr></table></figure><p>上面命令连接服务器的2035端口。</p><p><strong>-q</strong></p><p><code>-q</code>参数表示安静模式（quiet），不向用户输出任何警告信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh –q foo.com</span><br><span class="line">root’s password:</span><br></pre></td></tr></table></figure><p>上面命令使用<code>-q</code>参数，只输出要求用户输入密码的提示。</p><p><strong>-R</strong></p><p><code>-R</code>参数指定远程端口转发，详见《端口转发》一章。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -R 9999:targetServer:902 <span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>上面命令需在跳板服务器执行，指定本地计算机<code>local</code>监听自己的 9999 端口，所有发向这个端口的请求，都会转向 targetServer 的 902 端口。</p><p><strong>-t</strong></p><p><code>-t</code>参数在 ssh 直接运行远端命令时，提供一个互动式 Shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -t server.example.com emacs</span><br></pre></td></tr></table></figure><p><strong>-v</strong></p><p><code>-v</code>参数显示详细信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -v server.example.com</span><br></pre></td></tr></table></figure><p><code>-v</code>可以重复多次，表示信息的详细程度，比如<code>-vv</code>和<code>-vvv</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -vvv server.example.com</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ ssh -v -v -v server.example.com</span><br></pre></td></tr></table></figure><p>上面命令会输出最详细的连接信息。</p><p><strong>-V</strong></p><p><code>-V</code>参数输出 ssh 客户端的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh –V</span><br><span class="line">ssh: SSH Secure Shell 3.2.3 (non-commercial version) on i686-pc-linux-gnu</span><br></pre></td></tr></table></figure><p>上面命令输出本机 ssh 客户端版本是<code>SSH Secure Shell 3.2.3</code>。</p><p><strong>-X</strong></p><p><code>-X</code>参数表示打开 X 窗口转发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -X server.example.com</span><br></pre></td></tr></table></figure><p><strong>-1，-2</strong></p><p><code>-1</code>参数指定使用 SSH 1 协议。</p><p><code>-2</code>参数指定使用 SSH 2 协议。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -2 server.example.com</span><br></pre></td></tr></table></figure><p><strong>-4，-6</strong></p><p><code>-4</code>指定使用 IPv4 协议，这是默认值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -4 server.example.com</span><br></pre></td></tr></table></figure><p><code>-6</code>指定使用 IPv6 协议。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -6 server.example.com</span><br></pre></td></tr></table></figure><h2 id="客户端配置文件"><a href="#客户端配置文件" class="headerlink" title="客户端配置文件"></a>客户端配置文件</h2><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p>SSH 客户端的全局配置文件是<code>/etc/ssh/ssh_config</code>，用户个人的配置文件在<code>~/.ssh/config</code>，优先级高于全局配置文件。</p><p>除了配置文件，<code>~/.ssh</code>目录还有一些用户个人的密钥文件和其他文件。下面是其中一些常见的文件。</p><ul><li><code>~/.ssh/id_ecdsa</code>：用户的 ECDSA 私钥。</li><li><code>~/.ssh/id_ecdsa.pub</code>：用户的 ECDSA 公钥。</li><li><code>~/.ssh/id_rsa</code>：用于 SSH 协议版本2 的 RSA 私钥。</li><li><code>~/.ssh/id_rsa.pub</code>：用于SSH 协议版本2 的 RSA 公钥。</li><li><code>~/.ssh/identity</code>：用于 SSH 协议版本1 的 RSA 私钥。</li><li><code>~/.ssh/identity.pub</code>：用于 SSH 协议版本1 的 RSA 公钥。</li><li><code>~/.ssh/known_hosts</code>：包含 SSH 服务器的公钥指纹。</li></ul><h3 id="主机设置"><a href="#主机设置" class="headerlink" title="主机设置"></a>主机设置</h3><p>用户个人的配置文件<code>~/.ssh/config</code>，可以按照不同服务器，列出各自的连接参数，从而不必每一次登录都输入重复的参数。下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">     Port 2222</span><br><span class="line"></span><br><span class="line">Host remoteserver</span><br><span class="line">     HostName remote.example.com</span><br><span class="line">     User neo</span><br><span class="line">     Port 2112</span><br></pre></td></tr></table></figure><p>上面代码中，<code>Host *</code>表示对所有主机生效，后面的<code>Port 2222</code>表示所有主机的默认连接端口都是2222，这样就不用在登录时特别指定端口了。这里的缩进并不是必需的，只是为了视觉上，易于识别针对不同主机的设置。</p><p>后面的<code>Host remoteserver</code>表示，下面的设置只对主机<code>remoteserver</code>生效。<code>remoteserver</code>只是一个别名，具体的主机由<code>HostName</code>命令指定，<code>User</code>和<code>Port</code>这两项分别表示用户名和端口。这里的<code>Port</code>会覆盖上面<code>Host *</code>部分的<code>Port</code>设置。</p><p>以后，登录<code>remote.example.com</code>时，只要执行<code>ssh remoteserver</code>命令，就会自动套用 config 文件里面指定的参数。<br>单个主机的配置格式如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh remoteserver</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">$ ssh -p 2112 neo@remote.example.com</span><br></pre></td></tr></table></figure><p><code>Host</code>命令的值可以使用通配符，比如<code>Host *</code>表示对所有主机都有效的设置，<code>Host *.edu</code>表示只对一级域名为<code>.edu</code>的主机有效的设置。它们的设置都可以被单个主机的设置覆盖。</p><h3 id="配置命令的语法"><a href="#配置命令的语法" class="headerlink" title="配置命令的语法"></a>配置命令的语法</h3><p>ssh 客户端配置文件的每一行，就是一个配置命令。配置命令与对应的值之间，可以使用空格，也可以使用等号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Compression <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">Compression = <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p><code>#</code>开头的行表示注释，会被忽略。空行等同于注释。</p><h3 id="主要配置命令"><a href="#主要配置命令" class="headerlink" title="主要配置命令"></a>主要配置命令</h3><p>下面是 ssh 客户端的一些主要配置命令，以及它们的范例值。</p><ul><li><code>AddressFamily inet</code>：表示只使用 IPv4 协议。如果设为<code>inet6</code>，表示只使用 IPv6 协议。</li><li><code>BindAddress 192.168.10.235</code>：指定本机的 IP 地址（如果本机有多个 IP 地址）。</li><li><code>CheckHostIP yes</code>：检查 SSH 服务器的 IP 地址是否跟公钥数据库吻合。</li><li><code>Ciphers blowfish,3des</code>：指定加密算法。</li><li><code>Compression yes</code>：是否压缩传输信号。</li><li><code>ConnectionAttempts 10</code>：客户端进行连接时，最大的尝试次数。</li><li><code>ConnectTimeout 60</code>：客户端进行连接时，服务器在指定秒数内没有回复，则中断连接尝试。</li><li><code>DynamicForward 1080</code>：指定动态转发端口。</li><li><code>GlobalKnownHostsFile /users/smith/.ssh/my_global_hosts_file</code>：指定全局的公钥数据库文件的位置。</li><li><code>Host server.example.com</code>：指定连接的域名或 IP 地址，也可以是别名，支持通配符。<code>Host</code>命令后面的所有配置，都是针对该主机的，直到下一个<code>Host</code>命令为止。</li><li><code>HostKeyAlgorithms ssh-dss,ssh-rsa</code>：指定密钥算法，优先级从高到低排列。</li><li><code>HostName myserver.example.com</code>：在<code>Host</code>命令使用别名的情况下，<code>HostName</code>指定域名或 IP 地址。</li><li><code>IdentityFile keyfile</code>：指定私钥文件。</li><li><code>LocalForward 2001 localhost:143</code>：指定本地端口转发。</li><li><code>LogLevel QUIET</code>：指定日志详细程度。如果设为<code>QUIET</code>，将不输出大部分的警告和提示。</li><li><code>MACs hmac-sha1,hmac-md5</code>：指定数据校验算法。</li><li><code>NumberOfPasswordPrompts 2</code>：密码登录时，用户输错密码的最大尝试次数。</li><li><code>PasswordAuthentication no</code>：指定是否支持密码登录。不过，这里只是客户端禁止，真正的禁止需要在 SSH 服务器设置。</li><li><code>Port 2035</code>：指定客户端连接的 SSH 服务器端口。</li><li><code>PreferredAuthentications publickey,hostbased,password</code>：指定各种登录方法的优先级。</li><li><code>Protocol 2</code>：支持的 SSH 协议版本，多个版本之间使用逗号分隔。</li><li><code>PubKeyAuthentication yes</code>：是否支持密钥登录。这里只是客户端设置，还需要在 SSH 服务器进行相应设置。</li><li><code>RemoteForward 2001 server:143</code>：指定远程端口转发。</li><li><code>SendEnv COLOR</code>：SSH 客户端向服务器发送的环境变量名，多个环境变量之间使用空格分隔。环境变量的值从客户端当前环境中拷贝。</li><li><code>ServerAliveCountMax 3</code>：如果没有收到服务器的回应，客户端连续发送多少次<code>keepalive</code>信号，才断开连接。该项默认值为3。</li><li><code>ServerAliveInterval 300</code>：客户端建立连接后，如果在给定秒数内，没有收到服务器发来的消息，客户端向服务器发送<code>keepalive</code>消息。如果不希望客户端发送，这一项设为<code>0</code>。</li><li><code>StrictHostKeyChecking yes</code>：<code>yes</code>表示严格检查，服务器公钥为未知或发生变化，则拒绝连接。<code>no</code>表示如果服务器公钥未知，则加入客户端公钥数据库，如果公钥发生变化，不改变客户端公钥数据库，输出一条警告，依然允许连接继续进行。<code>ask</code>（默认值）表示询问用户是否继续进行。</li><li><code>TCPKeepAlive yes</code>：客户端是否定期向服务器发送<code>keepalive</code>信息。</li><li><code>User userName</code>：指定远程登录的账户名。</li><li><code>UserKnownHostsFile /users/smith/.ssh/my_local_hosts_file</code>：指定当前用户的<code>known_hosts</code>文件（服务器公钥指纹列表）的位置。</li><li><code>VerifyHostKeyDNS yes</code>：是否通过检查 SSH 服务器的 DNS 记录，确认公钥指纹是否与<code>known_hosts</code>文件保存的一致。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SSH 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 基本知识</title>
      <link href="/2017/02/16/SSH%20%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
      <url>/2017/02/16/SSH%20%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>SSH（Secure Shell 的缩写）是一种网络协议，用于加密两台计算机之间的通信，并且支持各种身份验证机制。</p><p>实务中，它主要用于保证远程登录和远程通信的安全，任何网络服务都可以用这个协议来加密。</p><h2 id="SSH-是什么"><a href="#SSH-是什么" class="headerlink" title="SSH 是什么"></a>SSH 是什么</h2><p>历史上，网络主机之间的通信是不加密的，属于明文通信。这使得通信很不安全，一个典型的例子就是服务器登录。登录远程服务器的时候，需要将用户输入的密码传给服务器，如果这个过程是明文通信，就意味着传递过程中，线路经过的中间计算机都能看到密码，这是很可怕的。</p><p>SSH 就是为了解决这个问题而诞生的，它能够加密计算机之间的通信，保证不被窃听或篡改。它还能对操作者进行认证（authentication）和授权（authorization）。明文的网络协议可以套用在它里面，从而实现加密。</p><span id="more"></span><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>1995年，芬兰赫尔辛基工业大学的研究员 Tatu Ylönen 设计了 SSH 协议的第一个版本（现称为 SSH 1），同时写出了第一个实现（称为 SSH1）。</p><p>当时，他所在的大学网络一直发生密码嗅探攻击，他不得不为服务器设计一个更安全的登录方式。写完以后，他就把这个工具公开了，允许其他人免费使用。</p><p>SSH 可以替换 rlogin、TELNET、FTP 和 rsh 这些不安全的协议，所以大受欢迎，用户快速增长，1995年底已经发展到五十个国家的20,000个用户。SSH 1 协议也变成 IETF 的标准文档。</p><p>1995年12月，由于客服需求越来越大，Tatu Ylönen 就成立了一家公司 SCS，专门销售和开发 SSH。这个软件的后续版本，逐渐从免费软件变成了专有的商业软件。</p><p>SSH 1 协议存在一些安全漏洞，所以1996年又提出了 SSH 2 协议（或者称为 SSH 2.0）。这个协议与1.0版不兼容，在1997年进行了标准化，1998年推出了软件实现 SSH2。但是，官方的 SSH2 软件是一个专有软件，不能免费使用，而且 SSH1 的有些功能也没有提供。</p><p>1999年，OpenBSD 的开发人员决定写一个 SSH 2 协议的开源实现，这就是 OpenSSH 项目。该项目最初是基于 SSH 1.2.12 版本，那是当时 SSH1 最后一个开源版本。但是，OpenSSH 很快就完全摆脱了原始的官方代码，在许多开发者的参与下，按照自己的路线发展。OpenSSH 随 OpenBSD 2.6 版本一起提供，以后又移植到其他操作系统，成为最流行的 SSH 实现。目前，Linux 的所有发行版几乎都自带 OpenSSH。</p><p>现在，SSH-2 有多种实现，既有免费的，也有收费的。本书的内容主要是针对 OpenSSH。</p><h2 id="SSH-架构"><a href="#SSH-架构" class="headerlink" title="SSH 架构"></a>SSH 架构</h2><p>SSH 的软件架构是服务器-客户端模式（Server - Client）。在这个架构中，SSH 软件分成两个部分：向服务器发出请求的部分，称为客户端（client），OpenSSH 的实现为 ssh；接收客户端发出的请求的部分，称为服务器（server），OpenSSH 的实现为 sshd。</p><p>本教程约定，大写的 SSH 表示协议，小写的 ssh 表示客户端软件。</p><p>另外，OpenSSH 还提供一些辅助工具软件（比如 ssh-keygen 、ssh-agent）和专门的客户端工具（比如 scp 和 sftp），这个教程也会予以介绍。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SSH 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令提示符</title>
      <link href="/2017/01/01/%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6/"/>
      <url>/2017/01/01/%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>用户进入 Bash 以后，Bash 会显示一个命令提示符，用来提示用户在该位置后面输入命令。</p><h2 id="环境变量-PS1"><a href="#环境变量-PS1" class="headerlink" title="环境变量 PS1"></a>环境变量 PS1</h2><p>命令提示符通常是美元符号<code>$</code>，对于根用户则是井号<code>#</code>。这个符号是环境变量<code>PS1</code>决定的，执行下面的命令，可以看到当前命令提示符的定义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$PS1</span></span><br></pre></td></tr></table></figure><p>Bash 允许用户自定义命令提示符，只要改写这个变量即可。改写后的<code>PS1</code>，可以放在用户的 Bash 配置文件<code>.bashrc</code>里面，以后新建 Bash 对话时，新的提示符就会生效。要在当前窗口看到修改后的提示符，可以执行下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>命令提示符的定义，可以包含特殊的转义字符，表示特定内容。</p><ul><li><code>\a</code>：响铃，计算机发出一记声音。</li><li><code>\d</code>：以星期、月、日格式表示当前日期，例如“Mon May 26”。</li><li><code>\h</code>：本机的主机名。</li><li><code>\H</code>：完整的主机名。</li><li><code>\j</code>：运行在当前 Shell 会话的工作数。</li><li><code>\l</code>：当前终端设备名。</li><li><code>\n</code>：一个换行符。</li><li><code>\r</code>：一个回车符。</li><li><code>\s</code>：Shell 的名称。</li><li><code>\t</code>：24小时制的<code>hours:minutes:seconds</code>格式表示当前时间。</li><li><code>\T</code>：12小时制的当前时间。</li><li><code>\@</code>：12小时制的<code>AM/PM</code>格式表示当前时间。</li><li><code>\A</code>：24小时制的<code>hours:minutes</code>表示当前时间。</li><li><code>\u</code>：当前用户名。</li><li><code>\v</code>：Shell 的版本号。</li><li><code>\V</code>：Shell 的版本号和发布号。</li><li><code>\w</code>：当前的工作路径。</li><li><code>\W</code>：当前目录名。</li><li><code>\!</code>：当前命令在命令历史中的编号。</li><li><code>\#</code>：当前 shell 会话中的命令数。</li><li><code>\$</code>：普通用户显示为<code>$</code>字符，根用户显示为<code>#</code>字符。</li><li><code>\[</code>：非打印字符序列的开始标志。</li><li><code>\]</code>：非打印字符序列的结束标志。</li></ul><span id="more"></span><p>举例来说，<code>[\u@\h \W]\$</code>这个提示符定义，显示出来就是<code>[user@host ~]$</code>（具体的显示内容取决于你的系统）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[user@host ~]$ <span class="built_in">echo</span> <span class="variable">$PS1</span></span><br><span class="line">[\u@\h \W]\$</span><br></pre></td></tr></table></figure><p>改写<code>PS1</code>变量，就可以改变这个命令提示符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ PS1=<span class="string">&quot;\A \h \$ &quot;</span></span><br><span class="line">17:33 host $</span><br></pre></td></tr></table></figure><p>注意，<code>$</code>后面最好跟一个空格，这样的话，用户的输入与提示符就不会连在一起。</p><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>默认情况下，命令提示符是显示终端预定义的颜色。Bash 允许自定义提示符颜色。</p><p>使用下面的代码，可以设定其后文本的颜色。</p><ul><li><code>\033[0;30m</code>：黑色</li><li><code>\033[1;30m</code>：深灰色</li><li><code>\033[0;31m</code>：红色</li><li><code>\033[1;31m</code>：浅红色</li><li><code>\033[0;32m</code>：绿色</li><li><code>\033[1;32m</code>：浅绿色</li><li><code>\033[0;33m</code>：棕色</li><li><code>\033[1;33m</code>：黄色</li><li><code>\033[0;34m</code>：蓝色</li><li><code>\033[1;34m</code>：浅蓝色</li><li><code>\033[0;35m</code>：粉红</li><li><code>\033[1;35m</code>：浅粉色</li><li><code>\033[0;36m</code>：青色</li><li><code>\033[1;36m</code>：浅青色</li><li><code>\033[0;37m</code>：浅灰色</li><li><code>\033[1;37m</code>：白色</li></ul><p>举例来说，如果要将提示符设为红色，可以将<code>PS1</code>设成下面的代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1=<span class="string">&#x27;\[\033[0;31m\]&lt;\u@\h \W&gt;\$&#x27;</span></span><br></pre></td></tr></table></figure><p>但是，上面这样设置以后，用户在提示符后面输入的文本也是红色的。为了解决这个问题， 可以在结尾添加另一个特殊代码<code>\[\033[00m\]</code>，表示将其后的文本恢复到默认颜色。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1=<span class="string">&#x27;\[\033[0;31m\]&lt;\u@\h \W&gt;\$\[\033[00m\]&#x27;</span></span><br></pre></td></tr></table></figure><p>除了设置前景颜色，Bash 还允许设置背景颜色。</p><ul><li><code>\033[0;40m</code>：蓝色</li><li><code>\033[1;44m</code>：黑色</li><li><code>\033[0;41m</code>：红色</li><li><code>\033[1;45m</code>：粉红</li><li><code>\033[0;42m</code>：绿色</li><li><code>\033[1;46m</code>：青色</li><li><code>\033[0;43m</code>：棕色</li><li><code>\033[1;47m</code>：浅灰色</li></ul><p>下面是一个带有红色背景的提示符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1=<span class="string">&#x27;\[\033[0;41m\]&lt;\u@\h \W&gt;\$\[\033[0m\] &#x27;</span></span><br></pre></td></tr></table></figure><h2 id="环境变量-PS2，PS3，PS4"><a href="#环境变量-PS2，PS3，PS4" class="headerlink" title="环境变量 PS2，PS3，PS4"></a>环境变量 PS2，PS3，PS4</h2><p>除了<code>PS1</code>，Bash 还提供了提示符相关的另外三个环境变量。</p><p>环境变量<code>PS2</code>是命令行折行输入时系统的提示符，默认为<code>&gt; </code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello</span></span><br><span class="line"><span class="string">&gt; world&quot;</span></span><br></pre></td></tr></table></figure><p>上面命令中，输入<code>hello</code>以后按下回车键，系统会提示继续输入。这时，第二行显示的提示符就是<code>PS2</code>定义的<code>&gt; </code>。</p><p>环境变量<code>PS3</code>是使用<code>select</code>命令时，系统输入菜单的提示符。</p><p>环境变量<code>PS4</code>默认为<code>+ </code>。它是使用 Bash 的<code>-x</code>参数执行脚本时，每一行命令在执行前都会先打印出来，并且在行首出现的那个提示符。</p><p>比如下面是脚本<code>test.sh</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><p>使用<code>-x</code>参数执行这个脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash -x test.sh</span><br><span class="line">+ <span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>上面例子中，输出的第一行前面有一个<code>+ </code>，这就是变量<code>PS4</code>定义的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash 启动环境</title>
      <link href="/2016/12/07/Bash%20%E5%90%AF%E5%8A%A8%E7%8E%AF%E5%A2%83/"/>
      <url>/2016/12/07/Bash%20%E5%90%AF%E5%8A%A8%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>用户每次使用 Shell，都会开启一个与 Shell 的 Session（对话）。</p><p>Session 有两种类型：登录 Session 和非登录 Session，也可以叫做 login shell 和 non-login shell。</p><h3 id="登录-Session"><a href="#登录-Session" class="headerlink" title="登录 Session"></a>登录 Session</h3><p>登录 Session 是用户登录系统以后，系统为用户开启的原始 Session，通常需要用户输入用户名和密码进行登录。</p><p>登录 Session 一般进行整个系统环境的初始化，启动的初始化脚本依次如下。</p><ul><li><code>/etc/profile</code>：所有用户的全局配置脚本。</li><li><code>/etc/profile.d</code>目录里面所有<code>.sh</code>文件</li><li><code>~/.bash_profile</code>：用户的个人配置脚本。如果该脚本存在，则执行完就不再往下执行。</li><li><code>~/.bash_login</code>：如果<code>~/.bash_profile</code>没找到，则尝试执行这个脚本（C shell 的初始化脚本）。如果该脚本存在，则执行完就不再往下执行。</li><li><code>~/.profile</code>：如果<code>~/.bash_profile</code>和<code>~/.bash_login</code>都没找到，则尝试读取这个脚本（Bourne shell 和 Korn shell 的初始化脚本）。</li></ul><p>Linux 发行版更新的时候，会更新<code>/etc</code>里面的文件，比如<code>/etc/profile</code>，因此不要直接修改这个文件。如果想修改所有用户的登陆环境，就在<code>/etc/profile.d</code>目录里面新建<code>.sh</code>脚本。</p><span id="more"></span><p>如果想修改你个人的登录环境，一般是写在<code>~/.bash_profile</code>里面。下面是一个典型的<code>.bash_profile</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bash_profile</span></span><br><span class="line">PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin</span><br><span class="line"></span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">MANPATH=/usr/man:/usr/X11/man</span><br><span class="line">EDITOR=/usr/bin/vi</span><br><span class="line">PS1=<span class="string">&#x27;\h:\w\$ &#x27;</span></span><br><span class="line">PS2=<span class="string">&#x27;&gt; &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">. ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="built_in">export</span> EDITOR</span><br></pre></td></tr></table></figure><p>可以看到，这个脚本定义了一些最基本的环境变量，然后执行了<code>~/.bashrc</code>。</p><p><code>bash</code>命令的<code>--login</code>参数，会强制执行登录 Session 会执行的脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash --login</span><br></pre></td></tr></table></figure><p><code>bash</code>命令的<code>--noprofile</code>参数，会跳过上面这些 Profile 脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash --noprofile</span><br></pre></td></tr></table></figure><h3 id="非登录-Session"><a href="#非登录-Session" class="headerlink" title="非登录 Session"></a>非登录 Session</h3><p>非登录 Session 是用户进入系统以后，手动新建的 Session，这时不会进行环境初始化。比如，在命令行执行<code>bash</code>命令，就会新建一个非登录 Session。</p><p>非登录 Session 的初始化脚本依次如下。</p><ul><li><code>/etc/bash.bashrc</code>：对全体用户有效。</li><li><code>~/.bashrc</code>：仅对当前用户有效。</li></ul><p>对用户来说，<code>~/.bashrc</code>通常是最重要的脚本。非登录 Session 默认会执行它，而登录 Session 一般也会通过调用执行它。每次新建一个 Bash 窗口，就相当于新建一个非登录 Session，所以<code>~/.bashrc</code>每次都会执行。注意，执行脚本相当于新建一个非互动的 Bash 环境，但是这种情况不会调用<code>~/.bashrc</code>。</p><p><code>bash</code>命令的<code>--norc</code>参数，可以禁止在非登录 Session 执行<code>~/.bashrc</code>脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash --norc</span><br></pre></td></tr></table></figure><p><code>bash</code>命令的<code>--rcfile</code>参数，指定另一个脚本代替<code>.bashrc</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash --rcfile testrc</span><br></pre></td></tr></table></figure><h3 id="bash-logout"><a href="#bash-logout" class="headerlink" title=".bash_logout"></a>.bash_logout</h3><p><code>~/.bash_logout</code>脚本在每次退出 Session 时执行，通常用来做一些清理工作和记录工作，比如删除临时文件，记录用户在本次 Session 花费的时间。</p><p>如果没有退出时要执行的命令，这个文件也可以不存在。</p><h2 id="启动选项"><a href="#启动选项" class="headerlink" title="启动选项"></a>启动选项</h2><p>为了方便 Debug，有时在启动 Bash 的时候，可以加上启动参数。</p><ul><li><code>-n</code>：不运行脚本，只检查是否有语法错误。</li><li><code>-v</code>：输出每一行语句运行结果前，会先输出该行语句。</li><li><code>-x</code>：每一个命令处理之前，先输出该命令，再执行该命令。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash -n scriptname</span><br><span class="line">$ bash -v scriptname</span><br><span class="line">$ bash -x scriptname</span><br></pre></td></tr></table></figure><h2 id="键盘绑定"><a href="#键盘绑定" class="headerlink" title="键盘绑定"></a>键盘绑定</h2><p>Bash 允许用户定义自己的快捷键。全局的键盘绑定文件默认为<code>/etc/inputrc</code>，你可以在主目录创建自己的键盘绑定文件<code>.inputrc</code>文件。如果定义了这个文件，需要在其中加入下面这行，保证全局绑定不会被遗漏。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$include</span> /etc/inputrc</span><br></pre></td></tr></table></figure><p><code>.inputrc</code>文件里面的快捷键，可以像这样定义，<code>&quot;\C-t&quot;:&quot;pwd\n&quot;</code>表示将<code>Ctrl + t</code>绑定为运行<code>pwd</code>命令。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mktemp 命令，trap 命令</title>
      <link href="/2016/11/28/mktemp%20%E5%91%BD%E4%BB%A4%EF%BC%8Ctrap%20%E5%91%BD%E4%BB%A4/"/>
      <url>/2016/11/28/mktemp%20%E5%91%BD%E4%BB%A4%EF%BC%8Ctrap%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Bash 脚本有时需要创建临时文件或临时目录。常见的做法是，在<code>/tmp</code>目录里面创建文件或目录，这样做有很多弊端，使用<code>mktemp</code>命令是最安全的做法。</p><h2 id="临时文件的安全问题"><a href="#临时文件的安全问题" class="headerlink" title="临时文件的安全问题"></a>临时文件的安全问题</h2><p>直接创建临时文件，尤其在<code>/tmp</code>目录里面，往往会导致安全问题。</p><p>首先，<code>/tmp</code>目录是所有人可读写的，任何用户都可以往该目录里面写文件。创建的临时文件也是所有人可读的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> /tmp/info.txt</span><br><span class="line">$ <span class="built_in">ls</span> -l /tmp/info.txt</span><br><span class="line">-rw-r--r-- 1 ruanyf ruanyf 0 12月 28 17:12 /tmp/info.txt</span><br></pre></td></tr></table></figure><p>上面命令在<code>/tmp</code>目录直接创建文件，该文件默认是所有人可读的。</p><p>其次，如果攻击者知道临时文件的文件名，他可以创建符号链接，链接到临时文件，可能导致系统运行异常。攻击者也可能向脚本提供一些恶意数据。因此，临时文件最好使用不可预测、每次都不一样的文件名，防止被利用。</p><p>最后，临时文件使用完毕，应该删除。但是，脚本意外退出时，往往会忽略清理临时文件。</p><p>生成临时文件应该遵循下面的规则。</p><blockquote><ul><li>创建前检查文件是否已经存在。</li><li>确保临时文件已成功创建。</li><li>临时文件必须有权限的限制。</li><li>临时文件要使用不可预测的文件名。</li><li>脚本退出时，要删除临时文件（使用<code>trap</code>命令）。</li></ul></blockquote><span id="more"></span><h2 id="mktemp-命令的用法"><a href="#mktemp-命令的用法" class="headerlink" title="mktemp 命令的用法"></a>mktemp 命令的用法</h2><p><code>mktemp</code>命令就是为安全创建临时文件而设计的。虽然在创建临时文件之前，它不会检查临时文件是否存在，但是它支持唯一文件名和清除机制，因此可以减轻安全攻击的风险。</p><p>直接运行<code>mktemp</code>命令，就能生成一个临时文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mktemp</span></span><br><span class="line">/tmp/tmp.4GcsWSG4vj</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> -l /tmp/tmp.4GcsWSG4vj</span><br><span class="line">-rw------- 1 ruanyf ruanyf 0 12月 28 12:49 /tmp/tmp.4GcsWSG4vj</span><br></pre></td></tr></table></figure><p>上面命令中，<code>mktemp</code>命令生成的临时文件名是随机的，而且权限是只有用户本人可读写。</p><p>Bash 脚本使用<code>mktemp</code>命令的用法如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">TMPFILE=$(<span class="built_in">mktemp</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Our temp file is <span class="variable">$TMPFILE</span>&quot;</span></span><br></pre></td></tr></table></figure><p>为了确保临时文件创建成功，<code>mktemp</code>命令后面最好使用 OR 运算符（<code>||</code>），保证创建失败时退出脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">TMPFILE=$(<span class="built_in">mktemp</span>) || <span class="built_in">exit</span> 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Our temp file is <span class="variable">$TMPFILE</span>&quot;</span></span><br></pre></td></tr></table></figure><p>为了保证脚本退出时临时文件被删除，可以使用<code>trap</code>命令指定退出时的清除操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&#x27;rm -f &quot;$TMPFILE&quot;&#x27;</span> EXIT</span><br><span class="line"></span><br><span class="line">TMPFILE=$(<span class="built_in">mktemp</span>) || <span class="built_in">exit</span> 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Our temp file is <span class="variable">$TMPFILE</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="mktemp-命令的参数"><a href="#mktemp-命令的参数" class="headerlink" title="mktemp 命令的参数"></a>mktemp 命令的参数</h2><p><code>-d</code>参数可以创建一个临时目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mktemp</span> -d</span><br><span class="line">/tmp/tmp.Wcau5UjmN6</span><br></pre></td></tr></table></figure><p><code>-p</code>参数可以指定临时文件所在的目录。默认是使用<code>$TMPDIR</code>环境变量指定的目录，如果这个变量没设置，那么使用<code>/tmp</code>目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mktemp</span> -p /home/ruanyf/</span><br><span class="line">/home/ruanyf/tmp.FOKEtvs2H3</span><br></pre></td></tr></table></figure><p><code>-t</code>参数可以指定临时文件的文件名模板，模板的末尾必须至少包含三个连续的<code>X</code>字符，表示随机字符，建议至少使用六个<code>X</code>。默认的文件名模板是<code>tmp.</code>后接十个随机字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mktemp</span> -t mytemp.XXXXXXX</span><br><span class="line">/tmp/mytemp.yZ1HgZV</span><br></pre></td></tr></table></figure><h2 id="trap-命令"><a href="#trap-命令" class="headerlink" title="trap 命令"></a>trap 命令</h2><p><code>trap</code>命令用来在 Bash 脚本中响应系统信号。</p><p>最常见的系统信号就是 SIGINT（中断），即按 Ctrl + C 所产生的信号。<code>trap</code>命令的<code>-l</code>参数，可以列出所有的系统信号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">trap</span> -l</span><br><span class="line"> 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP</span><br><span class="line"> 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR1</span><br><span class="line">11) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM</span><br><span class="line">16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP</span><br><span class="line">21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR</span><br><span class="line">31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-164) SIGRTMAX</span><br></pre></td></tr></table></figure><p><code>trap</code>的命令格式如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">trap</span> [动作] [信号1] [信号2] ...</span><br></pre></td></tr></table></figure><p>上面代码中，“动作”是一个 Bash 命令，“信号”常用的有以下几个。</p><blockquote><ul><li>HUP：编号1，脚本与所在的终端脱离联系。</li><li>INT：编号2，用户按下 Ctrl + C，意图让脚本终止运行。</li><li>QUIT：编号3，用户按下 Ctrl + 斜杠，意图退出脚本。</li><li>KILL：编号9，该信号用于杀死进程。</li><li>TERM：编号15，这是<code>kill</code>命令发出的默认信号。</li><li>EXIT：编号0，这不是系统信号，而是 Bash 脚本特有的信号，不管什么情况，只要退出脚本就会产生。</li></ul></blockquote><p><code>trap</code>命令响应<code>EXIT</code>信号的写法如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">trap</span> <span class="string">&#x27;rm -f &quot;$TMPFILE&quot;&#x27;</span> EXIT</span><br></pre></td></tr></table></figure><p>上面命令中，脚本遇到<code>EXIT</code>信号时，就会执行<code>rm -f &quot;$TMPFILE&quot;</code>。</p><p>trap 命令的常见使用场景，就是在 Bash 脚本中指定退出时执行的清理命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&#x27;rm -f &quot;$TMPFILE&quot;&#x27;</span> EXIT</span><br><span class="line"></span><br><span class="line">TMPFILE=$(<span class="built_in">mktemp</span>) || <span class="built_in">exit</span> 1</span><br><span class="line"><span class="built_in">ls</span> /etc &gt; <span class="variable">$TMPFILE</span></span><br><span class="line"><span class="keyword">if</span> grep -qi <span class="string">&quot;kernel&quot;</span> <span class="variable">$TMPFILE</span>; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;find&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面代码中，不管是脚本正常执行结束，还是用户按 Ctrl + C 终止，都会产生<code>EXIT</code>信号，从而触发删除临时文件。</p><p>注意，<code>trap</code>命令必须放在脚本的开头。否则，它上方的任何命令导致脚本退出，都不会被它捕获。</p><p>如果<code>trap</code>需要触发多条命令，可以封装一个 Bash 函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> egress &#123;</span><br><span class="line">  command1</span><br><span class="line">  command2</span><br><span class="line">  command3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">trap</span> egress EXIT</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.putorius.net/working-with-temporary-files.html">Working with Temporary Files and Directories in Shell Scripts</a>, Steven Vona</li><li><a href="https://www.putorius.net/using-trap-to-exit-bash-scripts-cleanly.html">Using Trap to Exit Bash Scripts Cleanly</a></li><li><a href="https://mywiki.wooledge.org/SignalTrap">Sending and Trapping Signals</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脚本除错</title>
      <link href="/2016/11/09/%E8%84%9A%E6%9C%AC%E9%99%A4%E9%94%99/"/>
      <url>/2016/11/09/%E8%84%9A%E6%9C%AC%E9%99%A4%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>本章介绍如何对 Shell 脚本除错。</p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><p>编写 Shell 脚本的时候，一定要考虑到命令失败的情况，否则很容易出错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">dir_name=/path/not/exist</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$dir_name</span></span><br><span class="line"><span class="built_in">rm</span> *</span><br></pre></td></tr></table></figure><p>上面脚本中，如果目录<code>$dir_name</code>不存在，<code>cd $dir_name</code>命令就会执行失败。这时，就不会改变当前目录，脚本会继续执行下去，导致<code>rm *</code>命令删光当前目录的文件。</p><p>如果改成下面的样子，也会有问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$dir_name</span> &amp;&amp; <span class="built_in">rm</span> *</span><br></pre></td></tr></table></figure><p>上面脚本中，只有<code>cd $dir_name</code>执行成功，才会执行<code>rm *</code>。但是，如果变量<code>$dir_name</code>为空，<code>cd</code>就会进入用户主目录，从而删光用户主目录的文件。</p><p>下面的写法才是正确的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -d <span class="variable">$dir_name</span> ]] &amp;&amp; <span class="built_in">cd</span> <span class="variable">$dir_name</span> &amp;&amp; <span class="built_in">rm</span> *</span><br></pre></td></tr></table></figure><p>上面代码中，先判断目录<code>$dir_name</code>是否存在，然后才执行其他操作。</p><span id="more"></span><p>如果不放心删除什么文件，可以先打印出来看一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ -d <span class="variable">$dir_name</span> ]] &amp;&amp; <span class="built_in">cd</span> <span class="variable">$dir_name</span> &amp;&amp; <span class="built_in">echo</span> <span class="built_in">rm</span> *</span><br></pre></td></tr></table></figure><p>上面命令中，<code>echo rm *</code>不会删除文件，只会打印出来要删除的文件。</p><h2 id="bash的-x参数"><a href="#bash的-x参数" class="headerlink" title="bash的-x参数"></a><code>bash</code>的<code>-x</code>参数</h2><p><code>bash</code>的<code>-x</code>参数可以在执行每一行命令之前，打印该命令。一旦出错，这样就比较容易追查。</p><p>下面是一个脚本<code>script.sh</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># script.sh</span></span><br><span class="line"><span class="built_in">echo</span> hello world</span><br></pre></td></tr></table></figure><p>加上<code>-x</code>参数，执行每条命令之前，都会显示该命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash -x script.sh</span><br><span class="line">+ <span class="built_in">echo</span> hello world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>上面例子中，行首为<code>+</code>的行，显示该行是所要执行的命令，下一行才是该命令的执行结果。</p><p>下面再看一个<code>-x</code>写在脚本内部的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash -x</span></span><br><span class="line"><span class="comment"># trouble: script to demonstrate common errors</span></span><br><span class="line"></span><br><span class="line">number=1</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$number</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Number is equal to 1.&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Number is not equal to 1.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面的脚本执行之后，会输出每一行命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ trouble</span><br><span class="line">+ number=1</span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> 1 = 1 <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ <span class="built_in">echo</span> <span class="string">&#x27;Number is equal to 1.&#x27;</span></span><br><span class="line">Number is equal to 1.</span><br></pre></td></tr></table></figure><p>输出的命令之前的<code>+</code>号，是由系统变量<code>PS4</code>决定，可以修改这个变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PS4=<span class="string">&#x27;$LINENO + &#x27;</span></span><br><span class="line">$ trouble</span><br><span class="line">5 + number=1</span><br><span class="line">7 + <span class="string">&#x27;[&#x27;</span> 1 = 1 <span class="string">&#x27;]&#x27;</span></span><br><span class="line">8 + <span class="built_in">echo</span> <span class="string">&#x27;Number is equal to 1.&#x27;</span></span><br><span class="line">Number is equal to 1.</span><br></pre></td></tr></table></figure><p>另外，<code>set</code>命令也可以设置 Shell 的行为参数，有利于脚本除错，详见《set 命令》一章。</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>有一些环境变量常用于除错。</p><h3 id="LINENO"><a href="#LINENO" class="headerlink" title="LINENO"></a>LINENO</h3><p>变量<code>LINENO</code>返回它在脚本里面的行号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This is line <span class="variable">$LINENO</span>&quot;</span></span><br></pre></td></tr></table></figure><p>执行上面的脚本<code>test.sh</code>，<code>$LINENO</code>会返回<code>3</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./test.sh</span><br><span class="line">This is line 3</span><br></pre></td></tr></table></figure><h3 id="FUNCNAME"><a href="#FUNCNAME" class="headerlink" title="FUNCNAME"></a>FUNCNAME</h3><p>变量<code>FUNCNAME</code>返回一个数组，内容是当前的函数调用堆栈。该数组的0号成员是当前调用的函数，1号成员是调用当前函数的函数，以此类推。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func1</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func1: FUNCNAME0 is <span class="variable">$&#123;FUNCNAME[0]&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func1: FUNCNAME1 is <span class="variable">$&#123;FUNCNAME[1]&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func1: FUNCNAME2 is <span class="variable">$&#123;FUNCNAME[2]&#125;</span>&quot;</span></span><br><span class="line">  func2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func2</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func2: FUNCNAME0 is <span class="variable">$&#123;FUNCNAME[0]&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func2: FUNCNAME1 is <span class="variable">$&#123;FUNCNAME[1]&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func2: FUNCNAME2 is <span class="variable">$&#123;FUNCNAME[2]&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func1</span><br></pre></td></tr></table></figure><p>执行上面的脚本<code>test.sh</code>，结果如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./test.sh</span><br><span class="line">func1: FUNCNAME0 is func1</span><br><span class="line">func1: FUNCNAME1 is main</span><br><span class="line">func1: FUNCNAME2 is</span><br><span class="line">func2: FUNCNAME0 is func2</span><br><span class="line">func2: FUNCNAME1 is func1</span><br><span class="line">func2: FUNCNAME2 is main</span><br></pre></td></tr></table></figure><p>上面例子中，执行<code>func1</code>时，变量<code>FUNCNAME</code>的0号成员是<code>func1</code>，1号成员是调用<code>func1</code>的主脚本<code>main</code>。执行<code>func2</code>时，变量<code>FUNCNAME</code>的0号成员是<code>func2</code>，1号成员是调用<code>func2</code>的<code>func1</code>。</p><h3 id="BASH-SOURCE"><a href="#BASH-SOURCE" class="headerlink" title="BASH_SOURCE"></a>BASH_SOURCE</h3><p>变量<code>BASH_SOURCE</code>返回一个数组，内容是当前的脚本调用堆栈。该数组的0号成员是当前执行的脚本，1号成员是调用当前脚本的脚本，以此类推，跟变量<code>FUNCNAME</code>是一一对应关系。</p><p>下面有两个子脚本<code>lib1.sh</code>和<code>lib2.sh</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lib1.sh</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func1</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func1: BASH_SOURCE0 is <span class="variable">$&#123;BASH_SOURCE[0]&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func1: BASH_SOURCE1 is <span class="variable">$&#123;BASH_SOURCE[1]&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func1: BASH_SOURCE2 is <span class="variable">$&#123;BASH_SOURCE[2]&#125;</span>&quot;</span></span><br><span class="line">  func2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lib2.sh</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func2</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func2: BASH_SOURCE0 is <span class="variable">$&#123;BASH_SOURCE[0]&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func2: BASH_SOURCE1 is <span class="variable">$&#123;BASH_SOURCE[1]&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func2: BASH_SOURCE2 is <span class="variable">$&#123;BASH_SOURCE[2]&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，主脚本<code>main.sh</code>调用上面两个子脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># main.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> lib1.sh</span><br><span class="line"><span class="built_in">source</span> lib2.sh</span><br><span class="line"></span><br><span class="line">func1</span><br></pre></td></tr></table></figure><p>执行主脚本<code>main.sh</code>，会得到下面的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./main.sh</span><br><span class="line">func1: BASH_SOURCE0 is lib1.sh</span><br><span class="line">func1: BASH_SOURCE1 is ./main.sh</span><br><span class="line">func1: BASH_SOURCE2 is</span><br><span class="line">func2: BASH_SOURCE0 is lib2.sh</span><br><span class="line">func2: BASH_SOURCE1 is lib1.sh</span><br><span class="line">func2: BASH_SOURCE2 is ./main.sh</span><br></pre></td></tr></table></figure><p>上面例子中，执行函数<code>func1</code>时，变量<code>BASH_SOURCE</code>的0号成员是<code>func1</code>所在的脚本<code>lib1.sh</code>，1号成员是主脚本<code>main.sh</code>；执行函数<code>func2</code>时，变量<code>BASH_SOURCE</code>的0号成员是<code>func2</code>所在的脚本<code>lib2.sh</code>，1号成员是调用<code>func2</code>的脚本<code>lib1.sh</code>。</p><h3 id="BASH-LINENO"><a href="#BASH-LINENO" class="headerlink" title="BASH_LINENO"></a>BASH_LINENO</h3><p>变量<code>BASH_LINENO</code>返回一个数组，内容是每一轮调用对应的行号。<code>$&#123;BASH_LINENO[$i]&#125;</code>跟<code>$&#123;FUNCNAME[$i]&#125;</code>是一一对应关系，表示<code>$&#123;FUNCNAME[$i]&#125;</code>在调用它的脚本文件<code>$&#123;BASH_SOURCE[$i+1]&#125;</code>里面的行号。</p><p>下面有两个子脚本<code>lib1.sh</code>和<code>lib2.sh</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lib1.sh</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func1</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func1: BASH_LINENO is <span class="variable">$&#123;BASH_LINENO[0]&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func1: FUNCNAME is <span class="variable">$&#123;FUNCNAME[0]&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func1: BASH_SOURCE is <span class="variable">$&#123;BASH_SOURCE[1]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  func2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lib2.sh</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">func2</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func2: BASH_LINENO is <span class="variable">$&#123;BASH_LINENO[0]&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func2: FUNCNAME is <span class="variable">$&#123;FUNCNAME[0]&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;func2: BASH_SOURCE is <span class="variable">$&#123;BASH_SOURCE[1]&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，主脚本<code>main.sh</code>调用上面两个子脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># main.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> lib1.sh</span><br><span class="line"><span class="built_in">source</span> lib2.sh</span><br><span class="line"></span><br><span class="line">func1</span><br></pre></td></tr></table></figure><p>执行主脚本<code>main.sh</code>，会得到下面的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./main.sh</span><br><span class="line">func1: BASH_LINENO is 7</span><br><span class="line">func1: FUNCNAME is func1</span><br><span class="line">func1: BASH_SOURCE is main.sh</span><br><span class="line">func2: BASH_LINENO is 8</span><br><span class="line">func2: FUNCNAME is func2</span><br><span class="line">func2: BASH_SOURCE is lib1.sh</span><br></pre></td></tr></table></figure><p>上面例子中，函数<code>func1</code>是在<code>main.sh</code>的第7行调用，函数<code>func2</code>是在<code>lib1.sh</code>的第8行调用的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>set 命令，shopt 命令</title>
      <link href="/2016/10/28/set%20%E5%91%BD%E4%BB%A4%EF%BC%8Cshopt%20%E5%91%BD%E4%BB%A4/"/>
      <url>/2016/10/28/set%20%E5%91%BD%E4%BB%A4%EF%BC%8Cshopt%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><code>set</code>命令是 Bash 脚本的重要环节，却常常被忽视，导致脚本的安全性和可维护性出问题。本章介绍<code>set</code>的基本用法，帮助你写出更安全的 Bash 脚本。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们知道，Bash 执行脚本时，会创建一个子 Shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash script.sh</span><br></pre></td></tr></table></figure><p>上面代码中，<code>script.sh</code>是在一个子 Shell 里面执行。这个子 Shell 就是脚本的执行环境，Bash 默认给定了这个环境的各种参数。</p><p><code>set</code>命令用来修改子 Shell 环境的运行参数，即定制环境。一共有十几个参数可以定制，<a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html">官方手册</a>有完整清单，本章介绍其中最常用的几个。</p><p>顺便提一下，如果命令行下不带任何参数，直接运行<code>set</code>，会显示所有的环境变量和 Shell 函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">set</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="set-u"><a href="#set-u" class="headerlink" title="set -u"></a>set -u</h2><p>执行脚本时，如果遇到不存在的变量，Bash 默认忽略它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="built_in">echo</span> bar</span><br></pre></td></tr></table></figure><p>上面代码中，<code>$a</code>是一个不存在的变量。执行结果如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash script.sh</span><br><span class="line"></span><br><span class="line">bar</span><br></pre></td></tr></table></figure><p>可以看到，<code>echo $a</code>输出了一个空行，Bash 忽略了不存在的<code>$a</code>，然后继续执行<code>echo bar</code>。大多数情况下，这不是开发者想要的行为，遇到变量不存在，脚本应该报错，而不是一声不响地往下执行。</p><p><code>set -u</code>就用来改变这种行为。脚本在头部加上它，遇到不存在的变量就会报错，并停止执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -u</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="built_in">echo</span> bar</span><br></pre></td></tr></table></figure><p>运行结果如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bash script.sh</span><br><span class="line">bash: script.sh:行4: a: 未绑定的变量</span><br></pre></td></tr></table></figure><p>可以看到，脚本报错了，并且不再执行后面的语句。</p><p><code>-u</code>还有另一种写法<code>-o nounset</code>，两者是等价的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -o nounset</span><br></pre></td></tr></table></figure><h2 id="set-x"><a href="#set-x" class="headerlink" title="set -x"></a>set -x</h2><p>默认情况下，脚本执行后，只输出运行结果，没有其他内容。如果多个命令连续执行，它们的运行结果就会连续输出。有时会分不清，某一段内容是什么命令产生的。</p><p><code>set -x</code>用来在运行结果之前，先输出执行的那一行命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -x</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> bar</span><br></pre></td></tr></table></figure><p>执行上面的脚本，结果如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash script.sh</span><br><span class="line">+ <span class="built_in">echo</span> bar</span><br><span class="line">bar</span><br></pre></td></tr></table></figure><p>可以看到，执行<code>echo bar</code>之前，该命令会先打印出来，行首以<code>+</code>表示。这对于调试复杂的脚本是很有用的。</p><p><code>-x</code>还有另一种写法<code>-o xtrace</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -o xtrace</span><br></pre></td></tr></table></figure><p>脚本当中如果要关闭命令输出，可以使用<code>set +x</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">number=1</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -x</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$number</span> = <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Number equals 1&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Number does not equal 1&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">set</span> +x</span><br></pre></td></tr></table></figure><p>上面的例子中，只对特定的代码段打开命令输出。</p><h2 id="Bash-的错误处理"><a href="#Bash-的错误处理" class="headerlink" title="Bash 的错误处理"></a>Bash 的错误处理</h2><p>如果脚本里面有运行失败的命令（返回值非<code>0</code>），Bash 默认会继续执行后面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">foo</span><br><span class="line"><span class="built_in">echo</span> bar</span><br></pre></td></tr></table></figure><p>上面脚本中，<code>foo</code>是一个不存在的命令，执行时会报错。但是，Bash 会忽略这个错误，继续往下执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash script.sh</span><br><span class="line">script.sh:行3: foo: 未找到命令</span><br><span class="line">bar</span><br></pre></td></tr></table></figure><p>可以看到，Bash 只是显示有错误，并没有终止执行。</p><p>这种行为很不利于脚本安全和除错。实际开发中，如果某个命令失败，往往需要脚本停止执行，防止错误累积。这时，一般采用下面的写法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> || <span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><p>上面的写法表示只要<code>command</code>有非零返回值，脚本就会停止执行。</p><p>如果停止执行之前需要完成多个操作，就要采用下面三种写法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line"><span class="built_in">command</span> || &#123; <span class="built_in">echo</span> <span class="string">&quot;command failed&quot;</span>; <span class="built_in">exit</span> 1; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">command</span>; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;command failed&quot;</span>; <span class="built_in">exit</span> 1; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法三</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;$?&quot;</span> -ne 0 ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;command failed&quot;</span>; <span class="built_in">exit</span> 1; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>另外，除了停止执行，还有一种情况。如果两个命令有继承关系，只有第一个命令成功了，才能继续执行第二个命令，那么就要采用下面的写法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 &amp;&amp; command2</span><br></pre></td></tr></table></figure><h2 id="set-e"><a href="#set-e" class="headerlink" title="set -e"></a>set -e</h2><p>上面这些写法多少有些麻烦，容易疏忽。<code>set -e</code>从根本上解决了这个问题，它使得脚本只要发生错误，就终止执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">foo</span><br><span class="line"><span class="built_in">echo</span> bar</span><br></pre></td></tr></table></figure><p>执行结果如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bash script.sh</span><br><span class="line">script.sh:行4: foo: 未找到命令</span><br></pre></td></tr></table></figure><p>可以看到，第4行执行失败以后，脚本就终止执行了。</p><p><code>set -e</code>根据返回值来判断，一个命令是否运行失败。但是，某些命令的非零返回值可能不表示失败，或者开发者希望在命令失败的情况下，脚本继续执行下去。这时可以暂时关闭<code>set -e</code>，该命令执行结束后，再重新打开<code>set -e</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> +e</span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line"><span class="built_in">set</span> -e</span><br></pre></td></tr></table></figure><p>上面代码中，<code>set +e</code>表示关闭<code>-e</code>选项，<code>set -e</code>表示重新打开<code>-e</code>选项。</p><p>还有一种方法是使用<code>command || true</code>，使得该命令即使执行失败，脚本也不会终止执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">foo || <span class="literal">true</span></span><br><span class="line"><span class="built_in">echo</span> bar</span><br></pre></td></tr></table></figure><p>上面代码中，<code>true</code>使得这一行语句总是会执行成功，后面的<code>echo bar</code>会执行。</p><p><code>-e</code>还有另一种写法<code>-o errexit</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> -o errexit</span><br></pre></td></tr></table></figure><h2 id="set-o-pipefail"><a href="#set-o-pipefail" class="headerlink" title="set -o pipefail"></a>set -o pipefail</h2><p><code>set -e</code>有一个例外情况，就是不适用于管道命令。</p><p>所谓管道命令，就是多个子命令通过管道运算符（<code>|</code>）组合成为一个大的命令。Bash 会把最后一个子命令的返回值，作为整个命令的返回值。也就是说，只要最后一个子命令不失败，管道命令总是会执行成功，因此它后面命令依然会执行，<code>set -e</code>就失效了。</p><p>请看下面这个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">foo | <span class="built_in">echo</span> a</span><br><span class="line"><span class="built_in">echo</span> bar</span><br></pre></td></tr></table></figure><p>执行结果如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ bash script.sh</span><br><span class="line">a</span><br><span class="line">script.sh:行4: foo: 未找到命令</span><br><span class="line">bar</span><br></pre></td></tr></table></figure><p>上面代码中，<code>foo</code>是一个不存在的命令，但是<code>foo | echo a</code>这个管道命令会执行成功，导致后面的<code>echo bar</code>会继续执行。</p><p><code>set -o pipefail</code>用来解决这种情况，只要一个子命令失败，整个管道命令就失败，脚本就会终止执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -eo pipefail</span><br><span class="line"></span><br><span class="line">foo | <span class="built_in">echo</span> a</span><br><span class="line"><span class="built_in">echo</span> bar</span><br></pre></td></tr></table></figure><p>运行后，结果如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash script.sh</span><br><span class="line">a</span><br><span class="line">script.sh:行4: foo: 未找到命令</span><br></pre></td></tr></table></figure><p>可以看到，<code>echo bar</code>没有执行。</p><h2 id="set-E"><a href="#set-E" class="headerlink" title="set -E"></a>set -E</h2><p>一旦设置了<code>-e</code>参数，会导致函数内的错误不会被<code>trap</code>命令捕获（参考《trap 命令》一章）。<code>-E</code>参数可以纠正这个行为，使得函数也能继承<code>trap</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;echo ERR trap fired!&quot;</span> ERR</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">myfunc</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment"># &#x27;foo&#x27; 是一个不存在的命令</span></span><br><span class="line">  foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myfunc</span><br></pre></td></tr></table></figure><p>上面示例中，<code>myfunc</code>函数内部调用了一个不存在的命令<code>foo</code>，导致执行这个函数会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bash test.sh</span><br><span class="line">test.sh:行9: foo：未找到命令</span><br></pre></td></tr></table></figure><p>但是，由于设置了<code>set -e</code>，函数内部的报错并没有被<code>trap</code>命令捕获，需要加上<code>-E</code>参数才可以。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -Eeuo pipefail</span><br><span class="line"></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;echo ERR trap fired!&quot;</span> ERR</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">myfunc</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment"># &#x27;foo&#x27; 是一个不存在的命令</span></span><br><span class="line">  foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myfunc</span><br></pre></td></tr></table></figure><p>执行上面这个脚本，就可以看到<code>trap</code>命令生效了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash test.sh</span><br><span class="line">test.sh:行9: foo：未找到命令</span><br><span class="line">ERR <span class="built_in">trap</span> fired!</span><br></pre></td></tr></table></figure><h2 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h2><p><code>set</code>命令还有一些其他参数。</p><ul><li><code>set -n</code>：等同于<code>set -o noexec</code>，不运行命令，只检查语法是否正确。</li><li><code>set -f</code>：等同于<code>set -o noglob</code>，表示不对通配符进行文件名扩展。</li><li><code>set -v</code>：等同于<code>set -o verbose</code>，表示打印 Shell 接收到的每一行输入。</li><li><code>set -o noclobber</code>：防止使用重定向运算符<code>&gt;</code>覆盖已经存在的文件。</li></ul><p>上面的<code>-f</code>和<code>-v</code>参数，可以分别使用<code>set +f</code>、<code>set +v</code>关闭。</p><h2 id="set-命令总结"><a href="#set-命令总结" class="headerlink" title="set 命令总结"></a>set 命令总结</h2><p>上面重点介绍的<code>set</code>命令的几个参数，一般都放在一起使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line"><span class="built_in">set</span> -Eeuxo pipefail</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line"><span class="built_in">set</span> -Eeux</span><br><span class="line"><span class="built_in">set</span> -o pipefail</span><br></pre></td></tr></table></figure><p>这两种写法建议放在所有 Bash 脚本的头部。</p><p>另一种办法是在执行 Bash 脚本的时候，从命令行传入这些参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash -euxo pipefail script.sh</span><br></pre></td></tr></table></figure><h2 id="shopt-命令"><a href="#shopt-命令" class="headerlink" title="shopt 命令"></a>shopt 命令</h2><p><code>shopt</code>命令用来调整 Shell 的参数，跟<code>set</code>命令的作用很类似。之所以会有这两个类似命令的主要原因是，<code>set</code>是从 Ksh 继承的，属于 POSIX 规范的一部分，而<code>shopt</code>是 Bash 特有的。</p><p>直接输入<code>shopt</code>可以查看所有参数，以及它们各自打开和关闭的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span></span><br></pre></td></tr></table></figure><p><code>shopt</code>命令后面跟着参数名，可以查询该参数是否打开。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> globstar</span><br><span class="line">globstar  off</span><br></pre></td></tr></table></figure><p>上面例子表示<code>globstar</code>参数默认是关闭的。</p><p><strong>（1）-s</strong></p><p><code>-s</code>用来打开某个参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> -s optionNameHere</span><br></pre></td></tr></table></figure><p><strong>（2）-u</strong></p><p><code>-u</code>用来关闭某个参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> -u optionNameHere</span><br></pre></td></tr></table></figure><p>举例来说，<code>histappend</code>这个参数表示退出当前 Shell 时，将操作历史追加到历史文件中。这个参数默认是打开的，如果使用下面的命令将其关闭，那么当前 Shell 的操作历史将替换掉整个历史文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> -u histappend</span><br></pre></td></tr></table></figure><p><strong>（3）-q</strong></p><p><code>-q</code>的作用也是查询某个参数是否打开，但不是直接输出查询结果，而是通过命令的执行状态（<code>$?</code>）表示查询结果。如果状态为<code>0</code>，表示该参数打开；如果为<code>1</code>，表示该参数关闭。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> -q globstar</span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>上面命令查询<code>globstar</code>参数是否打开。返回状态为<code>1</code>，表示该参数是关闭的。</p><p>这个用法主要用于脚本，供<code>if</code>条件结构使用。下面例子是如果打开了这个参数，就执行<code>if</code>结构内部的语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">shopt</span> -q globstar); <span class="keyword">then</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html">The Set Builtin</a></li><li><a href="https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/">Safer bash scripts with ‘set -euxo pipefail’</a></li><li><a href="http://www.davidpashley.com/articles/writing-robust-shell-scripts/">Writing Robust Bash Shell Scripts</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2016/10/18/%E6%95%B0%E7%BB%84/"/>
      <url>/2016/10/18/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>数组（array）是一个包含多个值的变量。成员的编号从0开始，数量没有上限，也没有要求成员被连续索引。</p><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>数组可以采用逐个赋值的方法创建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARRAY[INDEX]=value</span><br></pre></td></tr></table></figure><p>上面语法中，<code>ARRAY</code>是数组的名字，可以是任意合法的变量名。<code>INDEX</code>是一个大于或等于零的整数，也可以是算术表达式。注意数组第一个元素的下标是0， 而不是1。</p><p>下面创建一个三个成员的数组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ array[0]=val</span><br><span class="line">$ array[1]=val</span><br><span class="line">$ array[2]=val</span><br></pre></td></tr></table></figure><p>数组也可以采用一次性赋值的方式创建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ARRAY=(value1 value2 ... valueN)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"></span><br><span class="line">ARRAY=(</span><br><span class="line">  value1</span><br><span class="line">  value2</span><br><span class="line">  value3</span><br><span class="line">)</span><br></pre></td></tr></table></figure><span id="more"></span><p>采用上面方式创建数组时，可以按照默认顺序赋值，也可以在每个值前面指定位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ array=(a b c)</span><br><span class="line">$ array=([2]=c [0]=a [1]=b)</span><br><span class="line"></span><br><span class="line">$ days=(Sun Mon Tue Wed Thu Fri Sat)</span><br><span class="line">$ days=([0]=Sun [1]=Mon [2]=Tue [3]=Wed [4]=Thu [5]=Fri [6]=Sat)</span><br></pre></td></tr></table></figure><p>只为某些值指定位置，也是可以的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names=(hatter [5]=duchess alice)</span><br></pre></td></tr></table></figure><p>上面例子中，<code>hatter</code>是数组的0号位置，<code>duchess</code>是5号位置，<code>alice</code>是6号位置。</p><p>没有赋值的数组元素的默认值是空字符串。</p><p>定义数组的时候，可以使用通配符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mp3s=( *.mp3 )</span><br></pre></td></tr></table></figure><p>上面例子中，将当前目录的所有 MP3 文件，放进一个数组。</p><p>先用<code>declare -a</code>命令声明一个数组，也是可以的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -a ARRAYNAME</span><br></pre></td></tr></table></figure><p><code>read -a</code>命令则是将用户的命令行输入，存入一个数组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">read</span> -a dice</span><br></pre></td></tr></table></figure><p>上面命令将用户的命令行输入，存入数组<code>dice</code>。</p><h2 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h2><h3 id="读取单个元素"><a href="#读取单个元素" class="headerlink" title="读取单个元素"></a>读取单个元素</h3><p>读取数组指定位置的成员，要使用下面的语法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;array[i]&#125;</span>     <span class="comment"># i 是索引</span></span><br></pre></td></tr></table></figure><p>上面语法里面的大括号是必不可少的，否则 Bash 会把索引部分<code>[i]</code>按照原样输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ array[0]=a</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;array[0]&#125;</span></span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$array</span>[0]</span><br><span class="line">a[0]</span><br></pre></td></tr></table></figure><p>上面例子中，数组的第一个元素是<code>a</code>。如果不加大括号，Bash 会直接读取<code>$array</code>首成员的值，然后将<code>[0]</code>按照原样输出。</p><h3 id="读取所有成员"><a href="#读取所有成员" class="headerlink" title="读取所有成员"></a>读取所有成员</h3><p><code>@</code>和<code>*</code>是数组的特殊索引，表示返回数组的所有成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ foo=(a b c d e f)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo[@]&#125;</span></span><br><span class="line">a b c d e f</span><br></pre></td></tr></table></figure><p>这两个特殊索引配合<code>for</code>循环，就可以用来遍历数组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;names[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>@</code>和<code>*</code>放不放在双引号之中，是有差别的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ activities=( swimming <span class="string">&quot;water skiing&quot;</span> canoeing <span class="string">&quot;white-water rafting&quot;</span> surfing )</span><br><span class="line">$ <span class="keyword">for</span> act <span class="keyword">in</span> <span class="variable">$&#123;activities[@]&#125;</span>; \</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Activity: <span class="variable">$act</span>&quot;</span>; \</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">Activity: swimming</span><br><span class="line">Activity: water</span><br><span class="line">Activity: skiing</span><br><span class="line">Activity: canoeing</span><br><span class="line">Activity: white-water</span><br><span class="line">Activity: rafting</span><br><span class="line">Activity: surfing</span><br></pre></td></tr></table></figure><p>上面的例子中，数组<code>activities</code>实际包含5个成员，但是<code>for...in</code>循环直接遍历<code>$&#123;activities[@]&#125;</code>，导致返回7个结果。为了避免这种情况，一般把<code>$&#123;activities[@]&#125;</code>放在双引号之中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> act <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;activities[@]&#125;</span>&quot;</span>; \</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Activity: <span class="variable">$act</span>&quot;</span>; \</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">Activity: swimming</span><br><span class="line">Activity: water skiing</span><br><span class="line">Activity: canoeing</span><br><span class="line">Activity: white-water rafting</span><br><span class="line">Activity: surfing</span><br></pre></td></tr></table></figure><p>上面例子中，<code>$&#123;activities[@]&#125;</code>放在双引号之中，遍历就会返回正确的结果。</p><p><code>$&#123;activities[*]&#125;</code>不放在双引号之中，跟<code>$&#123;activities[@]&#125;</code>不放在双引号之中是一样的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> act <span class="keyword">in</span> <span class="variable">$&#123;activities[*]&#125;</span>; \</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Activity: <span class="variable">$act</span>&quot;</span>; \</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">Activity: swimming</span><br><span class="line">Activity: water</span><br><span class="line">Activity: skiing</span><br><span class="line">Activity: canoeing</span><br><span class="line">Activity: white-water</span><br><span class="line">Activity: rafting</span><br><span class="line">Activity: surfing</span><br></pre></td></tr></table></figure><p><code>$&#123;activities[*]&#125;</code>放在双引号之中，所有成员就会变成单个字符串返回。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> act <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;activities[*]&#125;</span>&quot;</span>; \</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Activity: <span class="variable">$act</span>&quot;</span>; \</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">Activity: swimming water skiing canoeing white-water rafting surfing</span><br></pre></td></tr></table></figure><p>所以，拷贝一个数组的最方便方法，就是写成下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hobbies=( <span class="string">&quot;<span class="variable">$&#123;activities[@]&#125;</span>&quot;</span> )</span><br></pre></td></tr></table></figure><p>上面例子中，数组<code>activities</code>被拷贝给了另一个数组<code>hobbies</code>。</p><p>这种写法也可以用来为新数组添加成员。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hobbies=( <span class="string">&quot;<span class="variable">$&#123;activities[@]&#125;</span>&quot;</span> diving )</span><br></pre></td></tr></table></figure><p>上面例子中，新数组<code>hobbies</code>在数组<code>activities</code>的所有成员之后，又添加了一个成员。</p><h3 id="默认位置"><a href="#默认位置" class="headerlink" title="默认位置"></a>默认位置</h3><p>如果读取数组成员时，没有读取指定哪一个位置的成员，默认使用<code>0</code>号位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -a foo</span><br><span class="line">$ foo=A</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo[0]&#125;</span></span><br><span class="line">A</span><br></pre></td></tr></table></figure><p>上面例子中，<code>foo</code>是一个数组，赋值的时候不指定位置，实际上是给<code>foo[0]</code>赋值。</p><p>引用一个不带下标的数组变量，则引用的是<code>0</code>号位置的数组元素。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ foo=(a b c d e f)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo&#125;</span></span><br><span class="line">a</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure><p>上面例子中，引用数组元素的时候，没有指定位置，结果返回的是<code>0</code>号位置。</p><h2 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h2><p>要想知道数组的长度（即一共包含多少成员），可以使用下面两种语法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;#array[*]&#125;</span></span><br><span class="line"><span class="variable">$&#123;#array[@]&#125;</span></span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ a[100]=foo</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;#a[*]&#125;</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;#a[@]&#125;</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>上面例子中，把字符串赋值给<code>100</code>位置的数组元素，这时的数组只有一个元素。</p><p>注意，如果用这种语法去读取具体的数组成员，就会返回该成员的字符串长度。这一点必须小心。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ a[100]=foo</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;#a[100]&#125;</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>上面例子中，&#96;$</p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash 函数</title>
      <link href="/2016/09/29/%E5%87%BD%E6%95%B0/"/>
      <url>/2016/09/29/%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>本章介绍 Bash 函数的用法。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>函数（function）是可以重复使用的代码片段，有利于代码的复用。它与别名（alias）的区别是，别名只适合封装简单的单个命令，函数则可以封装复杂的多行命令。</p><p>函数总是在当前 Shell 执行，这是跟脚本的一个重大区别，Bash 会新建一个子 Shell 执行脚本。如果函数与脚本同名，函数会优先执行。但是，函数的优先级不如别名，即如果函数与别名同名，那么别名优先执行。</p><span id="more"></span><p>Bash 函数定义的语法有两种。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种</span></span><br><span class="line"><span class="function"><span class="title">fn</span></span>() &#123;</span><br><span class="line">  <span class="comment"># codes</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>() &#123;</span><br><span class="line">  <span class="comment"># codes</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>fn</code>是自定义的函数名，函数代码就写在大括号之中。这两种写法是等价的。</p><p>下面是一个简单函数的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">hello</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$1</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，函数体里面的<code>$1</code>表示函数调用时的第一个参数。</p><p>调用时，就直接写函数名，参数跟在函数名后面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hello world</span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure><p>下面是一个多行函数的例子，显示当前日期时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">today</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> -n <span class="string">&quot;Today&#x27;s date is: &quot;</span></span><br><span class="line">  <span class="built_in">date</span> +<span class="string">&quot;%A, %B %-d, %Y&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除一个函数，可以使用<code>unset</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> -f functionName</span><br></pre></td></tr></table></figure><p>查看当前 Shell 已经定义的所有函数，可以使用<code>declare</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -f</span><br></pre></td></tr></table></figure><p>上面的<code>declare</code>命令不仅会输出函数名，还会输出所有定义。输出顺序是按照函数名的字母表顺序。由于会输出很多内容，最好通过管道命令配合<code>more</code>或<code>less</code>使用。</p><p><code>declare</code>命令还支持查看单个函数的定义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -f functionName</span><br></pre></td></tr></table></figure><p><code>declare -F</code>可以输出所有已经定义的函数名，不含函数体。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -F</span><br></pre></td></tr></table></figure><h2 id="参数变量"><a href="#参数变量" class="headerlink" title="参数变量"></a>参数变量</h2><p>函数体内可以使用参数变量，获取函数参数。函数的参数变量，与脚本参数变量是一致的。</p><ul><li><code>$1</code>~&#96;$9&#96;：函数的第一个到第9个的参数。</li><li><code>$0</code>：函数所在的脚本名。</li><li><code>$#</code>：函数的参数总数。</li><li><code>$@</code>：函数的全部参数，参数之间使用空格分隔。</li><li><code>$*</code>：函数的全部参数，参数之间使用变量<code>$IFS</code>值的第一个字符分隔，默认为空格，但是可以自定义。</li></ul><p>如果函数的参数多于9个，那么第10个参数可以用<code>$&#123;10&#125;</code>的形式引用，以此类推。</p><p>下面是一个示例脚本<code>test.sh</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># test.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> alice &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;alice: <span class="variable">$@</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$0</span>: <span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$3</span> <span class="variable">$4</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$#</span> arguments&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alice <span class="keyword">in</span> wonderland</span><br></pre></td></tr></table></figure><p>运行该脚本，结果如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ bash test.sh</span><br><span class="line">alice: <span class="keyword">in</span> wonderland</span><br><span class="line">test.sh: <span class="keyword">in</span> wonderland</span><br><span class="line">2 arguments</span><br></pre></td></tr></table></figure><p>上面例子中，由于函数<code>alice</code>只有第一个和第二个参数，所以第三个和第四个参数为空。</p><p>下面是一个日志函数的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> log_msg &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;[`date &#x27;+ %F %T&#x27;` ]: <span class="variable">$@</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ log_msg <span class="string">&quot;This is sample log message&quot;</span></span><br><span class="line">[ 2018-08-16 19:56:34 ]: This is sample <span class="built_in">log</span> message</span><br></pre></td></tr></table></figure><h2 id="return-命令"><a href="#return-命令" class="headerlink" title="return 命令"></a>return 命令</h2><p><code>return</code>命令用于从函数返回一个值。函数执行到这条命令，就不再往下执行了，直接返回了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> func_return_value &#123;</span><br><span class="line">  <span class="built_in">return</span> 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数将返回值返回给调用者。如果命令行直接执行函数，下一个命令可以用<code>$?</code>拿到返回值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ func_return_value</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Value returned by function is: $?&quot;</span></span><br><span class="line">Value returned by <span class="keyword">function</span> is: 10</span><br></pre></td></tr></table></figure><p><code>return</code>后面不跟参数，只用于返回也是可以的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> name &#123;</span><br><span class="line">  commands</span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局变量和局部变量，local-命令"><a href="#全局变量和局部变量，local-命令" class="headerlink" title="全局变量和局部变量，local 命令"></a>全局变量和局部变量，local 命令</h2><p>Bash 函数体内直接声明的变量，属于全局变量，整个脚本都可以读取。这一点需要特别小心。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 脚本 test.sh</span></span><br><span class="line"><span class="function"><span class="title">fn</span></span> () &#123;</span><br><span class="line">  foo=1</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;fn: foo = <span class="variable">$foo</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;global: foo = <span class="variable">$foo</span>&quot;</span></span><br></pre></td></tr></table></figure><p>上面脚本的运行结果如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash test.sh</span><br><span class="line">fn: foo = 1</span><br><span class="line">global: foo = 1</span><br></pre></td></tr></table></figure><p>上面例子中，变量<code>$foo</code>是在函数<code>fn</code>内部声明的，函数体外也可以读取。</p><p>函数体内不仅可以声明全局变量，还可以修改全局变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">foo=1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">fn</span></span> () &#123;</span><br><span class="line">  foo=2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$foo</span></span><br></pre></td></tr></table></figure><p>上面代码执行后，输出的变量<code>$foo</code>值为2。</p><p>函数里面可以用<code>local</code>命令声明局部变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># 脚本 test.sh</span></span><br><span class="line"><span class="function"><span class="title">fn</span></span> () &#123;</span><br><span class="line">  <span class="built_in">local</span> foo</span><br><span class="line">  foo=1</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;fn: foo = <span class="variable">$foo</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;global: foo = <span class="variable">$foo</span>&quot;</span></span><br></pre></td></tr></table></figure><p>上面脚本的运行结果如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash test.sh</span><br><span class="line">fn: foo = 1</span><br><span class="line">global: foo =</span><br></pre></td></tr></table></figure><p>上面例子中，<code>local</code>命令声明的<code>$foo</code>变量，只在函数体内有效，函数体外没有定义。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.linuxtechi.com/define-use-functions-linux-shell-script/">How to define and use functions in Linux Shell Script</a>, by Pradeep Kumar</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2016/09/26/%E7%AC%94%E8%AE%B0/"/>
      <url>/2016/09/26/%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ul><li><p>一、“你错了……我们这些人，在金钱面前，根本连做奴隶的资格都没有！……是钱把我们变成了生活的奴隶，我们是生活的奴隶，没有资格做钱的奴隶。”</p></li><li><p>二、夜越深，海边便越显得深邃，这种深邃不是一种禁锢，反而会解放人的思想，让人不自觉去想一些超越了生活范畴的事情，比如，爱情到底是什么？是一只彩色的蝴蝶？开了屏的孔雀？或者，单单只是一种心花怒放的感觉；悲观一点去想：也许这个世界上并没有真正意义上的爱情，因为它已经是一种超越生命的信仰，而我们活在被欲望堆砌的世界里，终究只是一介凡人。</p></li><li><p>三、如果，我是无所不能的神就好了，我要用手上的裁决之杖，荡清这个世界上的一切不公平和满是罪孽之人……</p></li><li><p>四、“生活不就是一个麻烦接一个麻烦嘛，其实没有必要低落，因为等你解决了这个麻烦之后，你再回头看的时候，你会特别有成就感，而且会给自己更多的认同感；所以，活在当下，努力向前，就对了……”</p></li><li><p>五、我们为什么要活着？而同一具躯体活着和死了又到底有什么区别？活着是为了死去吗？死去之后，又是否有重生？</p></li><li><p>六、“为什么爱情就不能变得简单一些呢？喜欢就在一起，不喜欢就拒绝，这样瞻前顾后、来来回回，真的让人觉得疲倦！”</p></li><li><p>七、“因为我们活在一个复杂的世界里，而爱情本身就是一个随波逐流的东西，它只是时代的附属品，所以当下的爱情要靠金钱去实现……你说对吗？”</p></li><li><p>八、我从来没有像此时这么困惑过，我已经忘了爱情存在的意义，因为这个世界上有太多的曲折离奇，将本该存在于男人和女人之间的真情弄得面目全非，继而造出了一个又一个的感情悲剧</p></li><li><p>九、我们都不想痛苦的活着，可痛苦却无处不在：饥饿、失业、失恋、破财、病痛、孤独、家破、离别、欺压、背叛、战争、杀戮、颠沛、流离、死亡……每一个词，都是诛心的杀器；所以，人死了，一定都会去天堂，不要问地狱在哪里，人间就是地狱。</p></li><li><p>十、因为我不知道在这个一个极其复杂的世界里，到底该怎么去定义好人和坏人？我甚至不确定自己是好是坏，或者换个方式说，我本质是好的，可是因为某些原因，却被贴上了坏的标签，我撕不掉这个标签，索性自甘堕落，越来越坏……我用力甩了甩头，这才猛然清醒了过来：人都是在为了立场活着，为什么一定要去分所谓的好坏呢？</p></li><li><p>十一、人就是一列永不停止的火车，有时驶过山区，有时驶过平原，有时沿海行驶，不一样的风景，会造就不一样的心情，不一样的心情之下又会做出不一样的选择，你可以想象一下，当无数辆列车行驶在没有边际的土地上，你能找到一个固定的点，或是方向吗？……人就是这样，走一步一个变化，所以，我们总是习惯去说：走一步看一步.也有一些曾经让你绝对信任的人，忽然有一天就对你疏远了，你们渐渐开始变得不联系，最后甚至会变成仇人、敌人……这些，都是因为人在变，只要思想不静止，人就一定会变。</p></li><li><p>十二、“我真的是你在这个世界上最爱的人吗？”“你是我在这个世界上最爱的人，但我却不是这个世界上最爱你的人。”</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环</title>
      <link href="/2016/08/31/%E5%BE%AA%E7%8E%AF/"/>
      <url>/2016/08/31/%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<p>Bash 提供三种循环语法<code>for</code>、<code>while</code>和<code>until</code>。</p><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p><code>while</code>循环有一个判断条件，只要符合条件，就不断循环执行指定的语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition; <span class="keyword">do</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面代码中，只要满足条件<code>condition</code>，就会执行命令<code>commands</code>。然后，再次判断是否满足条件<code>condition</code>，只要满足，就会一直执行下去。只有不满足条件，才会退出循环。</p><p>循环条件<code>condition</code>可以使用<code>test</code>命令，跟<code>if</code>结构的判断条件写法一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">number=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$number</span>&quot;</span> -lt 10 ]; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Number = <span class="variable">$number</span>&quot;</span></span><br><span class="line">  number=$((number + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面例子中，只要变量<code>$number</code>小于10，就会不断加1，直到<code>$number</code>等于10，然后退出循环。</p><p>关键字<code>do</code>可以跟<code>while</code>不在同一行，这时两者之间不需要使用分号分隔。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;Hi, while looping ...&#x27;</span>;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面的例子会无限循环，可以按下 Ctrl + c 停止。</p><p><code>while</code>循环写成一行，也是可以的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&#x27;Hi, while looping ...&#x27;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>while</code>的条件部分也可以是执行一个命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">while</span> <span class="built_in">echo</span> <span class="string">&#x27;ECHO&#x27;</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&#x27;Hi, while looping ...&#x27;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面例子中，判断条件是<code>echo &#39;ECHO&#39;</code>。由于这个命令总是执行成功，所以上面命令会产生无限循环。</p><p><code>while</code>的条件部分可以执行任意数量的命令，但是执行结果的真伪只看最后一个命令的执行结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">while</span> <span class="literal">true</span>; <span class="literal">false</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&#x27;Hi, looping ...&#x27;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面代码运行后，不会有任何输出，因为<code>while</code>的最后一个命令是<code>false</code>。</p><span id="more"></span><h2 id="until-循环"><a href="#until-循环" class="headerlink" title="until 循环"></a>until 循环</h2><p><code>until</code>循环与<code>while</code>循环恰好相反，只要不符合判断条件（判断条件失败），就不断循环执行指定的语句。一旦符合判断条件，就退出循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">until condition; <span class="keyword">do</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>关键字<code>do</code>可以与<code>until</code>不写在同一行，这时两者之间不需要分号分隔。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ until <span class="literal">false</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&#x27;Hi, until looping ...&#x27;</span>; <span class="keyword">done</span></span><br><span class="line">Hi, until looping ...</span><br><span class="line">Hi, until looping ...</span><br><span class="line">Hi, until looping ...</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>上面代码中，<code>until</code>的部分一直为<code>false</code>，导致命令无限运行，必须按下 Ctrl + c 终止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">number=0</span><br><span class="line">until [ <span class="string">&quot;<span class="variable">$number</span>&quot;</span> -ge 10 ]; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Number = <span class="variable">$number</span>&quot;</span></span><br><span class="line">  number=$((number + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面例子中，只要变量<code>number</code>小于10，就会不断加1，直到<code>number</code>大于等于10，就退出循环。</p><p><code>until</code>的条件部分也可以是一个命令，表示在这个命令执行成功之前，不断重复尝试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until <span class="built_in">cp</span> <span class="variable">$1</span> <span class="variable">$2</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;Attempt to copy failed. waiting...&#x27;</span></span><br><span class="line">  <span class="built_in">sleep</span> 5</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面例子表示，只要<code>cp $1 $2</code>这个命令执行不成功，就5秒钟后再尝试一次，直到成功为止。</p><p><code>until</code>循环都可以转为<code>while</code>循环，只要把条件设为否定即可。上面这个例子可以改写如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ! <span class="built_in">cp</span> <span class="variable">$1</span> <span class="variable">$2</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;Attempt to copy failed. waiting...&#x27;</span></span><br><span class="line">  <span class="built_in">sleep</span> 5</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>一般来说，<code>until</code>用得比较少，完全可以统一都使用<code>while</code>。</p><h2 id="for…in-循环"><a href="#for…in-循环" class="headerlink" title="for…in 循环"></a>for…in 循环</h2><p><code>for...in</code>循环用于遍历列表的每一项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> list</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面语法中，<code>for</code>循环会依次从<code>list</code>列表中取出一项，作为变量<code>variable</code>，然后在循环体中进行处理。</p><p>关键词<code>do</code>可以跟<code>for</code>写在同一行，两者使用分号分隔。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> list; <span class="keyword">do</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> word1 word2 word3; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>word1 word2 word3</code>是一个包含三个单词的列表，变量<code>i</code>依次等于<code>word1</code>、<code>word2</code>、<code>word3</code>，命令<code>echo $i</code>则会相应地执行三次。</p><p>列表可以由通配符产生。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> *.png; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">ls</span> -l <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>*.png</code>会替换成当前目录中所有 PNG 图片文件，变量<code>i</code>会依次等于每一个文件。</p><p>列表也可以通过子命令产生。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">count=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">cat</span> ~/.bash_profile); <span class="keyword">do</span></span><br><span class="line">  count=$((count + <span class="number">1</span>))</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Word <span class="variable">$count</span> (<span class="variable">$i</span>) contains <span class="subst">$(echo -n $i | wc -c)</span> characters&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>cat ~/.bash_profile</code>命令会输出<code>~/.bash_profile</code>文件的内容，然后通过遍历每一个词，计算该文件一共包含多少个词，以及每个词有多少个字符。</p><p><code>in list</code>的部分可以省略，这时<code>list</code>默认等于脚本的所有参数<code>$@</code>。但是，为了可读性，最好还是不要省略，参考下面的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> filename; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$filename</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span> ; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$filename</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>在函数体中也是一样的，<code>for...in</code>循环省略<code>in list</code>的部分，则<code>list</code>默认等于函数的所有参数。</p><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p><code>for</code>循环还支持 C 语言的循环语法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( expression1; expression2; expression3 )); <span class="keyword">do</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>expression1</code>用来初始化循环条件，<code>expression2</code>用来决定循环结束的条件，<code>expression3</code>在每次循环迭代的末尾执行，用于更新值。</p><p>注意，循环条件放在双重圆括号之中。另外，圆括号之中使用变量，不必加上美元符号<code>$</code>。</p><p>它等同于下面的<code>while</code>循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(( expression1 ))</span><br><span class="line"><span class="keyword">while</span> (( expression2 )); <span class="keyword">do</span></span><br><span class="line">  commands</span><br><span class="line">  (( expression3 ))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( i=0; i&lt;5; i=i+1 )); <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面代码中，初始化变量<code>i</code>的值为0，循环执行的条件是<code>i</code>小于5。每次循环迭代结束时，<code>i</code>的值加1。</p><p><code>for</code>条件部分的三个语句，都可以省略。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((;;))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">read</span> var</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$var</span>&quot;</span> = <span class="string">&quot;.&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面脚本会反复读取命令行输入，直到用户输入了一个点（<code>.</code>）为止，才会跳出循环。</p><h2 id="break，continue"><a href="#break，continue" class="headerlink" title="break，continue"></a>break，continue</h2><p>Bash 提供了两个内部命令<code>break</code>和<code>continue</code>，用来在循环内部跳出循环。</p><p><code>break</code>命令立即终止循环，程序继续执行循环块之后的语句，即不再执行剩下的循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> 1 2 3 4 5 6</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;number is <span class="variable">$number</span>&quot;</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$number</span>&quot;</span> = <span class="string">&quot;3&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面例子只会打印3行结果。一旦变量<code>$number</code>等于3，就会跳出循环，不再继续执行。</p><p><code>continue</code>命令立即终止本轮循环，开始执行下一轮循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> -p <span class="string">&quot;What file do you want to test?&quot;</span> filename</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ ! -e <span class="string">&quot;<span class="variable">$filename</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;The file does not exist.&quot;</span></span><br><span class="line">    <span class="built_in">continue</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;You entered a valid file..&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面例子中，只要用户输入的文件不存在，<code>continue</code>命令就会生效，直接进入下一轮循环（让用户重新输入文件名），不再执行后面的打印语句。</p><h2 id="select-结构"><a href="#select-结构" class="headerlink" title="select 结构"></a>select 结构</h2><p><code>select</code>结构主要用来生成简单的菜单。它的语法与<code>for...in</code>循环基本一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select name</span><br><span class="line">[<span class="keyword">in</span> list]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  commands</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>Bash 会对<code>select</code>依次进行下面的处理。</p><ol><li><code>select</code>生成一个菜单，内容是列表<code>list</code>的每一项，并且每一项前面还有一个数字编号。</li><li>Bash 提示用户选择一项，输入它的编号。</li><li>用户输入以后，Bash 会将该项的内容存在变量<code>name</code>，该项的编号存入环境变量<code>REPLY</code>。如果用户没有输入，就按回车键，Bash 会重新输出菜单，让用户选择。</li><li>执行命令体<code>commands</code>。</li><li>执行结束后，回到第一步，重复这个过程。</li></ol><p>下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># select.sh</span></span><br><span class="line"></span><br><span class="line">select brand <span class="keyword">in</span> Samsung Sony iphone symphony Walton</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;You have chosen <span class="variable">$brand</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>执行上面的脚本，Bash 会输出一个品牌的列表，让用户选择。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./select.sh</span><br><span class="line">1) Samsung</span><br><span class="line">2) Sony</span><br><span class="line">3) iphone</span><br><span class="line">4) symphony</span><br><span class="line">5) Walton</span><br><span class="line"><span class="comment">#?</span></span><br></pre></td></tr></table></figure><p>如果用户没有输入编号，直接按回车键。Bash 就会重新输出一遍这个菜单，直到用户按下<code>Ctrl + c</code>，退出执行。</p><p><code>select</code>可以与<code>case</code>结合，针对不同项，执行不同的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Which Operating System do you like?&quot;</span></span><br><span class="line"></span><br><span class="line">select os <span class="keyword">in</span> Ubuntu LinuxMint Windows8 Windows10 WindowsXP</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$os</span> <span class="keyword">in</span></span><br><span class="line">    <span class="string">&quot;Ubuntu&quot;</span>|<span class="string">&quot;LinuxMint&quot;</span>)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;I also use <span class="variable">$os</span>.&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">    <span class="string">&quot;Windows8&quot;</span> | <span class="string">&quot;Windows10&quot;</span> | <span class="string">&quot;WindowsXP&quot;</span>)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Why don&#x27;t you try Linux?&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Invalid entry.&quot;</span></span><br><span class="line">      <span class="built_in">break</span></span><br><span class="line">    ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>case</code>针对用户选择的不同项，执行不同的命令。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://linuxhint.com/bash_select_command/">Bash Select Command</a>, Fahmida Yesmin</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>条件判断</title>
      <link href="/2016/07/22/%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/"/>
      <url>/2016/07/22/%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<p>本章介绍 Bash 脚本的条件判断语法。</p><h2 id="if-结构"><a href="#if-结构" class="headerlink" title="if 结构"></a>if 结构</h2><p><code>if</code>是最常用的条件判断结构，只有符合给定条件时，才会执行指定的命令。它的语法如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> commands; <span class="keyword">then</span></span><br><span class="line">  commands</span><br><span class="line">[<span class="keyword">elif</span> commands; <span class="keyword">then</span></span><br><span class="line">  commands...]</span><br><span class="line">[<span class="keyword">else</span></span><br><span class="line">  commands]</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这个命令分成三个部分：<code>if</code>、<code>elif</code>和<code>else</code>。其中，后两个部分是可选的。</p><span id="more"></span><p><code>if</code>关键字后面是主要的判断条件，<code>elif</code>用来添加在主条件不成立时的其他判断条件，<code>else</code>则是所有条件都不成立时要执行的部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$USER</span> = <span class="string">&quot;foo&quot;</span>; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Hello foo.&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;You are not foo.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面的例子中，判断条件是环境变量<code>$USER</code>是否等于<code>foo</code>，如果等于就输出<code>Hello foo.</code>，否则输出其他内容。</p><p><code>if</code>和<code>then</code>写在同一行时，需要分号分隔。分号是 Bash 的命令分隔符。它们也可以写成两行，这时不需要分号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;it is false&#x27;</span> <span class="comment"># 本行不会执行</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面的例子中，<code>true</code>和<code>false</code>是两个特殊命令，前者代表操作成功，后者代表操作失败。<code>if true</code>意味着命令部分总是会执行，<code>if false</code>意味着命令部分永远不会执行。</p><p>除了多行的写法，<code>if</code>结构也可以写成单行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">if</span> <span class="literal">true</span>; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span>; <span class="keyword">fi</span></span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">if</span> <span class="literal">false</span>; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;It&#x27;s true.&quot;</span>; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>注意，<code>if</code>关键字后面也可以是一条命令，该条命令执行成功（返回值<code>0</code>），就意味着判断条件成立。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">if</span> <span class="built_in">echo</span> <span class="string">&#x27;hi&#x27;</span>; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span>; <span class="keyword">fi</span></span><br><span class="line">hi</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>上面命令中，<code>if</code>后面是一条命令<code>echo &#39;hi&#39;</code>。该命令会执行，如果返回值是<code>0</code>，则执行<code>then</code>的部分。</p><p><code>if</code>后面可以跟任意数量的命令。这时，所有命令都会执行，但是判断真伪只看最后一个命令，即使前面所有命令都失败，只要最后一个命令返回<code>0</code>，就会执行<code>then</code>的部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">if</span> <span class="literal">false</span>; <span class="literal">true</span>; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span>; <span class="keyword">fi</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>上面例子中，<code>if</code>后面有两条命令（<code>false;true;</code>），第二条命令（<code>true</code>）决定了<code>then</code>的部分是否会执行。</p><p><code>elif</code>部分可以有多个。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;输入一个1到3之间的数字（包含两端）&gt; &quot;</span></span><br><span class="line"><span class="built_in">read</span> character</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$character</span>&quot;</span> = <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> 1</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$character</span>&quot;</span> = <span class="string">&quot;2&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> 2</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$character</span>&quot;</span> = <span class="string">&quot;3&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> 3</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> 输入不符合要求</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面例子中，如果用户输入<code>3</code>，就会连续判断3次。</p><h2 id="test-命令"><a href="#test-命令" class="headerlink" title="test 命令"></a>test 命令</h2><p><code>if</code>结构的判断条件，一般使用<code>test</code>命令，有三种形式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line"><span class="built_in">test</span> expression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line">[ expression ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法三</span></span><br><span class="line">[[ expression ]]</span><br></pre></td></tr></table></figure><p>上面三种形式是等价的，但是第三种形式还支持正则判断，前两种不支持。</p><p>上面的<code>expression</code>是一个表达式。这个表达式为真，<code>test</code>命令执行成功（返回值为<code>0</code>）；表达式为伪，<code>test</code>命令执行失败（返回值为<code>1</code>）。注意，第二种和第三种写法，<code>[</code>和<code>]</code>与内部的表达式之间必须有空格。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">test</span> -f /etc/hosts</span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">$ [ -f /etc/hosts ]</span><br><span class="line">$  <span class="built_in">echo</span> $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>上面的例子中，<code>test</code>命令采用两种写法，判断<code>/etc/hosts</code>文件是否存在，这两种写法是等价的。命令执行后，返回值为<code>0</code>，表示该文件确实存在。</p><p>实际上，<code>[</code>这个字符是<code>test</code>命令的一种简写形式，可以看作是一个独立的命令，这解释了为什么它后面必须有空格。</p><p>下面把<code>test</code>命令的三种形式，用在<code>if</code>结构中，判断一个文件是否存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e /tmp/foo.txt ; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Found foo.txt&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line"><span class="keyword">if</span> [ -e /tmp/foo.txt ] ; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Found foo.txt&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法三</span></span><br><span class="line"><span class="keyword">if</span> [[ -e /tmp/foo.txt ]] ; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Found foo.txt&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="判断表达式"><a href="#判断表达式" class="headerlink" title="判断表达式"></a>判断表达式</h2><p><code>if</code>关键字后面，跟的是一个命令。这个命令可以是<code>test</code>命令，也可以是其他命令。命令的返回值为<code>0</code>表示判断成立，否则表示不成立。因为这些命令主要是为了得到返回值，所以可以视为表达式。</p><p>常用的判断表达式有下面这些。</p><h3 id="文件判断"><a href="#文件判断" class="headerlink" title="文件判断"></a>文件判断</h3><p>以下表达式用来判断文件状态。</p><ul><li><code>[ -a file ]</code>：如果 file 存在，则为<code>true</code>。</li><li><code>[ -b file ]</code>：如果 file 存在并且是一个块（设备）文件，则为<code>true</code>。</li><li><code>[ -c file ]</code>：如果 file 存在并且是一个字符（设备）文件，则为<code>true</code>。</li><li><code>[ -d file ]</code>：如果 file 存在并且是一个目录，则为<code>true</code>。</li><li><code>[ -e file ]</code>：如果 file 存在，则为<code>true</code>。</li><li><code>[ -f file ]</code>：如果 file 存在并且是一个普通文件，则为<code>true</code>。</li><li><code>[ -g file ]</code>：如果 file 存在并且设置了组 ID，则为<code>true</code>。</li><li><code>[ -G file ]</code>：如果 file 存在并且属于有效的组 ID，则为<code>true</code>。</li><li><code>[ -h file ]</code>：如果 file 存在并且是符号链接，则为<code>true</code>。</li><li><code>[ -k file ]</code>：如果 file 存在并且设置了它的“sticky bit”，则为<code>true</code>。</li><li><code>[ -L file ]</code>：如果 file 存在并且是一个符号链接，则为<code>true</code>。</li><li><code>[ -N file ]</code>：如果 file 存在并且自上次读取后已被修改，则为<code>true</code>。</li><li><code>[ -O file ]</code>：如果 file 存在并且属于有效的用户 ID，则为<code>true</code>。</li><li><code>[ -p file ]</code>：如果 file 存在并且是一个命名管道，则为<code>true</code>。</li><li><code>[ -r file ]</code>：如果 file 存在并且可读（当前用户有可读权限），则为<code>true</code>。</li><li><code>[ -s file ]</code>：如果 file 存在且其长度大于零，则为<code>true</code>。</li><li><code>[ -S file ]</code>：如果 file 存在且是一个网络 socket，则为<code>true</code>。</li><li><code>[ -t fd ]</code>：如果 fd 是一个文件描述符，并且重定向到终端，则为<code>true</code>。 这可以用来判断是否重定向了标准输入／输出／错误。</li><li><code>[ -u file ]</code>：如果 file 存在并且设置了 setuid 位，则为<code>true</code>。</li><li><code>[ -w file ]</code>：如果 file 存在并且可写（当前用户拥有可写权限），则为<code>true</code>。</li><li><code>[ -x file ]</code>：如果 file 存在并且可执行（有效用户有执行／搜索权限），则为<code>true</code>。</li><li><code>[ FILE1 -nt FILE2 ]</code>：如果 FILE1 比 FILE2 的更新时间更近，或者 FILE1 存在而 FILE2 不存在，则为<code>true</code>。</li><li><code>[ FILE1 -ot FILE2 ]</code>：如果 FILE1 比 FILE2 的更新时间更旧，或者 FILE2 存在而 FILE1 不存在，则为<code>true</code>。</li><li><code>[ FILE1 -ef FILE2 ]</code>：如果 FILE1 和 FILE2 引用相同的设备和 inode 编号，则为<code>true</code>。</li></ul><p>下面是一个示例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">FILE=~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="string">&quot;<span class="variable">$FILE</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$FILE</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$FILE</span> is a regular file.&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$FILE</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$FILE</span> is a directory.&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -r <span class="string">&quot;<span class="variable">$FILE</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$FILE</span> is readable.&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -w <span class="string">&quot;<span class="variable">$FILE</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$FILE</span> is writable.&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -x <span class="string">&quot;<span class="variable">$FILE</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$FILE</span> is executable/searchable.&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$FILE</span> does not exist&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>$FILE</code>要放在双引号之中，这样可以防止变量<code>$FILE</code>为空，从而出错。因为<code>$FILE</code>如果为空，这时<code>[ -e $FILE ]</code>就变成<code>[ -e ]</code>，这会被判断为真。而<code>$FILE</code>放在双引号之中，<code>[ -e &quot;$FILE&quot; ]</code>就变成<code>[ -e &quot;&quot; ]</code>，这会被判断为伪。</p><h3 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h3><p>以下表达式用来判断字符串。</p><ul><li><code>[ string ]</code>：如果<code>string</code>不为空（长度大于0），则判断为真。</li><li><code>[ -n string ]</code>：如果字符串<code>string</code>的长度大于零，则判断为真。</li><li><code>[ -z string ]</code>：如果字符串<code>string</code>的长度为零，则判断为真。</li><li><code>[ string1 = string2 ]</code>：如果<code>string1</code>和<code>string2</code>相同，则判断为真。</li><li><code>[ string1 == string2 ]</code> 等同于<code>[ string1 = string2 ]</code>。</li><li><code>[ string1 != string2 ]</code>：如果<code>string1</code>和<code>string2</code>不相同，则判断为真。</li><li><code>[ string1 &#39;&gt;&#39; string2 ]</code>：如果按照字典顺序<code>string1</code>排列在<code>string2</code>之后，则判断为真。</li><li><code>[ string1 &#39;&lt;&#39; string2 ]</code>：如果按照字典顺序<code>string1</code>排列在<code>string2</code>之前，则判断为真。</li></ul><p>注意，<code>test</code>命令内部的<code>&gt;</code>和<code>&lt;</code>，必须用引号引起来（或者是用反斜杠转义）。否则，它们会被 shell 解释为重定向操作符。</p><p>下面是一个示例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ANSWER=maybe</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$ANSWER</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;There is no answer.&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ANSWER</span>&quot;</span> = <span class="string">&quot;yes&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;The answer is YES.&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$ANSWER</span>&quot;</span> = <span class="string">&quot;no&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;The answer is NO.&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$ANSWER</span>&quot;</span> = <span class="string">&quot;maybe&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;The answer is MAYBE.&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;The answer is UNKNOWN.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面代码中，首先确定<code>$ANSWER</code>字符串是否为空。如果为空，就终止脚本，并把退出状态设为<code>1</code>。注意，这里的<code>echo</code>命令把错误信息<code>There is no answer.</code>重定向到标准错误，这是处理错误信息的常用方法。如果<code>$ANSWER</code>字符串不为空，就判断它的值是否等于<code>yes</code>、<code>no</code>或者<code>maybe</code>。</p><p>注意，字符串判断时，变量要放在双引号之中，比如<code>[ -n &quot;$COUNT&quot; ]</code>，否则变量替换成字符串以后，<code>test</code>命令可能会报错，提示参数过多。另外，如果不放在双引号之中，变量为空时，命令会变成<code>[ -n ]</code>，这时会判断为真。如果放在双引号之中，<code>[ -n &quot;&quot; ]</code>就判断为伪。</p><h3 id="整数判断"><a href="#整数判断" class="headerlink" title="整数判断"></a>整数判断</h3><p>下面的表达式用于判断整数。</p><ul><li><code>[ integer1 -eq integer2 ]</code>：如果<code>integer1</code>等于<code>integer2</code>，则为<code>true</code>。</li><li><code>[ integer1 -ne integer2 ]</code>：如果<code>integer1</code>不等于<code>integer2</code>，则为<code>true</code>。</li><li><code>[ integer1 -le integer2 ]</code>：如果<code>integer1</code>小于或等于<code>integer2</code>，则为<code>true</code>。</li><li><code>[ integer1 -lt integer2 ]</code>：如果<code>integer1</code>小于<code>integer2</code>，则为<code>true</code>。</li><li><code>[ integer1 -ge integer2 ]</code>：如果<code>integer1</code>大于或等于<code>integer2</code>，则为<code>true</code>。</li><li><code>[ integer1 -gt integer2 ]</code>：如果<code>integer1</code>大于<code>integer2</code>，则为<code>true</code>。</li></ul><p>下面是一个用法的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">INT=-5</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$INT</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;INT is empty.&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$INT</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;INT is zero.&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$INT</span> -lt 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;INT is negative.&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;INT is positive.&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ $((INT % <span class="number">2</span>)) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;INT is even.&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;INT is odd.&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面例子中，先判断变量<code>$INT</code>是否为空，然后判断是否为<code>0</code>，接着判断正负，最后通过求余数判断奇偶。</p><h3 id="正则判断"><a href="#正则判断" class="headerlink" title="正则判断"></a>正则判断</h3><p><code>[[ expression ]]</code>这种判断形式，支持正则表达式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ string1 =~ regex ]]</span><br></pre></td></tr></table></figure><p>上面的语法中，<code>regex</code>是一个正则表示式，<code>=~</code>是正则比较运算符。</p><p>下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">INT=-5</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$INT</span>&quot;</span> =~ ^-?[0-9]+$ ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;INT is an integer.&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;INT is not an integer.&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面代码中，先判断变量<code>INT</code>的字符串形式，是否满足<code>^-?[0-9]+$</code>的正则模式，如果满足就表明它是一个整数。</p><h3 id="test-判断的逻辑运算"><a href="#test-判断的逻辑运算" class="headerlink" title="test 判断的逻辑运算"></a>test 判断的逻辑运算</h3><p>通过逻辑运算，可以把多个<code>test</code>判断表达式结合起来，创造更复杂的判断。三种逻辑运算<code>AND</code>，<code>OR</code>，和<code>NOT</code>，都有自己的专用符号。</p><ul><li><code>AND</code>运算：符号<code>&amp;&amp;</code>，也可使用参数<code>-a</code>。</li><li><code>OR</code>运算：符号<code>||</code>，也可使用参数<code>-o</code>。</li><li><code>NOT</code>运算：符号<code>!</code>。</li></ul><p>下面是一个<code>AND</code>的例子，判断整数是否在某个范围之内。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">MIN_VAL=1</span><br><span class="line">MAX_VAL=100</span><br><span class="line"></span><br><span class="line">INT=50</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$INT</span>&quot;</span> =~ ^-?[0-9]+$ ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [[ <span class="variable">$INT</span> -ge <span class="variable">$MIN_VAL</span> &amp;&amp; <span class="variable">$INT</span> -le <span class="variable">$MAX_VAL</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$INT</span> is within <span class="variable">$MIN_VAL</span> to <span class="variable">$MAX_VAL</span>.&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$INT</span> is out of range.&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;INT is not an integer.&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>&amp;&amp;</code>用来连接两个判断条件：大于等于<code>$MIN_VAL</code>，并且小于等于<code>$MAX_VAL</code>。</p><p>使用否定操作符<code>!</code>时，最好用圆括号确定转义的范围。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ ! \( <span class="variable">$INT</span> -ge <span class="variable">$MIN_VAL</span> -a <span class="variable">$INT</span> -le <span class="variable">$MAX_VAL</span> \) ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$INT</span> is outside <span class="variable">$MIN_VAL</span> to <span class="variable">$MAX_VAL</span>.&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$INT</span> is in range.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>test</code>命令内部使用的圆括号，必须使用引号或者转义，否则会被 Bash 解释。</p><h3 id="算术判断"><a href="#算术判断" class="headerlink" title="算术判断"></a>算术判断</h3><p>Bash 还提供了<code>((...))</code>作为算术条件，进行算术运算的判断。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((3 &gt; 2)); <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面代码执行后，会打印出<code>true</code>。</p><p>注意，算术判断不需要使用<code>test</code>命令，而是直接使用<code>((...))</code>结构。这个结构的返回值，决定了判断的真伪。</p><p>如果算术计算的结果是非零值，则表示判断成立。这一点跟命令的返回值正好相反，需要小心。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">if</span> ((1)); <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;It is true.&quot;</span>; <span class="keyword">fi</span></span><br><span class="line">It is <span class="literal">true</span>.</span><br><span class="line">$ <span class="keyword">if</span> ((0)); <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;It is true.&quot;</span>; <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">&quot;it is false.&quot;</span>; <span class="keyword">fi</span></span><br><span class="line">It is <span class="literal">false</span>.</span><br></pre></td></tr></table></figure><p>上面例子中，<code>((1))</code>表示判断成立，<code>((0))</code>表示判断不成立。</p><p>算术条件<code>((...))</code>也可以用于变量赋值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">if</span> (( foo = 5 ));<span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;foo is <span class="variable">$foo</span>&quot;</span>; <span class="keyword">fi</span></span><br><span class="line">foo is 5</span><br></pre></td></tr></table></figure><p>上面例子中，<code>(( foo = 5 ))</code>完成了两件事情。首先把<code>5</code>赋值给变量<code>foo</code>，然后根据返回值<code>5</code>，判断条件为真。</p><p>注意，赋值语句返回等号右边的值，如果返回的是<code>0</code>，则判断为假。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">if</span> (( foo = 0 ));<span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;It is true.&quot;</span>;<span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">&quot;It is false.&quot;</span>; <span class="keyword">fi</span></span><br><span class="line">It is <span class="literal">false</span>.</span><br></pre></td></tr></table></figure><p>下面是用算术条件改写的数值判断脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">INT=-5</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$INT</span>&quot;</span> =~ ^-?[0-9]+$ ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> ((INT == 0)); <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;INT is zero.&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> ((INT &lt; 0)); <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;INT is negative.&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;INT is positive.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> (( ((INT % 2)) == 0)); <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;INT is even.&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;INT is odd.&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;INT is not an integer.&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>只要是算术表达式，都能用于<code>((...))</code>语法，详见《Bash 的算术运算》一章。</p><h3 id="普通命令的逻辑运算"><a href="#普通命令的逻辑运算" class="headerlink" title="普通命令的逻辑运算"></a>普通命令的逻辑运算</h3><p>如果<code>if</code>结构使用的不是<code>test</code>命令，而是普通命令，比如上一节的<code>((...))</code>算术运算，或者<code>test</code>命令与普通命令混用，那么可以使用 Bash 的命令控制操作符<code>&amp;&amp;</code>（AND）和<code>||</code>（OR），进行多个命令的逻辑运算。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ command1 &amp;&amp; command2</span><br><span class="line">$ command1 || command2</span><br></pre></td></tr></table></figure><p>对于<code>&amp;&amp;</code>操作符，先执行<code>command1</code>，只有<code>command1</code>执行成功后， 才会执行<code>command2</code>。对于<code>||</code>操作符，先执行<code>command1</code>，只有<code>command1</code>执行失败后， 才会执行<code>command2</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> temp &amp;&amp; <span class="built_in">cd</span> temp</span><br></pre></td></tr></table></figure><p>上面的命令会创建一个名为<code>temp</code>的目录，执行成功后，才会执行第二个命令，进入这个目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ [ -d temp ] || <span class="built_in">mkdir</span> temp</span><br></pre></td></tr></table></figure><p>上面的命令会测试目录<code>temp</code>是否存在，如果不存在，就会执行第二个命令，创建这个目录。这种写法非常有助于在脚本中处理错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ ! -d temp ] &amp;&amp; <span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><p>上面的命令中，如果<code>temp</code>子目录不存在，脚本会终止，并且返回值为<code>1</code>。</p><p>下面就是<code>if</code>与<code>&amp;&amp;</code>结合使用的写法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition ] &amp;&amp; [ condition ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">command</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>下面是一个示例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">filename=<span class="variable">$1</span></span><br><span class="line">word1=<span class="variable">$2</span></span><br><span class="line">word2=<span class="variable">$3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> grep <span class="variable">$word1</span> <span class="variable">$filename</span> &amp;&amp; grep <span class="variable">$word2</span> <span class="variable">$filename</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$word1</span> and <span class="variable">$word2</span> are both in <span class="variable">$filename</span>.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面的例子只有在指定文件里面，同时存在搜索词<code>word1</code>和<code>word2</code>，就会执行<code>if</code>的命令部分。</p><p>下面的示例演示如何将一个<code>&amp;&amp;</code>判断表达式，改写成对应的<code>if</code>结构。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[[ -d <span class="string">&quot;<span class="variable">$dir_name</span>&quot;</span> ]] &amp;&amp; <span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$dir_name</span>&quot;</span> &amp;&amp; <span class="built_in">rm</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ ! -d <span class="string">&quot;<span class="variable">$dir_name</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;No such directory: &#x27;<span class="variable">$dir_name</span>&#x27;&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$dir_name</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Cannot cd to &#x27;<span class="variable">$dir_name</span>&#x27;&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">rm</span> *; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;File deletion failed. Check results&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="case-结构"><a href="#case-结构" class="headerlink" title="case 结构"></a>case 结构</h2><p><code>case</code>结构用于多值判断，可以为每个值指定对应的命令，跟包含多个<code>elif</code>的<code>if</code>结构等价，但是语义更好。它的语法如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> expression <span class="keyword">in</span></span><br><span class="line">  pattern )</span><br><span class="line">    commands ;;</span><br><span class="line">  pattern )</span><br><span class="line">    commands ;;</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>expression</code>是一个表达式，<code>pattern</code>是表达式的值或者一个模式，可以有多条，用来匹配多个值，每条以两个分号（<code>;</code>）结尾。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;输入一个1到3之间的数字（包含两端）&gt; &quot;</span></span><br><span class="line"><span class="built_in">read</span> character</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$character</span> <span class="keyword">in</span></span><br><span class="line">  1 ) <span class="built_in">echo</span> 1</span><br><span class="line">    ;;</span><br><span class="line">  2 ) <span class="built_in">echo</span> 2</span><br><span class="line">    ;;</span><br><span class="line">  3 ) <span class="built_in">echo</span> 3</span><br><span class="line">    ;;</span><br><span class="line">  * ) <span class="built_in">echo</span> 输入不符合要求</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>上面例子中，最后一条匹配语句的模式是<code>*</code>，这个通配符可以匹配其他字符和没有输入字符的情况，类似<code>if</code>的<code>else</code>部分。</p><p>下面是另一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">OS=$(<span class="built_in">uname</span> -s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$OS</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  FreeBSD) <span class="built_in">echo</span> <span class="string">&quot;This is FreeBSD&quot;</span> ;;</span><br><span class="line">  Darwin) <span class="built_in">echo</span> <span class="string">&quot;This is Mac OSX&quot;</span> ;;</span><br><span class="line">  AIX) <span class="built_in">echo</span> <span class="string">&quot;This is AIX&quot;</span> ;;</span><br><span class="line">  Minix) <span class="built_in">echo</span> <span class="string">&quot;This is Minix&quot;</span> ;;</span><br><span class="line">  Linux) <span class="built_in">echo</span> <span class="string">&quot;This is Linux&quot;</span> ;;</span><br><span class="line">  *) <span class="built_in">echo</span> <span class="string">&quot;Failed to identify this OS&quot;</span> ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>上面的例子判断当前是什么操作系统。</p><p><code>case</code>的匹配模式可以使用各种通配符，下面是一些例子。</p><ul><li><code>a)</code>：匹配<code>a</code>。</li><li><code>a|b)</code>：匹配<code>a</code>或<code>b</code>。</li><li><code>[[:alpha:]])</code>：匹配单个字母。</li><li><code>???)</code>：匹配3个字符的单词。</li><li><code>*.txt)</code>：匹配<code>.txt</code>结尾。</li><li><code>*)</code>：匹配任意输入，通过作为<code>case</code>结构的最后一个模式。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;输入一个字母或数字 &gt; &quot;</span></span><br><span class="line"><span class="built_in">read</span> character</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$character</span> <span class="keyword">in</span></span><br><span class="line">  [[:lower:]] | [[:upper:]] ) <span class="built_in">echo</span> <span class="string">&quot;输入了字母 <span class="variable">$character</span>&quot;</span></span><br><span class="line">                              ;;</span><br><span class="line">  [0-9] )                     <span class="built_in">echo</span> <span class="string">&quot;输入了数字 <span class="variable">$character</span>&quot;</span></span><br><span class="line">                              ;;</span><br><span class="line">  * )                         <span class="built_in">echo</span> <span class="string">&quot;输入不符合要求&quot;</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>上面例子中，使用通配符<code>[[:lower:]] | [[:upper:]]</code>匹配字母，<code>[0-9]</code>匹配数字。</p><p>Bash 4.0之前，<code>case</code>结构只能匹配一个条件，然后就会退出<code>case</code>结构。Bash 4.0之后，允许匹配多个条件，这时可以用<code>;;&amp;</code>终止每个条件块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># test.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -n 1 -p <span class="string">&quot;Type a character &gt; &quot;</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$REPLY</span> <span class="keyword">in</span></span><br><span class="line">  [[:upper:]])    <span class="built_in">echo</span> <span class="string">&quot;&#x27;<span class="variable">$REPLY</span>&#x27; is upper case.&quot;</span> ;;&amp;</span><br><span class="line">  [[:lower:]])    <span class="built_in">echo</span> <span class="string">&quot;&#x27;<span class="variable">$REPLY</span>&#x27; is lower case.&quot;</span> ;;&amp;</span><br><span class="line">  [[:alpha:]])    <span class="built_in">echo</span> <span class="string">&quot;&#x27;<span class="variable">$REPLY</span>&#x27; is alphabetic.&quot;</span> ;;&amp;</span><br><span class="line">  [[:digit:]])    <span class="built_in">echo</span> <span class="string">&quot;&#x27;<span class="variable">$REPLY</span>&#x27; is a digit.&quot;</span> ;;&amp;</span><br><span class="line">  [[:graph:]])    <span class="built_in">echo</span> <span class="string">&quot;&#x27;<span class="variable">$REPLY</span>&#x27; is a visible character.&quot;</span> ;;&amp;</span><br><span class="line">  [[:punct:]])    <span class="built_in">echo</span> <span class="string">&quot;&#x27;<span class="variable">$REPLY</span>&#x27; is a punctuation symbol.&quot;</span> ;;&amp;</span><br><span class="line">  [[:space:]])    <span class="built_in">echo</span> <span class="string">&quot;&#x27;<span class="variable">$REPLY</span>&#x27; is a whitespace character.&quot;</span> ;;&amp;</span><br><span class="line">  [[:xdigit:]])   <span class="built_in">echo</span> <span class="string">&quot;&#x27;<span class="variable">$REPLY</span>&#x27; is a hexadecimal digit.&quot;</span> ;;&amp;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>执行上面的脚本，会得到下面的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ test.sh</span><br><span class="line">Type a character &gt; a</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> is lower <span class="keyword">case</span>.</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> is alphabetic.</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> is a visible character.</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> is a hexadecimal digit.</span><br></pre></td></tr></table></figure><p>可以看到条件语句结尾添加了<code>;;&amp;</code>以后，在匹配一个条件之后，并没有退出<code>case</code>结构，而是继续判断下一个条件。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://linuxcommand.org/tlcl.php">The Linux Command Line</a>, William Shotts</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>read 命令</title>
      <link href="/2016/06/30/read%20%E5%91%BD%E4%BB%A4/"/>
      <url>/2016/06/30/read%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>有时，脚本需要在执行过程中，由用户提供一部分数据，这时可以使用<code>read</code>命令。它将用户的输入存入一个变量，方便后面的代码使用。用户按下回车键，就表示输入结束。</p><p><code>read</code>命令的格式如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> [-options] [variable...]</span><br></pre></td></tr></table></figure><p>上面语法中，<code>options</code>是参数选项，<code>variable</code>是用来保存输入数值的一个或多个变量名。如果没有提供变量名，环境变量<code>REPLY</code>会包含用户输入的一整行数据。</p><p>下面是一个例子<code>demo.sh</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;输入一些文本 &gt; &quot;</span></span><br><span class="line"><span class="built_in">read</span> text</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你的输入：<span class="variable">$text</span>&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>上面例子中，先显示一行提示文本，然后会等待用户输入文本。用户输入的文本，存入变量<code>text</code>，在下一行显示出来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash demo.sh</span><br><span class="line">输入一些文本 &gt; 你好，世界</span><br><span class="line">你的输入：你好，世界</span><br></pre></td></tr></table></figure><p><code>read</code>可以接受用户输入的多个值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> Please, enter your firstname and lastname</span><br><span class="line"><span class="built_in">read</span> FN LN</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hi! <span class="variable">$LN</span>, <span class="variable">$FN</span> !&quot;</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>read</code>根据用户的输入，同时为两个变量赋值。</p><p>如果用户的输入项少于<code>read</code>命令给出的变量数目，那么额外的变量值为空。如果用户的输入项多于定义的变量，那么多余的输入项会包含到最后一个变量中。</p><p>如果<code>read</code>命令之后没有定义变量名，那么环境变量<code>REPLY</code>会包含所有的输入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># read-single: read multiple values into default variable</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Enter one or more values &gt; &quot;</span></span><br><span class="line"><span class="built_in">read</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;REPLY = &#x27;<span class="variable">$REPLY</span>&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p>上面脚本的运行结果如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ read-single</span><br><span class="line">Enter one or more values &gt; a b c d</span><br><span class="line">REPLY = <span class="string">&#x27;a b c d&#x27;</span></span><br></pre></td></tr></table></figure><p><code>read</code>命令除了读取键盘输入，可以用来读取文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">filename=<span class="string">&#x27;/etc/hosts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> myline</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$myline</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="variable">$filename</span></span><br></pre></td></tr></table></figure><p>上面的例子通过<code>read</code>命令，读取一个文件的内容。<code>done</code>命令后面的定向符<code>&lt;</code>，将文件内容导向<code>read</code>命令，每次读取一行，存入变量<code>myline</code>，直到文件读取完毕。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><code>read</code>命令的参数如下。</p><p><strong>（1）-t 参数</strong></p><p><code>read</code>命令的<code>-t</code>参数，设置了超时的秒数。如果超过了指定时间，用户仍然没有输入，脚本将放弃等待，继续向下执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;输入一些文本 &gt; &quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">read</span> -t 3 response; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;用户已经输入了&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;用户没有输入&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面例子中，输入命令会等待3秒，如果用户超过这个时间没有输入，这个命令就会执行失败。<code>if</code>根据命令的返回值，转入<code>else</code>代码块，继续往下执行。</p><p>环境变量<code>TMOUT</code>也可以起到同样作用，指定<code>read</code>命令等待用户输入的时间（单位为秒）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ TMOUT=3</span><br><span class="line">$ <span class="built_in">read</span> response</span><br></pre></td></tr></table></figure><p>上面例子也是等待3秒，如果用户还没有输入，就会超时。</p><p><strong>（2）-p 参数</strong></p><p><code>-p</code>参数指定用户输入的提示信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter one or more values &gt; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;REPLY = &#x27;<span class="variable">$REPLY</span>&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p>上面例子中，先显示<code>Enter one or more values &gt;</code>，再接受用户的输入。</p><p><strong>（3）-a 参数</strong></p><p><code>-a</code>参数把用户的输入赋值给一个数组，从零号位置开始。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">read</span> -a people</span><br><span class="line">alice duchess dodo</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;people[2]&#125;</span></span><br><span class="line">dodo</span><br></pre></td></tr></table></figure><p>上面例子中，用户输入被赋值给一个数组<code>people</code>，这个数组的2号成员就是<code>dodo</code>。</p><p><strong>（4）-n 参数</strong></p><p><code>-n</code>参数指定只读取若干个字符作为变量值，而不是整行读取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">read</span> -n 3 letter</span><br><span class="line">abcdefghij</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$letter</span></span><br><span class="line">abc</span><br></pre></td></tr></table></figure><p>上面例子中，变量<code>letter</code>只包含3个字母。</p><p><strong>（5）-e 参数</strong></p><p><code>-e</code>参数允许用户输入的时候，使用<code>readline</code>库提供的快捷键，比如自动补全。具体的快捷键可以参阅《行操作》一章。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Please input the path to the file:</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -e fileName</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$fileName</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>read</code>命令接受用户输入的文件名。这时，用户可能想使用 Tab 键的文件名“自动补全”功能，但是<code>read</code>命令的输入默认不支持<code>readline</code>库的功能。<code>-e</code>参数就可以允许用户使用自动补全。</p><p><strong>（6）其他参数</strong></p><ul><li><code>-d delimiter</code>：定义字符串<code>delimiter</code>的第一个字符作为用户输入的结束，而不是一个换行符。</li><li><code>-r</code>：raw 模式，表示不把用户输入的反斜杠字符解释为转义字符。</li><li><code>-s</code>：使得用户的输入不显示在屏幕上，这常常用于输入密码或保密信息。</li><li><code>-u fd</code>：使用文件描述符<code>fd</code>作为输入。</li></ul><h2 id="IFS-变量"><a href="#IFS-变量" class="headerlink" title="IFS 变量"></a>IFS 变量</h2><p><code>read</code>命令读取的值，默认是以空格分隔。可以通过自定义环境变量<code>IFS</code>（内部字段分隔符，Internal Field Separator 的缩写），修改分隔标志。</p><p><code>IFS</code>的默认值是空格、Tab 符号、换行符号，通常取第一个（即空格）。</p><p>如果把<code>IFS</code>定义成冒号（<code>:</code>）或分号（<code>;</code>），就可以分隔以这两个符号分隔的值，这对读取文件很有用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># read-ifs: read fields from a file</span></span><br><span class="line"></span><br><span class="line">FILE=/etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter a username &gt; &quot;</span> user_name</span><br><span class="line">file_info=<span class="string">&quot;<span class="subst">$(grep <span class="string">&quot;^<span class="variable">$user_name</span>:&quot;</span> $FILE)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$file_info</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  IFS=<span class="string">&quot;:&quot;</span> <span class="built_in">read</span> user pw uid gid name home shell &lt;&lt;&lt; <span class="string">&quot;<span class="variable">$file_info</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;User = &#x27;<span class="variable">$user</span>&#x27;&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;UID = &#x27;<span class="variable">$uid</span>&#x27;&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;GID = &#x27;<span class="variable">$gid</span>&#x27;&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Full Name = &#x27;<span class="variable">$name</span>&#x27;&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Home Dir. = &#x27;<span class="variable">$home</span>&#x27;&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Shell = &#x27;<span class="variable">$shell</span>&#x27;&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;No such user &#x27;<span class="variable">$user_name</span>&#x27;&quot;</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>IFS</code>设为冒号，然后用来分解<code>/etc/passwd</code>文件的一行。<code>IFS</code>的赋值命令和<code>read</code>命令写在一行，这样的话，<code>IFS</code>的改变仅对后面的命令生效，该命令执行后<code>IFS</code>会自动恢复原来的值。如果不写在一行，就要采用下面的写法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OLD_IFS=<span class="string">&quot;<span class="variable">$IFS</span>&quot;</span></span><br><span class="line">IFS=<span class="string">&quot;:&quot;</span></span><br><span class="line"><span class="built_in">read</span> user pw uid gid name home shell &lt;&lt;&lt; <span class="string">&quot;<span class="variable">$file_info</span>&quot;</span></span><br><span class="line">IFS=<span class="string">&quot;<span class="variable">$OLD_IFS</span>&quot;</span></span><br></pre></td></tr></table></figure><p>另外，上面例子中，<code>&lt;&lt;&lt;</code>是 Here 字符串，用于将变量值转为标准输入，因为<code>read</code>命令只能解析标准输入。</p><p>如果<code>IFS</code>设为空字符串，就等同于将整行读入一个变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">input=<span class="string">&quot;/path/to/txt/file&quot;</span></span><br><span class="line"><span class="keyword">while</span> IFS= <span class="built_in">read</span> -r line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$line</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="string">&quot;<span class="variable">$input</span>&quot;</span></span><br></pre></td></tr></table></figure><p>上面的命令可以逐行读取文件，每一行存入变量<code>line</code>，打印出来以后再读取下一行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash 脚本入门</title>
      <link href="/2016/06/11/Bash%20%E8%84%9A%E6%9C%AC%E5%85%A5%E9%97%A8/"/>
      <url>/2016/06/11/Bash%20%E8%84%9A%E6%9C%AC%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>脚本（script）就是包含一系列命令的一个文本文件。Shell 读取这个文件，依次执行里面的所有命令，就好像这些命令直接输入到命令行一样。所有能够在命令行完成的任务，都能够用脚本完成。</p><p>脚本的好处是可以重复使用，也可以指定在特定场合自动调用，比如系统启动或关闭时自动执行脚本。</p><h2 id="Shebang-行"><a href="#Shebang-行" class="headerlink" title="Shebang 行"></a>Shebang 行</h2><p>脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以<code>#!</code>字符开头，这个字符称为 Shebang，所以这一行就叫做 Shebang 行。</p><span id="more"></span><p><code>#!</code>后面就是脚本解释器的位置，Bash 脚本的解释器一般是<code>/bin/sh</code>或<code>/bin/bash</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br></pre></td></tr></table></figure><p><code>#!</code>与脚本解释器之间有没有空格，都是可以的。</p><p>如果 Bash 解释器不放在目录<code>/bin</code>，脚本就无法执行了。为了保险，可以写成下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br></pre></td></tr></table></figure><p>上面命令使用<code>env</code>命令（这个命令总是在<code>/usr/bin</code>目录），返回 Bash 可执行文件的位置。<code>env</code>命令的详细介绍，请看后文。</p><p>Shebang 行不是必需的，但是建议加上这行。如果缺少该行，就需要手动将脚本传给解释器。举例来说，脚本是<code>script.sh</code>，有 Shebang 行的时候，可以直接调用执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./script.sh</span><br></pre></td></tr></table></figure><p>上面例子中，<code>script.sh</code>是脚本文件名。脚本通常使用<code>.sh</code>后缀名，不过这不是必需的。</p><p>如果没有 Shebang 行，就只能手动将脚本传给解释器来执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ /bin/sh ./script.sh</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ bash ./script.sh</span><br></pre></td></tr></table></figure><h2 id="执行权限和路径"><a href="#执行权限和路径" class="headerlink" title="执行权限和路径"></a>执行权限和路径</h2><p>前面说过，只要指定了 Shebang 行的脚本，可以直接执行。这有一个前提条件，就是脚本需要有执行权限。可以使用下面的命令，赋予脚本执行权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给所有用户执行权限</span></span><br><span class="line">$ <span class="built_in">chmod</span> +x script.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给所有用户读权限和执行权限</span></span><br><span class="line">$ <span class="built_in">chmod</span> +rx script.sh</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ <span class="built_in">chmod</span> 755 script.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只给脚本拥有者读权限和执行权限</span></span><br><span class="line">$ <span class="built_in">chmod</span> u+rx script.sh</span><br></pre></td></tr></table></figure><p>脚本的权限通常设为<code>755</code>（拥有者有所有权限，其他人有读和执行权限）或者<code>700</code>（只有拥有者可以执行）。</p><p>除了执行权限，脚本调用时，一般需要指定脚本的路径（比如<code>path/script.sh</code>）。如果将脚本放在环境变量<code>$PATH</code>指定的目录中，就不需要指定路径了。因为 Bash 会自动到这些目录中，寻找是否存在同名的可执行文件。</p><p>建议在主目录新建一个<code>~/bin</code>子目录，专门存放可执行脚本，然后把<code>~/bin</code>加入<code>$PATH</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:~/bin</span><br></pre></td></tr></table></figure><p>上面命令改变环境变量<code>$PATH</code>，将<code>~/bin</code>添加到<code>$PATH</code>的末尾。可以将这一行加到<code>~/.bashrc</code>文件里面，然后重新加载一次<code>.bashrc</code>，这个配置就可以生效了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>以后不管在什么目录，直接输入脚本文件名，脚本就会执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ script.sh</span><br></pre></td></tr></table></figure><p>上面命令没有指定脚本路径，因为<code>script.sh</code>在<code>$PATH</code>指定的目录中。</p><h2 id="env-命令"><a href="#env-命令" class="headerlink" title="env 命令"></a>env 命令</h2><p><code>env</code>命令总是指向<code>/usr/bin/env</code>文件，或者说，这个二进制文件总是在目录<code>/usr/bin</code>。</p><p><code>#!/usr/bin/env NAME</code>这个语法的意思是，让 Shell 查找<code>$PATH</code>环境变量里面第一个匹配的<code>NAME</code>。如果你不知道某个命令的具体路径，或者希望兼容其他用户的机器，这样的写法就很有用。</p><p><code>/usr/bin/env bash</code>的意思就是，返回<code>bash</code>可执行文件的位置，前提是<code>bash</code>的路径是在<code>$PATH</code>里面。其他脚本文件也可以使用这个命令。比如 Node.js 脚本的 Shebang 行，可以写成下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br></pre></td></tr></table></figure><p><code>env</code>命令的参数如下。</p><ul><li><code>-i</code>, <code>--ignore-environment</code>：不带环境变量启动。</li><li><code>-u</code>, <code>--unset=NAME</code>：从环境变量中删除一个变量。</li><li><code>--help</code>：显示帮助。</li><li><code>--version</code>：输出版本信息。</li></ul><p>下面是一个例子，新建一个不带任何环境变量的 Shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">env</span> -i /bin/sh</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Bash 脚本中，<code>#</code>表示注释，可以放在行首，也可以放在行尾。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本行是注释</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Hello World!&#x27;</span> <span class="comment"># 井号后面的部分也是注释</span></span><br></pre></td></tr></table></figure><p>建议在脚本开头，使用注释说明当前脚本的作用，这样有利于日后的维护。</p><h2 id="脚本参数"><a href="#脚本参数" class="headerlink" title="脚本参数"></a>脚本参数</h2><p>调用脚本的时候，脚本文件名后面可以带有参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ script.sh word1 word2 word3</span><br></pre></td></tr></table></figure><p>上面例子中，<code>script.sh</code>是一个脚本文件，<code>word1</code>、<code>word2</code>和<code>word3</code>是三个参数。</p><p>脚本文件内部，可以使用特殊变量，引用这些参数。</p><ul><li><code>$0</code>：脚本文件名，即<code>script.sh</code>。</li><li><code>$1</code>~&#96;$9&#96;：对应脚本的第一个参数到第九个参数。</li><li><code>$#</code>：参数的总数。</li><li><code>$@</code>：全部的参数，参数之间使用空格分隔。</li><li><code>$*</code>：全部的参数，参数之间使用变量<code>$IFS</code>值的第一个字符分隔，默认为空格，但是可以自定义。</li></ul><p>如果脚本的参数多于9个，那么第10个参数可以用<code>$&#123;10&#125;</code>的形式引用，以此类推。</p><p>注意，如果命令是<code>command -o foo bar</code>，那么<code>-o</code>是<code>$1</code>，<code>foo</code>是<code>$2</code>，<code>bar</code>是<code>$3</code>。</p><p>下面是一个脚本内部读取命令行参数的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># script.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;全部参数：&quot;</span> <span class="variable">$@</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;命令行参数数量：&quot;</span> <span class="variable">$#</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$0 = &#x27;</span> <span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$1 = &#x27;</span> <span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$2 = &#x27;</span> <span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$3 = &#x27;</span> <span class="variable">$3</span></span><br></pre></td></tr></table></figure><p>执行结果如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./script.sh a b c</span><br><span class="line">全部参数：a b c</span><br><span class="line">命令行参数数量：3</span><br><span class="line"><span class="variable">$0</span> =  script.sh</span><br><span class="line"><span class="variable">$1</span> =  a</span><br><span class="line"><span class="variable">$2</span> =  b</span><br><span class="line"><span class="variable">$3</span> =  c</span><br></pre></td></tr></table></figure><p>用户可以输入任意数量的参数，利用<code>for</code>循环，可以读取每一个参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>$@</code>返回一个全部参数的列表，然后使用<code>for</code>循环遍历。</p><p>如果多个参数放在双引号里面，视为一个参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./script.sh <span class="string">&quot;a b&quot;</span></span><br></pre></td></tr></table></figure><p>上面例子中，Bash 会认为<code>&quot;a b&quot;</code>是一个参数，<code>$1</code>会返回<code>a b</code>。注意，返回时不包括双引号。</p><h2 id="shift-命令"><a href="#shift-命令" class="headerlink" title="shift 命令"></a>shift 命令</h2><p><code>shift</code>命令可以改变脚本参数，每次执行都会移除脚本当前的第一个参数（<code>$1</code>），使得后面的参数向前一位，即<code>$2</code>变成<code>$1</code>、<code>$3</code>变成<code>$2</code>、<code>$4</code>变成<code>$3</code>，以此类推。</p><p><code>while</code>循环结合<code>shift</code>命令，也可以读取每一个参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;一共输入了 <span class="variable">$#</span> 个参数&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;剩下 <span class="variable">$#</span> 个参数&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;参数：<span class="variable">$1</span>&quot;</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>shift</code>命令每次移除当前第一个参数，从而通过<code>while</code>循环遍历所有参数。</p><p><code>shift</code>命令可以接受一个整数作为参数，指定所要移除的参数个数，默认为<code>1</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shift</span> 3</span><br></pre></td></tr></table></figure><p>上面的命令移除前三个参数，原来的<code>$4</code>变成<code>$1</code>。</p><h2 id="getopts-命令"><a href="#getopts-命令" class="headerlink" title="getopts 命令"></a>getopts 命令</h2><p><code>getopts</code>命令用在脚本内部，可以解析复杂的脚本命令行参数，通常与<code>while</code>循环一起使用，取出脚本所有的带有前置连词线（<code>-</code>）的参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getopts</span> optstring name</span><br></pre></td></tr></table></figure><p>它带有两个参数。第一个参数<code>optstring</code>是字符串，给出脚本所有的连词线参数。比如，某个脚本可以有三个配置项参数<code>-l</code>、<code>-h</code>、<code>-a</code>，其中只有<code>-a</code>可以带有参数值，而<code>-l</code>和<code>-h</code>是开关参数，那么<code>getopts</code>的第一个参数写成<code>lha:</code>，顺序不重要。注意，<code>a</code>后面有一个冒号，表示该参数带有参数值，<code>getopts</code>规定带有参数值的配置项参数，后面必须带有一个冒号（<code>:</code>）。<code>getopts</code>的第二个参数<code>name</code>是一个变量名，用来保存当前取到的配置项参数，即<code>l</code>、<code>h</code>或<code>a</code>。</p><p>下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">&#x27;lha:&#x27;</span> OPTION; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$OPTION</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    l)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;linuxconfig&quot;</span></span><br><span class="line">      ;;</span><br><span class="line"></span><br><span class="line">    h)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;h stands for h&quot;</span></span><br><span class="line">      ;;</span><br><span class="line"></span><br><span class="line">    a)</span><br><span class="line">      avalue=<span class="string">&quot;<span class="variable">$OPTARG</span>&quot;</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;The value provided is <span class="variable">$OPTARG</span>&quot;</span></span><br><span class="line">      ;;</span><br><span class="line">    ?)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;script usage: <span class="subst">$(basename $0)</span> [-l] [-h] [-a somevalue]&quot;</span> &gt;&amp;2</span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">shift</span> <span class="string">&quot;<span class="subst">$(($OPTIND - 1)</span>)&quot;</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>while</code>循环不断执行<code>getopts &#39;lha:&#39; OPTION</code>命令，每次执行就会读取一个连词线参数（以及对应的参数值），然后进入循环体。变量<code>OPTION</code>保存的是，当前处理的那一个连词线参数（即<code>l</code>、<code>h</code>或<code>a</code>）。如果用户输入了没有指定的参数（比如<code>-x</code>），那么<code>OPTION</code>等于<code>?</code>。循环体内使用<code>case</code>判断，处理这四种不同的情况。</p><p>如果某个连词线参数带有参数值，比如<code>-a foo</code>，那么处理<code>a</code>参数的时候，环境变量<code>$OPTARG</code>保存的就是参数值。</p><p>注意，只要遇到不带连词线的参数，<code>getopts</code>就会执行失败，从而退出<code>while</code>循环。比如，<code>getopts</code>可以解析<code>command -l foo</code>，但不可以解析<code>command foo -l</code>。另外，多个连词线参数写在一起的形式，比如<code>command -lh</code>，<code>getopts</code>也可以正确处理。</p><p>变量<code>$OPTIND</code>在<code>getopts</code>开始执行前是<code>1</code>，然后每次执行就会加<code>1</code>。等到退出<code>while</code>循环，就意味着连词线参数全部处理完毕。这时，<code>$OPTIND - 1</code>就是已经处理的连词线参数个数，使用<code>shift</code>命令将这些参数移除，保证后面的代码可以用<code>$1</code>、<code>$2</code>等处理命令的主参数。</p><h2 id="配置项参数终止符"><a href="#配置项参数终止符" class="headerlink" title="配置项参数终止符 --"></a>配置项参数终止符 <code>--</code></h2><p><code>-</code>和<code>--</code>开头的参数，会被 Bash 当作配置项解释。但是，有时它们不是配置项，而是实体参数的一部分，比如文件名叫做<code>-f</code>或<code>--file</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> -f</span><br><span class="line">$ <span class="built_in">cat</span> --file</span><br></pre></td></tr></table></figure><p>上面命令的原意是输出文件<code>-f</code>和<code>--file</code>的内容，但是会被 Bash 当作配置项解释。</p><p>这时就可以使用配置项参数终止符<code>--</code>，它的作用是告诉 Bash，在它后面的参数开头的<code>-</code>和<code>--</code>不是配置项，只能当作实体参数解释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> -- -f</span><br><span class="line">$ <span class="built_in">cat</span> -- --file</span><br></pre></td></tr></table></figure><p>上面命令可以正确展示文件<code>-f</code>和<code>--file</code>的内容，因为它们放在<code>--</code>的后面，开头的<code>-</code>和<code>--</code>就不再当作配置项解释了。</p><p>如果要确保某个变量不会被当作配置项解释，就要在它前面放上参数终止符<code>--</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -- <span class="variable">$myPath</span></span><br></pre></td></tr></table></figure><p>上面示例中，<code>--</code>强制变量<code>$myPath</code>只能当作实体参数（即路径名）解释。如果变量不是路径名，就会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ myPath=<span class="string">&quot;-l&quot;</span></span><br><span class="line">$ <span class="built_in">ls</span> -- <span class="variable">$myPath</span></span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;-l&#x27;</span>: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p>上面例子中，变量<code>myPath</code>的值为<code>-l</code>，不是路径。但是，<code>--</code>强制<code>$myPath</code>只能作为路径解释，导致报错“不存在该路径”。</p><p>下面是另一个实际的例子，如果想在文件里面搜索<code>--hello</code>，这时也要使用参数终止符<code>--</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep -- <span class="string">&quot;--hello&quot;</span> example.txt</span><br></pre></td></tr></table></figure><p>上面命令在<code>example.txt</code>文件里面，搜索字符串<code>--hello</code>。这个字符串是<code>--</code>开头，如果不用参数终止符，<code>grep</code>命令就会把<code>--hello</code>当作配置项参数，从而报错。</p><h2 id="exit-命令"><a href="#exit-命令" class="headerlink" title="exit 命令"></a>exit 命令</h2><p><code>exit</code>命令用于终止当前脚本的执行，并向 Shell 返回一个退出值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>上面命令中止当前脚本，将最后一条命令的退出状态，作为整个脚本的退出状态。</p><p><code>exit</code>命令后面可以跟参数，该参数就是退出状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 退出值为0（成功）</span></span><br><span class="line">$ <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出值为1（失败）</span></span><br><span class="line">$ <span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><p>退出时，脚本会返回一个退出值。脚本的退出值，<code>0</code>表示正常，<code>1</code>表示发生错误，<code>2</code>表示用法不对，<code>126</code>表示不是可执行脚本，<code>127</code>表示命令没有发现。如果脚本被信号<code>N</code>终止，则退出值为<code>128 + N</code>。简单来说，只要退出值非0，就认为执行出错。</p><p>下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ $(<span class="built_in">id</span> -u) != <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;根用户才能执行当前脚本&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面的例子中，<code>id -u</code>命令返回用户的 ID，一旦用户的 ID 不等于<code>0</code>（根用户的 ID），脚本就会退出，并且退出码为<code>1</code>，表示运行失败。</p><p><code>exit</code>与<code>return</code>命令的差别是，<code>return</code>命令是函数的退出，并返回一个值给调用者，脚本依然执行。<code>exit</code>是整个脚本的退出，如果在函数之中调用<code>exit</code>，则退出函数，并终止脚本执行。</p><h2 id="命令执行结果"><a href="#命令执行结果" class="headerlink" title="命令执行结果"></a>命令执行结果</h2><p>命令执行结束后，会有一个返回值。<code>0</code>表示执行成功，非<code>0</code>（通常是<code>1</code>）表示执行失败。环境变量<code>$?</code>可以读取前一个命令的返回值。</p><p>利用这一点，可以在脚本中对命令执行结果进行判断。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/somewhere</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;$?&quot;</span> = <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">rm</span> *</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;无法切换目录！&quot;</span> 1&gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>cd /path/to/somewhere</code>这个命令如果执行成功（返回值等于<code>0</code>），就删除该目录里面的文件，否则退出脚本，整个脚本的返回值变为<code>1</code>，表示执行失败。</p><p>由于<code>if</code>可以直接判断命令的执行结果，执行相应的操作，上面的脚本可以改写成下面的样子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">cd</span> /path/to/somewhere; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">rm</span> *</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Could not change directory! Aborting.&quot;</span> 1&gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>更简洁的写法是利用两个逻辑运算符<code>&amp;&amp;</code>（且）和<code>||</code>（或）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步执行成功，才会执行第二步</span></span><br><span class="line"><span class="built_in">cd</span> /path/to/somewhere &amp;&amp; <span class="built_in">rm</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步执行失败，才会执行第二步</span></span><br><span class="line"><span class="built_in">cd</span> /path/to/somewhere || <span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure><h2 id="source-命令"><a href="#source-命令" class="headerlink" title="source 命令"></a>source 命令</h2><p><code>source</code>命令用于执行一个脚本，通常用于重新加载一个配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><p><code>source</code>命令最大的特点是在当前 Shell 执行脚本，不像直接执行脚本时，会新建一个子 Shell。所以，<code>source</code>命令执行脚本时，不需要<code>export</code>变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># test.sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$foo</span></span><br></pre></td></tr></table></figure><p>上面脚本输出<code>$foo</code>变量的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前 Shell 新建一个变量 foo</span></span><br><span class="line">$ foo=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印输出 1</span></span><br><span class="line">$ <span class="built_in">source</span> test.sh</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印输出空字符串</span></span><br><span class="line">$ bash test.sh</span><br></pre></td></tr></table></figure><p>上面例子中，当前 Shell 的变量<code>foo</code>并没有<code>export</code>，所以直接执行无法读取，但是<code>source</code>执行可以读取。</p><p><code>source</code>命令的另一个用途，是在脚本内部加载外部库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ./lib.sh</span><br><span class="line"></span><br><span class="line">function_from_lib</span><br></pre></td></tr></table></figure><p>上面脚本在内部使用<code>source</code>命令加载了一个外部库，然后就可以在脚本里面，使用这个外部库定义的函数。</p><p><code>source</code>有一个简写形式，可以使用一个点（<code>.</code>）来表示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ . .bashrc</span><br></pre></td></tr></table></figure><h2 id="别名，alias-命令"><a href="#别名，alias-命令" class="headerlink" title="别名，alias 命令"></a>别名，alias 命令</h2><p><code>alias</code>命令用来为一个命令指定别名，这样更便于记忆。下面是<code>alias</code>的格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> NAME=DEFINITION</span><br></pre></td></tr></table></figure><p>上面命令中，<code>NAME</code>是别名的名称，<code>DEFINITION</code>是别名对应的原始命令。注意，等号两侧不能有空格，否则会报错。</p><p>一个常见的例子是为<code>grep</code>命令起一个<code>search</code>的别名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> search=grep</span><br></pre></td></tr></table></figure><p><code>alias</code>也可以用来为长命令指定一个更短的别名。下面是通过别名定义一个<code>today</code>的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> today=<span class="string">&#x27;date +&quot;%A, %B %-d, %Y&quot;&#x27;</span></span><br><span class="line">$ today</span><br><span class="line">星期一, 一月 6, 2020</span><br></pre></td></tr></table></figure><p>有时为了防止误删除文件，可以指定<code>rm</code>命令的别名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> <span class="built_in">rm</span>=<span class="string">&#x27;rm -i&#x27;</span></span><br></pre></td></tr></table></figure><p>上面命令指定<code>rm</code>命令是<code>rm -i</code>，每次删除文件之前，都会让用户确认。</p><p><code>alias</code>定义的别名也可以接受参数，参数会直接传入原始命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> <span class="built_in">echo</span>=<span class="string">&#x27;echo It says: &#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> hello world</span><br><span class="line">It says: hello world</span><br></pre></td></tr></table></figure><p>上面例子中，别名定义了<code>echo</code>命令的前两个参数，等同于修改了<code>echo</code>命令的默认行为。</p><p>指定别名以后，就可以像使用其他命令一样使用别名。一般来说，都会把常用的别名写在<code>~/.bashrc</code>的末尾。另外，只能为命令定义别名，为其他部分（比如很长的路径）定义别名是无效的。</p><p>直接调用<code>alias</code>命令，可以显示所有别名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span></span><br></pre></td></tr></table></figure><p><code>unalias</code>命令可以解除别名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">unalias</span> lt</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://linuxconfig.org/how-to-use-getopts-to-parse-a-script-options">How to use getopts to parse a script options</a>, Egidio Docile</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目录堆栈</title>
      <link href="/2016/05/21/%E7%9B%AE%E5%BD%95%E5%A0%86%E6%A0%88/"/>
      <url>/2016/05/21/%E7%9B%AE%E5%BD%95%E5%A0%86%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p>为了方便用户在不同目录之间切换，Bash 提供了目录堆栈功能。</p><h2 id="cd"><a href="#cd" class="headerlink" title="cd -"></a>cd -</h2><p>Bash 可以记忆用户进入过的目录。默认情况下，只记忆前一次所在的目录，<code>cd -</code>命令可以返回前一次的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前目录是 /path/to/foo</span></span><br><span class="line">$ <span class="built_in">cd</span> bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新回到 /path/to/foo</span></span><br><span class="line">$ <span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure><p>上面例子中，用户原来所在的目录是<code>/path/to/foo</code>，进入子目录<code>bar</code>以后，使用<code>cd -</code>可以回到原来的目录。</p><span id="more"></span><h2 id="pushd，popd"><a href="#pushd，popd" class="headerlink" title="pushd，popd"></a>pushd，popd</h2><p>如果希望记忆多重目录，可以使用<code>pushd</code>命令和<code>popd</code>命令。它们用来操作目录堆栈。</p><p><code>pushd</code>命令的用法类似<code>cd</code>命令，可以进入指定的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pushd</span> <span class="built_in">dirname</span></span><br></pre></td></tr></table></figure><p>上面命令会进入目录<code>dirname</code>，并将该目录放入堆栈。</p><p>第一次使用<code>pushd</code>命令时，会将当前目录先放入堆栈，然后将所要进入的目录也放入堆栈，位置在前一个记录的上方。以后每次使用<code>pushd</code>命令，都会将所要进入的目录，放在堆栈的顶部。</p><p><code>popd</code>命令不带有参数时，会移除堆栈的顶部记录，并进入新的栈顶目录（即原来的第二条目录）。</p><p>下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前处在主目录，堆栈为空</span></span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/me</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 /home/me/foo</span></span><br><span class="line"><span class="comment"># 当前堆栈为 /home/me/foo /home/me</span></span><br><span class="line">$ <span class="built_in">pushd</span> ~/foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 /etc</span></span><br><span class="line"><span class="comment"># 当前堆栈为 /etc /home/me/foo /home/me</span></span><br><span class="line">$ <span class="built_in">pushd</span> /etc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 /home/me/foo</span></span><br><span class="line"><span class="comment"># 当前堆栈为 /home/me/foo /home/me</span></span><br><span class="line">$ <span class="built_in">popd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 /home/me</span></span><br><span class="line"><span class="comment"># 当前堆栈为 /home/me</span></span><br><span class="line">$ <span class="built_in">popd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录不变，当前堆栈为空</span></span><br><span class="line">$ <span class="built_in">popd</span></span><br></pre></td></tr></table></figure><p>这两个命令的参数如下。</p><p><strong>（1）-n 参数</strong></p><p><code>-n</code>的参数表示仅操作堆栈，不改变目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">popd</span> -n</span><br></pre></td></tr></table></figure><p>上面的命令仅删除堆栈顶部的记录，不改变目录，执行完成后还停留在当前目录。</p><p><strong>（2）整数参数</strong></p><p>这两个命令还可以接受一个整数作为参数，该整数表示堆栈中指定位置的记录（从0开始）。<code>pushd</code>命令会把这条记录移动到栈顶，同时切换到该目录；<code>popd</code>则从堆栈中删除这条记录，不会切换目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将从栈顶算起的3号目录（从0开始）移动到栈顶，同时切换到该目录</span></span><br><span class="line">$ <span class="built_in">pushd</span> +3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将从栈底算起的3号目录（从0开始）移动到栈顶，同时切换到该目录</span></span><br><span class="line">$ <span class="built_in">pushd</span> -3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除从栈顶算起的3号目录（从0开始），不改变当前目录</span></span><br><span class="line">$ <span class="built_in">popd</span> +3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除从栈底算起的3号目录（从0开始），不改变当前目录</span></span><br><span class="line">$ <span class="built_in">popd</span> -3</span><br></pre></td></tr></table></figure><p>上面例子的整数编号都是从0开始计算，<code>popd +0</code>是删除第一个目录，<code>popd +1</code>是删除第二个，<code>popd -0</code>是删除最后一个目录，<code>popd -1</code>是删除倒数第二个。</p><p><strong>（3）目录参数</strong></p><p><code>pushd</code>可以接受一个目录作为参数，表示将该目录放到堆栈顶部，并进入该目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pushd</span> <span class="built_in">dir</span></span><br></pre></td></tr></table></figure><p><code>popd</code>没有这个参数。</p><h2 id="dirs-命令"><a href="#dirs-命令" class="headerlink" title="dirs 命令"></a>dirs 命令</h2><p><code>dirs</code>命令可以显示目录堆栈的内容，一般用来查看<code>pushd</code>和<code>popd</code>操作后的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">dirs</span></span><br><span class="line">~/foo/bar ~/foo ~</span><br></pre></td></tr></table></figure><p>该命令会输出一行文本，列出目录堆栈，目录之间使用空格分隔。栈顶（最晚入栈的目录）在最左边，栈底（最早入栈的目录）在最右边。</p><p>它有以下参数。</p><ul><li><code>-c</code>：清空目录栈。</li><li><code>-l</code>：用户主目录不显示波浪号前缀，而打印完整的目录。</li><li><code>-p</code>：每行一个条目打印目录栈，默认是打印在一行。</li><li><code>-v</code>：每行一个条目，每个条目之前显示位置编号（从0开始）。</li><li><code>+N</code>：<code>N</code>为整数，表示显示堆顶算起的第 N 个目录，从零开始。</li><li><code>-N</code>：<code>N</code>为整数，表示显示堆底算起的第 N 个目录，从零开始。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash 行操作</title>
      <link href="/2016/05/19/Bash%20%E8%A1%8C%E6%93%8D%E4%BD%9C/"/>
      <url>/2016/05/19/Bash%20%E8%A1%8C%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Bash 内置了 Readline 库，具有这个库提供的很多“行操作”功能，比如命令的自动补全，可以大大加快操作速度。</p><p>这个库默认采用 Emacs 快捷键，也可以改成 Vi 快捷键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">set</span> -o vi</span><br></pre></td></tr></table></figure><p>下面的命令可以改回 Emacs 快捷键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">set</span> -o emacs</span><br></pre></td></tr></table></figure><p>如果想永久性更改编辑模式（Emacs &#x2F; Vi），可以将命令写在<code>~/.inputrc</code>文件，这个文件是 Readline 的配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> editing-mode vi</span><br></pre></td></tr></table></figure><p>本章介绍的快捷键都属于 Emacs 模式。Vi 模式的快捷键，读者可以参考 Vi 编辑器的教程。</p><p>Bash 默认开启这个库，但是允许关闭。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash --noediting</span><br></pre></td></tr></table></figure><p>上面命令中，<code>--noediting</code>参数关闭了 Readline 库，启动的 Bash 就不带有行操作功能。</p><span id="more"></span><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><p>Readline 提供快速移动光标的快捷键。</p><ul><li><code>Ctrl + a</code>：移到行首。</li><li><code>Ctrl + b</code>：向行首移动一个字符，与左箭头作用相同。</li><li><code>Ctrl + e</code>：移到行尾。</li><li><code>Ctrl + f</code>：向行尾移动一个字符，与右箭头作用相同。</li><li><code>Alt + f</code>：移动到当前单词的词尾。</li><li><code>Alt + b</code>：移动到当前单词的词首。</li></ul><p>上面快捷键的 Alt 键，也可以用 ESC 键代替。</p><h2 id="清除屏幕"><a href="#清除屏幕" class="headerlink" title="清除屏幕"></a>清除屏幕</h2><p><code>Ctrl + l</code>快捷键可以清除屏幕，即将当前行移到屏幕的第一行，与<code>clear</code>命令作用相同。</p><h2 id="编辑操作"><a href="#编辑操作" class="headerlink" title="编辑操作"></a>编辑操作</h2><p>下面的快捷键可以编辑命令行内容。</p><ul><li><code>Ctrl + d</code>：删除光标位置的字符（delete）。</li><li><code>Ctrl + w</code>：删除光标前面的单词。</li><li><code>Ctrl + t</code>：光标位置的字符与它前面一位的字符交换位置（transpose）。</li><li><code>Alt + t</code>：光标位置的词与它前面一位的词交换位置（transpose）。</li><li><code>Alt + l</code>：将光标位置至词尾转为小写（lowercase）。</li><li><code>Alt + u</code>：将光标位置至词尾转为大写（uppercase）。</li></ul><p>使用<code>Ctrl + d</code>的时候，如果当前行没有任何字符，会导致退出当前 Shell，所以要小心。</p><p>剪切和粘贴快捷键如下。</p><ul><li><code>Ctrl + k</code>：剪切光标位置到行尾的文本。</li><li><code>Ctrl + u</code>：剪切光标位置到行首的文本。</li><li><code>Alt + d</code>：剪切光标位置到词尾的文本。</li><li><code>Alt + Backspace</code>：剪切光标位置到词首的文本。</li><li><code>Ctrl + y</code>：在光标位置粘贴文本。</li></ul><p>同样地，Alt 键可以用 Esc 键代替。</p><h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><p>命令输入到一半的时候，可以按一下 Tab 键，Readline 会自动补全命令或路径。比如，输入<code>cle</code>，再按下 Tab 键，Bash 会自动将这个命令补全为<code>clear</code>。</p><p>如果符合条件的命令或路径有多个，就需要连续按两次 Tab 键，Bash 会提示所有符合条件的命令或路径。</p><p>除了命令或路径，Tab 还可以补全其他值。如果一个值以<code>$</code>开头，则按下 Tab 键会补全变量；如果以<code>~</code>开头，则补全用户名；如果以<code>@</code>开头，则补全主机名（hostname），主机名以列在<code>/etc/hosts</code>文件里面的主机为准。</p><p>自动补全相关的快捷键如下。</p><ul><li>Tab：完成自动补全。</li><li><code>Alt + ?</code>：列出可能的补全，与连按两次 Tab 键作用相同。</li><li><code>Alt + /</code>：尝试文件路径补全。</li><li><code>Ctrl + x /</code>：先按<code>Ctrl + x</code>，再按<code>/</code>，等同于<code>Alt + ?</code>，列出可能的文件路径补全。</li><li><code>Alt + !</code>：命令补全。</li><li><code>Ctrl + x !</code>：先按<code>Ctrl + x</code>，再按<code>!</code>，等同于<code>Alt + !</code>，命令补全。</li><li><code>Alt + ~</code>：用户名补全。</li><li><code>Ctrl + x ~</code>：先按<code>Ctrl + x</code>，再按<code>~</code>，等同于<code>Alt + ~</code>，用户名补全。</li><li><code>Alt + $</code>：变量名补全。</li><li><code>Ctrl + x $</code>：先按<code>Ctrl + x</code>，再按<code>$</code>，等同于<code>Alt + $</code>，变量名补全。</li><li><code>Alt + @</code>：主机名补全。</li><li><code>Ctrl + x @</code>：先按<code>Ctrl + x</code>，再按<code>@</code>，等同于<code>Alt + @</code>，主机名补全。</li><li><code>Alt + *</code>：在命令行一次性插入所有可能的补全。</li><li><code>Alt + Tab</code>：尝试用<code>.bash_history</code>里面以前执行命令，进行补全。</li></ul><p>上面的<code>Alt</code>键也可以用 ESC 键代替。</p><h2 id="操作历史"><a href="#操作历史" class="headerlink" title="操作历史"></a>操作历史</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>Bash 会保留用户的操作历史，即用户输入的每一条命令都会记录。有了操作历史以后，就可以使用方向键的<code>↑</code>和<code>↓</code>，快速浏览上一条和下一条命令。</p><p>退出当前 Shell 的时候，Bash 会将用户在当前 Shell 的操作历史写入<code>~/.bash_history</code>文件，该文件默认储存500个操作。</p><p>环境变量<code>HISTFILE</code>总是指向这个文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$HISTFILE</span></span><br><span class="line">/home/me/.bash_history</span><br></pre></td></tr></table></figure><p><code>history</code>命令会输出这个文件的全部内容。用户可以看到最近执行过的所有命令，每条命令之前都有行号。越近的命令，排在越后面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">history</span></span><br><span class="line">...</span><br><span class="line">498 <span class="built_in">echo</span> Goodbye</span><br><span class="line">499 <span class="built_in">ls</span> ~</span><br><span class="line">500 <span class="built_in">cd</span></span><br></pre></td></tr></table></figure><p>输入命令时，按下<code>Ctrl + r</code>快捷键，就可以搜索操作历史，选择以前执行过的命令。这时键入命令的开头部分，Shell 就会自动在历史文件中，查询并显示最近一条匹配的结果，这时按下回车键，就会执行那条命令。</p><p>下面的方法可以快速执行以前执行过的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> Hello World</span><br><span class="line">Hello World</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> Goodbye</span><br><span class="line">Goodbye</span><br><span class="line"></span><br><span class="line">$ !e</span><br><span class="line"><span class="built_in">echo</span> Goodbye</span><br><span class="line">Goodbye</span><br></pre></td></tr></table></figure><p>上面例子中，<code>!e</code>表示找出操作历史之中，最近的那一条以<code>e</code>开头的命令并执行。Bash 会先输出那一条命令<code>echo Goodbye</code>，然后直接执行。</p><p>同理，<code>!echo</code>也会执行最近一条以<code>echo</code>开头的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ !<span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> Goodbye</span><br><span class="line">Goodbye</span><br><span class="line"></span><br><span class="line">$ !<span class="built_in">echo</span> H</span><br><span class="line"><span class="built_in">echo</span> Goodbye H</span><br><span class="line">Goodbye H</span><br><span class="line"></span><br><span class="line">$ !<span class="built_in">echo</span> H G</span><br><span class="line"><span class="built_in">echo</span> Goodbye H G</span><br><span class="line">Goodbye H G</span><br></pre></td></tr></table></figure><p>注意，<code>!string</code>语法只会匹配命令，不会匹配参数。所以<code>!echo H</code>不会执行<code>echo Hello World</code>，而是会执行<code>echo Goodbye</code>，并把参数<code>H</code>附加在这条命令之后。同理，<code>!echo H G</code>也是等同于<code>echo Goodbye</code>命令之后附加<code>H G</code>。</p><p>由于<code>!string</code>语法会扩展成以前执行过的命令，所以含有<code>!</code>的字符串放在双引号里面，必须非常小心，如果它后面有非空格的字符，就很有可能报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;I say:\&quot;hello!\&quot;&quot;</span></span><br><span class="line">bash: !\: event not found</span><br></pre></td></tr></table></figure><p>上面的命令会报错，原因是感叹号后面是一个反斜杠，Bash 会尝试寻找，以前是否执行过反斜杠开头的命令，一旦找不到就会报错。解决方法就是在感叹号前面，也加上反斜杠。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;I say:\&quot;hello\!\&quot;&quot;</span></span><br><span class="line">I say:<span class="string">&quot;hello\!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="history-命令"><a href="#history-命令" class="headerlink" title="history 命令"></a>history 命令</h3><p>前面说过，<code>history</code>命令能显示操作历史，即<code>.bash_history</code>文件的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">history</span></span><br></pre></td></tr></table></figure><p>使用该命令，而不是直接读取<code>.bash_history</code>文件的好处是，它会在所有的操作前加上行号，最近的操作在最后面，行号最大。</p><p>通过定制环境变量<code>HISTTIMEFORMAT</code>，可以显示每个操作的时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">&#x27;%F %T  &#x27;</span></span><br><span class="line">$ <span class="built_in">history</span></span><br><span class="line">1  2013-06-09 10:40:12   <span class="built_in">cat</span> /etc/issue</span><br><span class="line">2  2013-06-09 10:40:12   clear</span><br></pre></td></tr></table></figure><p>上面代码中，<code>%F</code>相当于<code>%Y - %m - %d</code>，<code>%T</code>相当于<code> %H : %M : %S</code>。</p><p>只要设置<code>HISTTIMEFORMAT</code>这个环境变量，就会在<code>.bash_history</code>文件保存命令的执行时间戳。如果不设置，就不会保存时间戳。</p><p>环境变量<code>HISTSIZE</code>设置保存历史操作的数量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> HISTSIZE=10000</span><br></pre></td></tr></table></figure><p>上面命令设置保存过去10000条操作历史。</p><p>如果不希望保存本次操作的历史，可以设置<code>HISTSIZE</code>等于0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HISTSIZE=0</span><br></pre></td></tr></table></figure><p>如果<code>HISTSIZE=0</code>写入用户主目录的<code>~/.bashrc</code>文件，那么就不会保留该用户的操作历史。如果写入<code>/etc/profile</code>，整个系统都不会保留操作历史。</p><p>环境变量<code>HISTIGNORE</code>可以设置哪些命令不写入操作历史。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HISTIGNORE=<span class="string">&#x27;pwd:ls:exit&#x27;</span></span><br></pre></td></tr></table></figure><p>上面示例设置，<code>pwd</code>、<code>ls</code>、<code>exit</code>这三个命令不写入操作历史。</p><p>如果想搜索某个以前执行的命令，可以配合<code>grep</code>命令搜索操作历史。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">history</span> | grep /usr/bin</span><br></pre></td></tr></table></figure><p>上面命令返回<code>.bash_history</code>文件里面，那些包含<code>/usr/bin</code>的命令。</p><p>操作历史的每一条记录都有编号。知道了命令的编号以后，可以用<code>感叹号 + 编号</code>执行该命令。如果想要执行<code>.bash_history</code>里面的第8条命令，可以像下面这样操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ !8</span><br></pre></td></tr></table></figure><p><code>history</code>命令的<code>-c</code>参数可以清除操作历史。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">history</span> -c</span><br></pre></td></tr></table></figure><h3 id="相关快捷键"><a href="#相关快捷键" class="headerlink" title="相关快捷键"></a>相关快捷键</h3><p>下面是一些与操作历史相关的快捷键。</p><ul><li><code>Ctrl + p</code>：显示上一个命令，与向上箭头效果相同（previous）。</li><li><code>Ctrl + n</code>：显示下一个命令，与向下箭头效果相同（next）。</li><li><code>Alt + &lt;</code>：显示第一个命令。</li><li><code>Alt + &gt;</code>：显示最后一个命令，即当前的命令。</li><li><code>Ctrl + o</code>：执行历史文件里面的当前条目，并自动显示下一条命令。这对重复执行某个序列的命令很有帮助。</li></ul><p>感叹号<code>!</code>的快捷键如下。</p><ul><li><code>!!</code>：执行上一个命令。</li><li><code>!n</code>：<code>n</code>为数字，执行历史文件里面行号为<code>n</code>的命令。</li><li><code>!-n</code>：执行当前命令之前<code>n</code>条的命令。</li><li><code>!string</code>：执行最近一个以指定字符串<code>string</code>开头的命令。</li><li><code>!?string</code>：执行最近一条包含字符串<code>string</code>的命令。</li><li><code>!$</code>：代表上一个命令的最后一个参数。</li><li><code>!*</code>：代表上一个命令的所有参数，即除了命令以外的所有部分。</li><li><code>^string1^string2</code>：执行最近一条包含<code>string1</code>的命令，将其替换成<code>string2</code>。</li></ul><p>下面是<code>!$</code>和<code>!*</code>的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> a.txt b.txt</span><br><span class="line">$ <span class="built_in">echo</span> !$</span><br><span class="line">b.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cp</span> a.txt b.txt</span><br><span class="line">$ <span class="built_in">echo</span> !*</span><br><span class="line">a.txt b.txt</span><br></pre></td></tr></table></figure><p>上面示例中，<code>!$</code>代表上一个命令的最后一个参数（<code>b.txt</code>），<code>!*</code>代表上一个命令的所有参数（<code>a.txt b.txt</code>）。</p><p>下面是<code>^string1^string2</code>的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> /var/log/httpd/error.log</span><br><span class="line">$ ^error^access</span><br><span class="line"><span class="built_in">rm</span> /var/log/httpd/access.log</span><br></pre></td></tr></table></figure><p>上面示例中，<code>^error^access</code>将最近一条含有<code>error</code>的命令里面的<code>error</code>，替换成<code>access</code>。</p><p>如果希望确定是什么命令，然后再执行，可以打开<code>histverify</code>选项。这样的话，使用<code>!</code>快捷键所产生的命令，会先打印出来，等到用户按下回车键后再执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> -s histverify</span><br></pre></td></tr></table></figure><h2 id="其他快捷键"><a href="#其他快捷键" class="headerlink" title="其他快捷键"></a>其他快捷键</h2><ul><li><code>Ctrl + j</code>：等同于回车键（LINEFEED）。</li><li><code>Ctrl + m</code>：等同于回车键（CARRIAGE RETURN）。</li><li><code>Ctrl + o</code>：等同于回车键，并展示操作历史的下一个命令。 </li><li><code>Ctrl + v</code>：将下一个输入的特殊字符变成字面量，比如回车变成<code>^M</code>。</li><li><code>Ctrl + [</code>：等同于 ESC。 </li><li><code>Alt + .</code>：插入上一个命令的最后一个词。</li><li><code>Alt + _</code>：等同于<code>Alt + .</code>。</li></ul><p>上面的<code>Alt + .</code>快捷键，对于很长的文件路径，有时会非常方便。因为 Unix 命令的最后一个参数通常是文件路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> foo_bar</span><br><span class="line">$ <span class="built_in">cd</span> <span class="comment">#按下 Alt + .</span></span><br></pre></td></tr></table></figure><p>上面例子中，在<code>cd</code>命令后按下<code>Alt + .</code>，就会自动插入<code>foo_bar</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash 的算术运算</title>
      <link href="/2016/05/03/Bash%20%E7%9A%84%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/"/>
      <url>/2016/05/03/Bash%20%E7%9A%84%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="算术表达式"><a href="#算术表达式" class="headerlink" title="算术表达式"></a>算术表达式</h2><p><code>((...))</code>语法可以进行整数的算术运算。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ((foo = 5 + 5))</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line">10</span><br></pre></td></tr></table></figure><p><code>((...))</code>会自动忽略内部的空格，所以下面的写法都正确，得到同样的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ((2+2))</span><br><span class="line">$ (( 2+2 ))</span><br><span class="line">$ (( 2 + 2 ))</span><br></pre></td></tr></table></figure><p>这个语法不返回值，命令执行的结果根据算术运算的结果而定。只要算术结果不是<code>0</code>，命令就算执行成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ (( 3 + 2 ))</span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>上面例子中，<code>3 + 2</code>的结果是5，命令就算执行成功，环境变量<code>$?</code>为<code>0</code>。</p><p>如果算术结果为<code>0</code>，命令就算执行失败。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ (( 3 - 3 ))</span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>上面例子中，<code>3 - 3</code>的结果是<code>0</code>，环境变量<code>$?</code>为<code>1</code>，表示命令执行失败。</p><span id="more"></span><p>如果要读取算术运算的结果，需要在<code>((...))</code>前面加上美元符号<code>$((...))</code>，使其变成算术表达式，返回算术运算的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $((<span class="number">2</span> + <span class="number">2</span>))</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p><code>((...))</code>语法支持的算术运算符如下。</p><ul><li><code>+</code>：加法</li><li><code>-</code>：减法</li><li><code>*</code>：乘法</li><li><code>/</code>：除法（整除）</li><li><code>%</code>：余数</li><li><code>**</code>：指数</li><li><code>++</code>：自增运算（前缀或后缀）</li><li><code>--</code>：自减运算（前缀或后缀）</li></ul><p>注意，除法运算符的返回结果总是整数，比如<code>5</code>除以<code>2</code>，得到的结果是<code>2</code>，而不是<code>2.5</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $((<span class="number">5</span> / <span class="number">2</span>))</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p><code>++</code>和<code>--</code>这两个运算符有前缀和后缀的区别。作为前缀是先运算后返回值，作为后缀是先返回值后运算。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ i=0</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">0</span><br><span class="line">$ <span class="built_in">echo</span> $((i++))</span><br><span class="line">0</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">1</span><br><span class="line">$ <span class="built_in">echo</span> $((++i))</span><br><span class="line">2</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>上面例子中，<code>++</code>作为后缀是先返回值，执行<code>echo</code>命令，再进行自增运算；作为前缀则是先进行自增运算，再返回值执行<code>echo</code>命令。</p><p><code>$((...))</code>内部可以用圆括号改变运算顺序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $(( (<span class="number">2</span> + <span class="number">3</span>) * <span class="number">4</span> ))</span><br><span class="line">20</span><br></pre></td></tr></table></figure><p>上面例子中，内部的圆括号让加法先于乘法执行。</p><p><code>$((...))</code>结构可以嵌套。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $(((<span class="number">5</span>**<span class="number">2</span>) * <span class="number">3</span>))</span><br><span class="line">75</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">$ <span class="built_in">echo</span> $(($((<span class="number">5</span>**<span class="number">2</span>)) * 3))</span><br><span class="line">75</span><br></pre></td></tr></table></figure><p>这个语法只能计算整数，否则会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错</span></span><br><span class="line">$ <span class="built_in">echo</span> $((<span class="number">1.5</span> + <span class="number">1</span>))</span><br><span class="line">bash: 语法错误</span><br></pre></td></tr></table></figure><p><code>$((...))</code>的圆括号之中，不需要在变量名之前加上<code>$</code>，不过加上也不报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ number=2</span><br><span class="line">$ <span class="built_in">echo</span> $((<span class="variable">$number</span> + <span class="number">1</span>))</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>上面例子中，变量<code>number</code>前面有没有美元符号，结果都是一样的。</p><p>如果在<code>$((...))</code>里面使用字符串，Bash 会认为那是一个变量名。如果不存在同名变量，Bash 就会将其作为空值，因此不会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $(( &quot;hello&quot; + <span class="number">2</span>))</span><br><span class="line">2</span><br><span class="line">$ <span class="built_in">echo</span> $(( &quot;hello&quot; * <span class="number">2</span>))</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>上面例子中，<code>&quot;hello&quot;</code>会被当作变量名，返回空值，而<code>$((...))</code>会将空值当作<code>0</code>，所以乘法的运算结果就是<code>0</code>。同理，如果<code>$((...))</code>里面使用不存在的变量，也会当作<code>0</code>处理。</p><p>如果一个变量的值为字符串，跟上面的处理逻辑是一样的。即该字符串如果不对应已存在的变量，在<code>$((...))</code>里面会被当作空值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ foo=hello</span><br><span class="line">$ <span class="built_in">echo</span> $(( foo + <span class="number">2</span>))</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>上面例子中，变量<code>foo</code>的值是<code>hello</code>，而<code>hello</code>也会被看作变量名。这使得有可能写出动态替换的代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ foo=hello</span><br><span class="line">$ hello=3</span><br><span class="line">$ <span class="built_in">echo</span> $(( foo + <span class="number">2</span> ))</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>上面代码中，<code>foo + 2</code>取决于变量<code>hello</code>的值。</p><p>最后，<code>$[...]</code>是以前的语法，也可以做整数运算，不建议使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $[2+2]</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="数值的进制"><a href="#数值的进制" class="headerlink" title="数值的进制"></a>数值的进制</h2><p>Bash 的数值默认都是十进制，但是在算术表达式中，也可以使用其他进制。</p><ul><li><code>number</code>：没有任何特殊表示法的数字是十进制数（以10为底）。</li><li><code>0number</code>：八进制数。</li><li><code>0xnumber</code>：十六进制数。</li><li><code>base#number</code>：<code>base</code>进制的数。</li></ul><p>下面是一些例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $((<span class="number">0</span>xff))</span><br><span class="line">255</span><br><span class="line">$ <span class="built_in">echo</span> $((<span class="number">2#11111111</span>))</span><br><span class="line">255</span><br></pre></td></tr></table></figure><p>上面例子中，<code>0xff</code>是十六进制数，<code>2#11111111</code>是二进制数。</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p><code>$((...))</code>支持以下的二进制位运算符。</p><ul><li><code>&lt;&lt;</code>：位左移运算，把一个数字的所有位向左移动指定的位。</li><li><code>&gt;&gt;</code>：位右移运算，把一个数字的所有位向右移动指定的位。</li><li><code>&amp;</code>：位的“与”运算，对两个数字的所有位执行一个<code>AND</code>操作。</li><li><code>|</code>：位的“或”运算，对两个数字的所有位执行一个<code>OR</code>操作。</li><li><code>~</code>：位的“否”运算，对一个数字的所有位取反。</li><li><code>^</code>：位的异或运算（exclusive or），对两个数字的所有位执行一个异或操作。</li></ul><p>下面是右移运算符<code>&gt;&gt;</code>的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $((<span class="number">16</span>&gt;&gt;<span class="number">2</span>))</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>下面是左移运算符<code>&lt;&lt;</code>的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $((<span class="number">16</span>&lt;&lt;<span class="number">2</span>))</span><br><span class="line">64</span><br></pre></td></tr></table></figure><p>下面是<code>17</code>（二进制<code>10001</code>）和<code>3</code>（二进制<code>11</code>）的各种二进制运算的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $((<span class="number">17</span>&amp;<span class="number">3</span>))</span><br><span class="line">1</span><br><span class="line">$ <span class="built_in">echo</span> $((<span class="number">17</span>|<span class="number">3</span>))</span><br><span class="line">19</span><br><span class="line">$ <span class="built_in">echo</span> $((<span class="number">17</span>^<span class="number">3</span>))</span><br><span class="line">18</span><br></pre></td></tr></table></figure><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><p><code>$((...))</code>支持以下的逻辑运算符。</p><ul><li><code>&lt;</code>：小于</li><li><code>&gt;</code>：大于</li><li><code>&lt;=</code>：小于或相等</li><li><code>&gt;=</code>：大于或相等</li><li><code>==</code>：相等</li><li><code>!=</code>：不相等</li><li><code>&amp;&amp;</code>：逻辑与</li><li><code>||</code>：逻辑或</li><li><code>!</code>：逻辑否</li><li><code>expr1?expr2:expr3</code>：三元条件运算符。若表达式<code>expr1</code>的计算结果为非零值（算术真），则执行表达式<code>expr2</code>，否则执行表达式<code>expr3</code>。</li></ul><p>如果逻辑表达式为真，返回<code>1</code>，否则返回<code>0</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $((<span class="number">3</span> &gt; <span class="number">2</span>))</span><br><span class="line">1</span><br><span class="line">$ <span class="built_in">echo</span> $(( (<span class="number">3</span> &gt; <span class="number">2</span>) || (<span class="number">4</span> &lt;= <span class="number">1</span>) ))</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>三元运算符执行一个单独的逻辑测试。它用起来类似于<code>if/then/else</code>语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ a=0</span><br><span class="line">$ <span class="built_in">echo</span> $((a&lt;<span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>))</span><br><span class="line">1</span><br><span class="line">$ <span class="built_in">echo</span> $((a&gt;<span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>))</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>上面例子中，第一个表达式为真时，返回第二个表达式的值，否则返回第三个表达式的值。</p><h2 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h2><p>算术表达式<code>$((...))</code>可以执行赋值运算。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $((a=<span class="number">1</span>))</span><br><span class="line">1</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>上面例子中，<code>a=1</code>对变量<code>a</code>进行赋值。这个式子本身也是一个表达式，返回值就是等号右边的值。</p><p><code>$((...))</code>支持的赋值运算符，有以下这些。</p><ul><li><code>parameter = value</code>：简单赋值。</li><li><code>parameter += value</code>：等价于<code>parameter = parameter + value</code>。</li><li><code>parameter -= value</code>：等价于<code>parameter = parameter – value</code>。</li><li><code>parameter *= value</code>：等价于<code>parameter = parameter * value</code>。</li><li><code>parameter /= value</code>：等价于<code>parameter = parameter / value</code>。</li><li><code>parameter %= value</code>：等价于<code>parameter = parameter % value</code>。</li><li><code>parameter &lt;&lt;= value</code>：等价于<code>parameter = parameter &lt;&lt; value</code>。</li><li><code>parameter &gt;&gt;= value</code>：等价于<code>parameter = parameter &gt;&gt; value</code>。</li><li><code>parameter &amp;= value</code>：等价于<code>parameter = parameter &amp; value</code>。</li><li><code>parameter |= value</code>：等价于<code>parameter = parameter | value</code>。</li><li><code>parameter ^= value</code>：等价于<code>parameter = parameter ^ value</code>。</li></ul><p>下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ foo=5</span><br><span class="line">$ <span class="built_in">echo</span> $((foo*=<span class="number">2</span>))</span><br><span class="line">10</span><br></pre></td></tr></table></figure><p>如果在表达式内部赋值，可以放在圆括号中，否则会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $(( a&lt;<span class="number">1</span> ? (a+=<span class="number">1</span>) : (a-=<span class="number">1</span>) ))</span><br></pre></td></tr></table></figure><h2 id="求值运算"><a href="#求值运算" class="headerlink" title="求值运算"></a>求值运算</h2><p>逗号<code>,</code>在<code>$((...))</code>内部是求值运算符，执行前后两个表达式，并返回后一个表达式的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $((foo = <span class="number">1</span> + <span class="number">2</span>, <span class="number">3</span> * <span class="number">4</span>))</span><br><span class="line">12</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>上面例子中，逗号前后两个表达式都会执行，然后返回后一个表达式的值<code>12</code>。</p><h2 id="expr-命令"><a href="#expr-命令" class="headerlink" title="expr 命令"></a>expr 命令</h2><p><code>expr</code>命令支持算术运算，可以不使用<code>((...))</code>语法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">expr</span> 3 + 2</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p><code>expr</code>命令支持变量替换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ foo=3</span><br><span class="line">$ <span class="built_in">expr</span> <span class="variable">$foo</span> + 2</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p><code>expr</code>命令也不支持非整数参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">expr</span> 3.5 + 2</span><br><span class="line"><span class="built_in">expr</span>: 非整数参数</span><br></pre></td></tr></table></figure><p>上面例子中，如果有非整数的运算，<code>expr</code>命令就报错了。</p><h2 id="let-命令"><a href="#let-命令" class="headerlink" title="let 命令"></a>let 命令</h2><p><code>let</code>命令用于将算术运算的结果，赋予一个变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">let</span> x=2+3</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$x</span></span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>上面例子中，变量<code>x</code>等于<code>2+3</code>的运算结果。</p><p>注意，<code>x=2+3</code>这个式子里面不能有空格，否则会报错。<code>let</code>命令的详细用法参见《变量》一章。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串操作</title>
      <link href="/2016/04/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
      <url>/2016/04/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>本章介绍 Bash 字符串操作的语法。</p><h2 id="字符串的长度"><a href="#字符串的长度" class="headerlink" title="字符串的长度"></a>字符串的长度</h2><p>获取字符串长度的语法如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;#varname&#125;</span></span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ myPath=/home/cam/book/long.file.name</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;#myPath&#125;</span></span><br><span class="line">29</span><br></pre></td></tr></table></figure><p>大括号<code>&#123;&#125;</code>是必需的，否则 Bash 会将<code>$#</code>理解成脚本的参数个数，将变量名理解成文本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$#myvar</span></span><br><span class="line">0myvar</span><br></pre></td></tr></table></figure><p>上面例子中，Bash 将<code>$#</code>和<code>myvar</code>分开解释了。</p><span id="more"></span><h2 id="子字符串"><a href="#子字符串" class="headerlink" title="子字符串"></a>子字符串</h2><p>字符串提取子串的语法如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;varname:offset:length&#125;</span></span><br></pre></td></tr></table></figure><p>上面语法的含义是返回变量<code>$varname</code>的子字符串，从位置<code>offset</code>开始（从<code>0</code>开始计算），长度为<code>length</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ count=frogfootman</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;count:4:4&#125;</span></span><br><span class="line">foot</span><br></pre></td></tr></table></figure><p>上面例子返回字符串<code>frogfootman</code>从4号位置开始的长度为4的子字符串<code>foot</code>。</p><p>这种语法不能直接操作字符串，只能通过变量来读取字符串，并且不会改变原始字符串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;&quot;hello&quot;:2:3&#125;</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>&quot;hello&quot;</code>不是变量名，导致 Bash 报错。</p><p>如果省略<code>length</code>，则从位置<code>offset</code>开始，一直返回到字符串的结尾。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ count=frogfootman</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;count:4&#125;</span></span><br><span class="line">footman</span><br></pre></td></tr></table></figure><p>上面例子是返回变量<code>count</code>从4号位置一直到结尾的子字符串。</p><p>如果<code>offset</code>为负值，表示从字符串的末尾开始算起。注意，负数前面必须有一个空格， 以防止与<code>$&#123;variable:-word&#125;</code>的变量的设置默认值语法混淆。这时还可以指定<code>length</code>，<code>length</code>可以是正值，也可以是负值（负值不能超过<code>offset</code>的长度）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ foo=<span class="string">&quot;This string is long.&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo: -5&#125;</span></span><br><span class="line">long.</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo: -5:2&#125;</span></span><br><span class="line">lo</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo: -5:-2&#125;</span></span><br><span class="line">lon</span><br></pre></td></tr></table></figure><p>上面例子中，<code>offset</code>为<code>-5</code>，表示从倒数第5个字符开始截取，所以返回<code>long.</code>。如果指定长度<code>length</code>为<code>2</code>，则返回<code>lo</code>；如果<code>length</code>为<code>-2</code>，表示要排除从字符串末尾开始的2个字符，所以返回<code>lon</code>。</p><h2 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h2><p>Bash 提供字符串搜索和替换的多种方法。</p><p><strong>（1）字符串头部的模式匹配。</strong></p><p>以下两种语法可以检查字符串开头，是否匹配给定的模式。如果匹配成功，就删除匹配的部分，返回剩下的部分。原始变量不会发生变化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果 pattern 匹配变量 variable 的开头，</span></span><br><span class="line"><span class="comment"># 删除最短匹配（非贪婪匹配）的部分，返回剩余部分</span></span><br><span class="line"><span class="variable">$&#123;variable#pattern&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 pattern 匹配变量 variable 的开头，</span></span><br><span class="line"><span class="comment"># 删除最长匹配（贪婪匹配）的部分，返回剩余部分</span></span><br><span class="line"><span class="variable">$&#123;variable##pattern&#125;</span></span><br></pre></td></tr></table></figure><p>上面两种语法会删除变量字符串开头的匹配部分（将其替换为空），返回剩下的部分。区别是一个是最短匹配（又称非贪婪匹配），另一个是最长匹配（又称贪婪匹配）。</p><p>匹配模式<code>pattern</code>可以使用<code>*</code>、<code>?</code>、<code>[]</code>等通配符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ myPath=/home/cam/book/long.file.name</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;myPath#/*/&#125;</span></span><br><span class="line">cam/book/long.file.name</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;myPath##/*/&#125;</span></span><br><span class="line">long.file.name</span><br></pre></td></tr></table></figure><p>上面例子中，匹配的模式是<code>/*/</code>，其中<code>*</code>可以匹配任意数量的字符，所以最短匹配是<code>/home/</code>，最长匹配是<code>/home/cam/book/</code>。</p><p>下面写法可以删除文件路径的目录部分，只留下文件名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ path=/home/cam/book/long.file.name</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;path##*/&#125;</span></span><br><span class="line">long.file.name</span><br></pre></td></tr></table></figure><p>上面例子中，模式<code>*/</code>匹配目录部分，所以只返回文件名。</p><p>下面再看一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ phone=<span class="string">&quot;555-456-1414&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;phone#*-&#125;</span></span><br><span class="line">456-1414</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;phone##*-&#125;</span></span><br><span class="line">1414</span><br></pre></td></tr></table></figure><p>如果匹配不成功，则返回原始字符串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ phone=<span class="string">&quot;555-456-1414&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;phone#444&#125;</span></span><br><span class="line">555-456-1414</span><br></pre></td></tr></table></figure><p>上面例子中，原始字符串里面无法匹配模式<code>444</code>，所以原样返回。</p><p>如果要将头部匹配的部分，替换成其他内容，采用下面的写法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模式必须出现在字符串的开头</span></span><br><span class="line"><span class="variable">$&#123;variable/#pattern/string&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">$ foo=JPG.JPG</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo/#JPG/jpg&#125;</span></span><br><span class="line">jpg.JPG</span><br></pre></td></tr></table></figure><p>上面例子中，被替换的<code>JPG</code>必须出现在字符串头部，所以返回<code>jpg.JPG</code>。</p><p><strong>（2）字符串尾部的模式匹配。</strong></p><p>以下两种语法可以检查字符串结尾，是否匹配给定的模式。如果匹配成功，就删除匹配的部分，返回剩下的部分。原始变量不会发生变化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果 pattern 匹配变量 variable 的结尾，</span></span><br><span class="line"><span class="comment"># 删除最短匹配（非贪婪匹配）的部分，返回剩余部分</span></span><br><span class="line"><span class="variable">$&#123;variable%pattern&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 pattern 匹配变量 variable 的结尾，</span></span><br><span class="line"><span class="comment"># 删除最长匹配（贪婪匹配）的部分，返回剩余部分</span></span><br><span class="line"><span class="variable">$&#123;variable%%pattern&#125;</span></span><br></pre></td></tr></table></figure><p>上面两种语法会删除变量字符串结尾的匹配部分（将其替换为空），返回剩下的部分。区别是一个是最短匹配（又称非贪婪匹配），另一个是最长匹配（又称贪婪匹配）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ path=/home/cam/book/long.file.name</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;path%.*&#125;</span></span><br><span class="line">/home/cam/book/long.file</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;path%%.*&#125;</span></span><br><span class="line">/home/cam/book/long</span><br></pre></td></tr></table></figure><p>上面例子中，匹配模式是<code>.*</code>，其中<code>*</code>可以匹配任意数量的字符，所以最短匹配是<code>.name</code>，最长匹配是<code>.file.name</code>。</p><p>下面写法可以删除路径的文件名部分，只留下目录部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ path=/home/cam/book/long.file.name</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;path%/*&#125;</span></span><br><span class="line">/home/cam/book</span><br></pre></td></tr></table></figure><p>上面例子中，模式<code>/*</code>匹配文件名部分，所以只返回目录部分。</p><p>下面的写法可以替换文件的后缀名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ file=foo.png</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;file%.png&#125;</span>.jpg</span><br><span class="line">foo.jpg</span><br></pre></td></tr></table></figure><p>上面的例子将文件的后缀名，从<code>.png</code>改成了<code>.jpg</code>。</p><p>下面再看一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ phone=<span class="string">&quot;555-456-1414&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;phone%-*&#125;</span></span><br><span class="line">555-456</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;phone%%-*&#125;</span></span><br><span class="line">555</span><br></pre></td></tr></table></figure><p>如果匹配不成功，则返回原始字符串。</p><p>如果要将尾部匹配的部分，替换成其他内容，采用下面的写法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模式必须出现在字符串的结尾</span></span><br><span class="line"><span class="variable">$&#123;variable/%pattern/string&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">$ foo=JPG.JPG</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo/%JPG/jpg&#125;</span></span><br><span class="line">JPG.jpg</span><br></pre></td></tr></table></figure><p>上面例子中，被替换的<code>JPG</code>必须出现在字符串尾部，所以返回<code>JPG.jpg</code>。</p><p><strong>（3）任意位置的模式匹配。</strong></p><p>以下两种语法可以检查字符串内部，是否匹配给定的模式。如果匹配成功，就删除匹配的部分，换成其他的字符串返回。原始变量不会发生变化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果 pattern 匹配变量 variable 的一部分，</span></span><br><span class="line"><span class="comment"># 最长匹配（贪婪匹配）的那部分被 string 替换，但仅替换第一个匹配</span></span><br><span class="line"><span class="variable">$&#123;variable/pattern/string&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 pattern 匹配变量 variable 的一部分，</span></span><br><span class="line"><span class="comment"># 最长匹配（贪婪匹配）的那部分被 string 替换，所有匹配都替换</span></span><br><span class="line"><span class="variable">$&#123;variable//pattern/string&#125;</span></span><br></pre></td></tr></table></figure><p>上面两种语法都是最长匹配（贪婪匹配）下的替换，区别是前一个语法仅仅替换第一个匹配，后一个语法替换所有匹配。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ path=/home/cam/foo/foo.name</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;path/foo/bar&#125;</span></span><br><span class="line">/home/cam/bar/foo.name</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;path//foo/bar&#125;</span></span><br><span class="line">/home/cam/bar/bar.name</span><br></pre></td></tr></table></figure><p>上面例子中，前一个命令只替换了第一个<code>foo</code>，后一个命令将两个<code>foo</code>都替换了。</p><p>下面的例子将分隔符从<code>:</code>换成换行符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -e <span class="variable">$&#123;PATH//:/&#x27;\n&#x27;&#125;</span></span><br><span class="line">/usr/local/bin</span><br><span class="line">/usr/bin</span><br><span class="line">/bin</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>上面例子中，<code>echo</code>命令的<code>-e</code>参数，表示将替换后的字符串的<code>\n</code>字符，解释为换行符。</p><p>模式部分可以使用通配符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ phone=<span class="string">&quot;555-456-1414&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;phone/5?4/-&#125;</span></span><br><span class="line">55-56-1414</span><br></pre></td></tr></table></figure><p>上面的例子将<code>5-4</code>替换成<code>-</code>。</p><p>如果省略了<code>string</code>部分，那么就相当于匹配的部分替换成空字符串，即删除匹配的部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ path=/home/cam/foo/foo.name</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;path/.*/&#125;</span></span><br><span class="line">/home/cam/foo/foo</span><br></pre></td></tr></table></figure><p>上面例子中，第二个斜杠后面的<code>string</code>部分省略了，所以模式<code>.*</code>匹配的部分<code>.name</code>被删除后返回。</p><p>前面提到过，这个语法还有两种扩展形式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模式必须出现在字符串的开头</span></span><br><span class="line"><span class="variable">$&#123;variable/#pattern/string&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模式必须出现在字符串的结尾</span></span><br><span class="line"><span class="variable">$&#123;variable/%pattern/string&#125;</span></span><br></pre></td></tr></table></figure><h2 id="改变大小写"><a href="#改变大小写" class="headerlink" title="改变大小写"></a>改变大小写</h2><p>下面的语法可以改变变量的大小写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转为大写</span></span><br><span class="line"><span class="variable">$&#123;varname^^&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转为小写</span></span><br><span class="line"><span class="variable">$&#123;varname,,&#125;</span></span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ foo=heLLo</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo^^&#125;</span></span><br><span class="line">HELLO</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;foo,,&#125;</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash 变量</title>
      <link href="/2016/03/31/Bash%20%E5%8F%98%E9%87%8F/"/>
      <url>/2016/03/31/Bash%20%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Bash 变量分成环境变量和自定义变量两类。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>环境变量是 Bash 环境自带的变量，进入 Shell 时已经定义好了，可以直接使用。它们通常是系统定义好的，也可以由用户从父 Shell 传入子 Shell。</p><p><code>env</code>命令或<code>printenv</code>命令，可以显示所有环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">env</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ <span class="built_in">printenv</span></span><br></pre></td></tr></table></figure><p>下面是一些常见的环境变量。</p><ul><li><code>BASHPID</code>：Bash 进程的进程 ID。</li><li><code>BASHOPTS</code>：当前 Shell 的参数，可以用<code>shopt</code>命令修改。</li><li><code>DISPLAY</code>：图形环境的显示器名字，通常是<code>:0</code>，表示 X Server 的第一个显示器。</li><li><code>EDITOR</code>：默认的文本编辑器。</li><li><code>HOME</code>：用户的主目录。</li><li><code>HOST</code>：当前主机的名称。</li><li><code>IFS</code>：词与词之间的分隔符，默认为空格。</li><li><code>LANG</code>：字符集以及语言编码，比如<code>zh_CN.UTF-8</code>。</li><li><code>PATH</code>：由冒号分开的目录列表，当输入可执行程序名后，会搜索这个目录列表。</li><li><code>PS1</code>：Shell 提示符。</li><li><code>PS2</code>： 输入多行命令时，次要的 Shell 提示符。</li><li><code>PWD</code>：当前工作目录。</li><li><code>RANDOM</code>：返回一个0到32767之间的随机数。</li><li><code>SHELL</code>：Shell 的名字。</li><li><code>SHELLOPTS</code>：启动当前 Shell 的<code>set</code>命令的参数，参见《set 命令》一章。</li><li><code>TERM</code>：终端类型名，即终端仿真器所用的协议。</li><li><code>UID</code>：当前用户的 ID 编号。</li><li><code>USER</code>：当前用户的用户名。</li></ul><p>很多环境变量很少发生变化，而且是只读的，可以视为常量。由于它们的变量名全部都是大写，所以传统上，如果用户要自己定义一个常量，也会使用全部大写的变量名。</p><span id="more"></span><p>注意，Bash 变量名区分大小写，<code>HOME</code>和<code>home</code>是两个不同的变量。</p><p>查看单个环境变量的值，可以使用<code>printenv</code>命令或<code>echo</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">printenv</span> PATH</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>注意，<code>printenv</code>命令后面的变量名，不用加前缀<code>$</code>。</p><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><p>自定义变量是用户在当前 Shell 里面自己定义的变量，仅在当前 Shell 可用。一旦退出当前 Shell，该变量就不存在了。</p><p><code>set</code>命令可以显示所有变量（包括环境变量和自定义变量），以及所有的 Bash 函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">set</span></span><br></pre></td></tr></table></figure><h2 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a>创建变量</h2><p>用户创建变量的时候，变量名必须遵守下面的规则。</p><ul><li>字母、数字和下划线字符组成。</li><li>第一个字符必须是一个字母或一个下划线，不能是数字。</li><li>不允许出现空格和标点符号。</li></ul><p>变量声明的语法如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable=value</span><br></pre></td></tr></table></figure><p>上面命令中，等号左边是变量名，右边是变量。注意，等号两边不能有空格。</p><p>如果变量的值包含空格，则必须将值放在引号中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvar=<span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><p>Bash 没有数据类型的概念，所有的变量值都是字符串。</p><p>下面是一些自定义变量的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=z                     <span class="comment"># 变量 a 赋值为字符串 z</span></span><br><span class="line">b=<span class="string">&quot;a string&quot;</span>            <span class="comment"># 变量值包含空格，就必须放在引号里面</span></span><br><span class="line">c=<span class="string">&quot;a string and <span class="variable">$b</span>&quot;</span>     <span class="comment"># 变量值可以引用其他变量的值</span></span><br><span class="line">d=<span class="string">&quot;\t\ta string\n&quot;</span>      <span class="comment"># 变量值可以使用转义字符</span></span><br><span class="line">e=$(<span class="built_in">ls</span> -l foo.txt)      <span class="comment"># 变量值可以是命令的执行结果</span></span><br><span class="line">f=$((<span class="number">5</span> * <span class="number">7</span>))            <span class="comment"># 变量值可以是数学运算的结果</span></span><br></pre></td></tr></table></figure><p>变量可以重复赋值，后面的赋值会覆盖前面的赋值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ foo=1</span><br><span class="line">$ foo=2</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>上面例子中，变量<code>foo</code>的第二次赋值会覆盖第一次赋值。</p><p>如果同一行定义多个变量，必须使用分号（<code>;</code>）分隔。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ foo=1;bar=2</span><br></pre></td></tr></table></figure><p>上面例子中，同一行定义了<code>foo</code>和<code>bar</code>两个变量。</p><h2 id="读取变量"><a href="#读取变量" class="headerlink" title="读取变量"></a>读取变量</h2><p>读取变量的时候，直接在变量名前加上<code>$</code>就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ foo=bar</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line">bar</span><br></pre></td></tr></table></figure><p>每当 Shell 看到以<code>$</code>开头的单词时，就会尝试读取这个变量名对应的值。</p><p>如果变量不存在，Bash 不会报错，而会输出空字符。</p><p>由于<code>$</code>在 Bash 中有特殊含义，把它当作美元符号使用时，一定要非常小心，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> The total is <span class="variable">$100</span>.00</span><br><span class="line">The total is 00.00</span><br></pre></td></tr></table></figure><p>上面命令的原意是输入<code>$100</code>，但是 Bash 将<code>$1</code>解释成了变量，该变量为空，因此输入就变成了<code>00.00</code>。所以，如果要使用<code>$</code>的原义，需要在<code>$</code>前面放上反斜杠，进行转义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> The total is \<span class="variable">$100</span>.00</span><br><span class="line">The total is <span class="variable">$100</span>.00</span><br></pre></td></tr></table></figure><p>读取变量的时候，变量名也可以使用花括号<code>&#123;&#125;</code>包围，比如<code>$a</code>也可以写成<code>$&#123;a&#125;</code>。这种写法可以用于变量名与其他字符连用的情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ a=foo</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$a_file</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span>_file</span><br><span class="line">foo_file</span><br></pre></td></tr></table></figure><p>上面代码中，变量名<code>a_file</code>不会有任何输出，因为 Bash 将其整个解释为变量，而这个变量是不存在的。只有用花括号区分<code>$a</code>，Bash 才能正确解读。</p><p>事实上，读取变量的语法<code>$foo</code>，可以看作是<code>$&#123;foo&#125;</code>的简写形式。</p><p>如果变量的值本身也是变量，可以使用<code>$&#123;!varname&#125;</code>的语法，读取最终的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ myvar=USER</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;!myvar&#125;</span></span><br><span class="line">ruanyf</span><br></pre></td></tr></table></figure><p>上面的例子中，变量<code>myvar</code>的值是<code>USER</code>，<code>$&#123;!myvar&#125;</code>的写法将其展开成最终的值。</p><p>如果变量值包含连续空格（或制表符和换行符），最好放在双引号里面读取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ a=<span class="string">&quot;1 2  3&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">1 2 3</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span>&quot;</span></span><br><span class="line">1 2  3</span><br></pre></td></tr></table></figure><p>上面示例中，变量<code>a</code>的值包含两个连续空格。如果直接读取，Shell 会将连续空格合并成一个。只有放在双引号里面读取，才能保持原来的格式。</p><h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h2><p><code>unset</code>命令用来删除一个变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> NAME</span><br></pre></td></tr></table></figure><p>这个命令不是很有用。因为不存在的 Bash 变量一律等于空字符串，所以即使<code>unset</code>命令删除了变量，还是可以读取这个变量，值为空字符串。</p><p>所以，删除一个变量，也可以将这个变量设成空字符串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ foo=<span class="string">&#x27;&#x27;</span></span><br><span class="line">$ foo=</span><br></pre></td></tr></table></figure><p>上面两种写法，都是删除了变量<code>foo</code>。由于不存在的值默认为空字符串，所以后一种写法可以在等号右边不写任何值。</p><h2 id="输出变量，export-命令"><a href="#输出变量，export-命令" class="headerlink" title="输出变量，export 命令"></a>输出变量，export 命令</h2><p>用户创建的变量仅可用于当前 Shell，子 Shell 默认读取不到父 Shell 定义的变量。为了把变量传递给子 Shell，需要使用<code>export</code>命令。这样输出的变量，对于子 Shell 来说就是环境变量。</p><p><code>export</code>命令用来向子 Shell 输出变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME=foo</span><br><span class="line"><span class="built_in">export</span> NAME</span><br></pre></td></tr></table></figure><p>上面命令输出了变量<code>NAME</code>。变量的赋值和输出也可以在一个步骤中完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NAME=value</span><br></pre></td></tr></table></figure><p>上面命令执行后，当前 Shell 及随后新建的子 Shell，都可以读取变量<code>$NAME</code>。</p><p>子 Shell 如果修改继承的变量，不会影响父 Shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出变量 $foo</span></span><br><span class="line">$ <span class="built_in">export</span> foo=bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建子 Shell</span></span><br><span class="line">$ bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 $foo</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line">bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改继承的变量</span></span><br><span class="line">$ foo=baz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出子 Shell</span></span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 $foo</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line">bar</span><br></pre></td></tr></table></figure><p>上面例子中，子 Shell 修改了继承的变量<code>$foo</code>，对父 Shell 没有影响。</p><h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><p>Bash 提供一些特殊变量。这些变量的值由 Shell 提供，用户不能进行赋值。</p><p>（1）<code>$?</code></p><p><code>$?</code>为上一个命令的退出码，用来判断上一个命令是否执行成功。返回值是<code>0</code>，表示上一个命令执行成功；如果不是零，表示上一个命令执行失败。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> doesnotexist</span><br><span class="line"><span class="built_in">ls</span>: doesnotexist: No such file or directory</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>上面例子中，<code>ls</code>命令查看一个不存在的文件，导致报错。<code>$?</code>为1，表示上一个命令执行失败。</p><p>（2）<code>$$</code></p><p><code>$$</code>为当前 Shell 的进程 ID。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $$</span><br><span class="line">10662</span><br></pre></td></tr></table></figure><p>这个特殊变量可以用来命名临时文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOGFILE=/tmp/output_log.$$</span><br></pre></td></tr></table></figure><p>（3）<code>$_</code></p><p><code>$_</code>为上一个命令的最后一个参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ grep dictionary /usr/share/dict/words</span><br><span class="line">dictionary</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$_</span></span><br><span class="line">/usr/share/dict/words</span><br></pre></td></tr></table></figure><p>（4）<code>$!</code></p><p><code>$!</code>为最近一个后台执行的异步命令的进程 ID。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ firefox &amp;</span><br><span class="line">[1] 11064</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> $!</span><br><span class="line">11064</span><br></pre></td></tr></table></figure><p>上面例子中，<code>firefox</code>是后台运行的命令，<code>$!</code>返回该命令的进程 ID。</p><p>（5）<code>$0</code></p><p><code>$0</code>为当前 Shell 的名称（在命令行直接执行时）或者脚本名（在脚本中执行时）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$0</span></span><br><span class="line">bash</span><br></pre></td></tr></table></figure><p>上面例子中，<code>$0</code>返回当前运行的是 Bash。</p><p>（6）<code>$-</code></p><p><code>$-</code>为当前 Shell 的启动参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $-</span><br><span class="line">himBHs</span><br></pre></td></tr></table></figure><p>（7）<code>$@</code>和<code>$#</code></p><p><code>$#</code>表示脚本的参数数量，<code>$@</code>表示脚本的参数值，参见脚本一章。</p><h2 id="变量的默认值"><a href="#变量的默认值" class="headerlink" title="变量的默认值"></a>变量的默认值</h2><p>Bash 提供四个特殊语法，跟变量的默认值有关，目的是保证变量不为空。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;varname:-word&#125;</span></span><br></pre></td></tr></table></figure><p>上面语法的含义是，如果变量<code>varname</code>存在且不为空，则返回它的值，否则返回<code>word</code>。它的目的是返回一个默认值，比如<code>$&#123;count:-0&#125;</code>表示变量<code>count</code>不存在时返回<code>0</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;varname:=word&#125;</span></span><br></pre></td></tr></table></figure><p>上面语法的含义是，如果变量<code>varname</code>存在且不为空，则返回它的值，否则将它设为<code>word</code>，并且返回<code>word</code>。它的目的是设置变量的默认值，比如<code>$&#123;count:=0&#125;</code>表示变量<code>count</code>不存在时返回<code>0</code>，且将<code>count</code>设为<code>0</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;varname:+word&#125;</span></span><br></pre></td></tr></table></figure><p>上面语法的含义是，如果变量名存在且不为空，则返回<code>word</code>，否则返回空值。它的目的是测试变量是否存在，比如<code>$&#123;count:+1&#125;</code>表示变量<code>count</code>存在时返回<code>1</code>（表示<code>true</code>），否则返回空值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;varname:?message&#125;</span></span><br></pre></td></tr></table></figure><p>上面语法的含义是，如果变量<code>varname</code>存在且不为空，则返回它的值，否则打印出<code>varname: message</code>，并中断脚本的执行。如果省略了<code>message</code>，则输出默认的信息“parameter null or not set.”。它的目的是防止变量未定义，比如<code>$&#123;count:?&quot;undefined!&quot;&#125;</code>表示变量<code>count</code>未定义时就中断执行，抛出错误，返回给定的报错信息<code>undefined!</code>。</p><p>上面四种语法如果用在脚本中，变量名的部分可以用数字<code>1</code>到<code>9</code>，表示脚本的参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=<span class="variable">$&#123;1:?&quot;filename missing.&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>上面代码出现在脚本中，<code>1</code>表示脚本的第一个参数。如果该参数不存在，就退出脚本并报错。</p><h2 id="declare-命令"><a href="#declare-命令" class="headerlink" title="declare 命令"></a>declare 命令</h2><p><code>declare</code>命令可以声明一些特殊类型的变量，为变量设置一些限制，比如声明只读类型的变量和整数类型的变量。</p><p>它的语法形式如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> OPTION VARIABLE=value</span><br></pre></td></tr></table></figure><p><code>declare</code>命令的主要参数（OPTION）如下。</p><ul><li><code>-a</code>：声明数组变量。</li><li><code>-f</code>：输出所有函数定义。</li><li><code>-F</code>：输出所有函数名。</li><li><code>-i</code>：声明整数变量。</li><li><code>-l</code>：声明变量为小写字母。</li><li><code>-p</code>：查看变量信息。</li><li><code>-r</code>：声明只读变量。</li><li><code>-u</code>：声明变量为大写字母。</li><li><code>-x</code>：该变量输出为环境变量。</li></ul><p><code>declare</code>命令如果用在函数中，声明的变量只在函数内部有效，等同于<code>local</code>命令。</p><p>不带任何参数时，<code>declare</code>命令输出当前环境的所有变量，包括函数在内，等同于不带有任何参数的<code>set</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span></span><br></pre></td></tr></table></figure><p><strong>（1）<code>-i</code>参数</strong></p><p><code>-i</code>参数声明整数变量以后，可以直接进行数学运算。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -i val1=12 val2=5</span><br><span class="line">$ <span class="built_in">declare</span> -i result</span><br><span class="line">$ result=val1*val2</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">60</span><br></pre></td></tr></table></figure><p>上面例子中，如果变量<code>result</code>不声明为整数，<code>val1*val2</code>会被当作字面量，不会进行整数运算。另外，<code>val1</code>和<code>val2</code>其实不需要声明为整数，因为只要<code>result</code>声明为整数，它的赋值就会自动解释为整数运算。</p><p>注意，一个变量声明为整数以后，依然可以被改写为字符串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -i var=12</span><br><span class="line">$ var=foo</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>上面例子中，变量<code>var</code>声明为整数，覆盖以后，Bash 不会报错，但会赋以不确定的值，上面的例子中可能输出0，也可能输出的是3。</p><p><strong>（2）<code>-x</code>参数</strong></p><p><code>-x</code>参数等同于<code>export</code>命令，可以输出一个变量为子 Shell 的环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -x foo</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">$ <span class="built_in">export</span> foo</span><br></pre></td></tr></table></figure><p><strong>（3）<code>-r</code>参数</strong></p><p><code>-r</code>参数可以声明只读变量，无法改变变量值，也不能<code>unset</code>变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -r bar=1</span><br><span class="line"></span><br><span class="line">$ bar=2</span><br><span class="line">bash: bar：只读变量</span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">unset</span> bar</span><br><span class="line">bash: bar：只读变量</span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>上面例子中，后两个赋值语句都会报错，命令执行失败。</p><p><strong>（4）<code>-u</code>参数</strong></p><p><code>-u</code>参数声明变量为大写字母，可以自动把变量值转成大写字母。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -u foo</span><br><span class="line">$ foo=upper</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line">UPPER</span><br></pre></td></tr></table></figure><p><strong>（5）<code>-l</code>参数</strong></p><p><code>-l</code>参数声明变量为小写字母，可以自动把变量值转成小写字母。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -l bar</span><br><span class="line">$ bar=LOWER</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$bar</span></span><br><span class="line">lower</span><br></pre></td></tr></table></figure><p><strong>（6）<code>-p</code>参数</strong></p><p><code>-p</code>参数输出变量信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ foo=hello</span><br><span class="line">$ <span class="built_in">declare</span> -p foo</span><br><span class="line"><span class="built_in">declare</span> -- foo=<span class="string">&quot;hello&quot;</span></span><br><span class="line">$ <span class="built_in">declare</span> -p bar</span><br><span class="line">bar：未找到</span><br></pre></td></tr></table></figure><p>上面例子中，<code>declare -p</code>可以输出已定义变量的值，对于未定义的变量，会提示找不到。</p><p>如果不提供变量名，<code>declare -p</code>输出所有变量的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -p</span><br></pre></td></tr></table></figure><p><strong>（7）<code>-f</code>参数</strong></p><p><code>-f</code>参数输出当前环境的所有函数，包括它的定义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -f</span><br></pre></td></tr></table></figure><p><strong>（8）<code>-F</code>参数</strong></p><p><code>-F</code>参数输出当前环境的所有函数名，不包含函数定义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">declare</span> -F</span><br></pre></td></tr></table></figure><h2 id="readonly-命令"><a href="#readonly-命令" class="headerlink" title="readonly 命令"></a>readonly 命令</h2><p><code>readonly</code>命令等同于<code>declare -r</code>，用来声明只读变量，不能改变变量值，也不能<code>unset</code>变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">readonly</span> foo=1</span><br><span class="line">$ foo=2</span><br><span class="line">bash: foo：只读变量</span><br><span class="line">$ <span class="built_in">echo</span> $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>上面例子中，更改只读变量<code>foo</code>会报错，命令执行失败。</p><p><code>readonly</code>命令有三个参数。</p><ul><li><code>-f</code>：声明的变量为函数名。</li><li><code>-p</code>：打印出所有的只读变量。</li><li><code>-a</code>：声明的变量为数组。</li></ul><h2 id="let-命令"><a href="#let-命令" class="headerlink" title="let 命令"></a>let 命令</h2><p><code>let</code>命令声明变量时，可以直接执行算术表达式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">let</span> foo=1+2</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>上面例子中，<code>let</code>命令可以直接计算<code>1 + 2</code>。</p><p><code>let</code>命令的参数表达式如果包含空格，就需要使用引号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">let</span> <span class="string">&quot;foo = 1 + 2&quot;</span></span><br></pre></td></tr></table></figure><p><code>let</code>可以同时对多个变量赋值，赋值表达式之间使用空格分隔。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">let</span> <span class="string">&quot;v1 = 1&quot;</span> <span class="string">&quot;v2 = v1++&quot;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$v1</span>,<span class="variable">$v2</span></span><br><span class="line">2,1</span><br></pre></td></tr></table></figure><p>上面例子中，<code>let</code>声明了两个变量<code>v1</code>和<code>v2</code>，其中<code>v2</code>等于<code>v1++</code>，表示先返回<code>v1</code>的值，然后<code>v1</code>自增。</p><p>这种语法支持的运算符，参考《Bash 的算术运算》一章。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引号和转义</title>
      <link href="/2016/03/21/%E5%BC%95%E5%8F%B7%E5%92%8C%E8%BD%AC%E4%B9%89/"/>
      <url>/2016/03/21/%E5%BC%95%E5%8F%B7%E5%92%8C%E8%BD%AC%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串。因此，字符串相关的引号和转义，对 Bash 来说就非常重要。</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>某些字符在 Bash 里面有特殊含义（比如<code>$</code>、<code>&amp;</code>、<code>*</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$date</span></span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>上面例子中，输出<code>$date</code>不会有任何结果，因为<code>$</code>是一个特殊字符。</p><p>如果想要原样输出这些特殊字符，就必须在它们前面加上反斜杠，使其变成普通字符。这就叫做“转义”（escape）。</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> \<span class="variable">$date</span></span><br><span class="line"><span class="variable">$date</span></span><br></pre></td></tr></table></figure><p>上面命令中，只有在特殊字符<code>$</code>前面加反斜杠，才能原样输出。</p><p>反斜杠本身也是特殊字符，如果想要原样输出反斜杠，就需要对它自身转义，连续使用两个反斜线（<code>\\</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> \\</span><br><span class="line">\</span><br></pre></td></tr></table></figure><p>上面例子输出了反斜杠本身。</p><p>反斜杠除了用于转义，还可以表示一些不可打印的字符。</p><ul><li><code>\a</code>：响铃</li><li><code>\b</code>：退格</li><li><code>\n</code>：换行</li><li><code>\r</code>：回车</li><li><code>\t</code>：制表符</li></ul><p>如果想要在命令行使用这些不可打印的字符，可以把它们放在引号里面，然后使用<code>echo</code>命令的<code>-e</code>参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> a\tb</span><br><span class="line">atb</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;a\tb&quot;</span></span><br><span class="line">a        b</span><br></pre></td></tr></table></figure><p>上面例子中，命令行直接输出不可打印字符<code>\t</code>，Bash 不能正确解释。必须把它们放在引号之中，然后使用<code>echo</code>命令的<code>-e</code>参数。</p><p>换行符是一个特殊字符，表示命令的结束，Bash 收到这个字符以后，就会对输入的命令进行解释执行。换行符前面加上反斜杠转义，就使得换行符变成一个普通字符，Bash 会将其当作长度为<code>0</code>的空字符处理，从而可以将一行命令写成多行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mv</span> \</span><br><span class="line">/path/to/foo \</span><br><span class="line">/path/to/bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">$ <span class="built_in">mv</span> /path/to/foo /path/to/bar</span><br></pre></td></tr></table></figure><p>上面例子中，如果一条命令过长，就可以在行尾使用反斜杠，将其改写成多行。这是常见的多行命令的写法。</p><h2 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h2><p>Bash 允许字符串放在单引号或双引号之中，加以引用。</p><p>单引号用于保留字符的字面含义，各种特殊字符在单引号里面，都会变为普通字符，比如星号（<code>*</code>）、美元符号（<code>$</code>）、反斜杠（<code>\</code>）等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;$USER&#x27;</span></span><br><span class="line"><span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;$((2+2))&#x27;</span></span><br><span class="line">$((<span class="number">2</span>+<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;$(echo foo)&#x27;</span></span><br><span class="line">$(<span class="built_in">echo</span> foo)</span><br></pre></td></tr></table></figure><p>上面命令中，单引号使得 Bash 扩展、变量引用、算术运算和子命令，都失效了。如果不使用单引号，它们都会被 Bash 自动扩展。</p><p>由于反斜杠在单引号里面变成了普通字符，所以如果单引号之中，还要使用单引号，不能使用转义，需要在外层的单引号前面加上一个美元符号（<code>$</code>），然后再对里层的单引号转义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不正确</span></span><br><span class="line">$ <span class="built_in">echo</span> it<span class="string">&#x27;s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 不正确</span></span><br><span class="line"><span class="string">$ echo &#x27;</span>it\<span class="string">&#x27;s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确</span></span><br><span class="line">$ <span class="built_in">echo</span> $<span class="string">&#x27;it\&#x27;</span>s<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>不过，更合理的方法是改在双引号之中使用单引号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;it&#x27;s&quot;</span></span><br><span class="line">it<span class="string">&#x27;s</span></span><br></pre></td></tr></table></figure><h2 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h2><p>双引号比单引号宽松，大部分特殊字符在双引号里面，都会失去特殊含义，变成普通字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">*</span><br></pre></td></tr></table></figure><p>上面例子中，通配符<code>*</code>是一个特殊字符，放在双引号之中，就变成了普通字符，会原样输出。这一点需要特别留意，这意味着，双引号里面不会进行文件名扩展。</p><p>但是，三个特殊字符除外：美元符号（<code>$</code>）、反引号（<code>`</code>）和反斜杠（<code>\</code>）。这三个字符在双引号之中，依然有特殊含义，会被 Bash 自动扩展。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$SHELL</span>&quot;</span></span><br><span class="line">/bin/bash</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;`date`&quot;</span></span><br><span class="line">Mon Jan 27 13:33:18 CST 2020</span><br></pre></td></tr></table></figure><p>上面例子中，美元符号（<code>$</code>）和反引号（<code>`</code>）在双引号中，都保持特殊含义。美元符号用来引用变量，反引号则是执行子命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;I&#x27;d say: \&quot;hello!\&quot;&quot;</span></span><br><span class="line">I<span class="string">&#x27;d say: &quot;hello!&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ echo &quot;\\&quot;</span></span><br><span class="line"><span class="string">\</span></span><br></pre></td></tr></table></figure><p>上面例子中，反斜杠在双引号之中保持特殊含义，用来转义。所以，可以使用反斜杠，在双引号之中插入双引号，或者插入反斜杠本身。</p><p>换行符在双引号之中，会失去特殊含义，Bash 不再将其解释为命令的结束，只是作为普通的换行符。所以可以利用双引号，在命令行输入多行文本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;hello</span></span><br><span class="line"><span class="string">world&quot;</span></span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure><p>上面命令中，Bash 正常情况下会将换行符解释为命令结束，但是换行符在双引号之中就失去了这种特殊作用，只用来换行，所以可以输入多行。<code>echo</code>命令会将换行符原样输出，显示的时候正常解释为换行。</p><p>双引号的另一个常见的使用场合是，文件名包含空格。这时就必须使用双引号（或单引号），将文件名放在里面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> <span class="string">&quot;two words.txt&quot;</span></span><br></pre></td></tr></table></figure><p>上面命令中，<code>two words.txt</code>是一个包含空格的文件名，如果不放在双引号里面，就会被 Bash 当作两个文件。</p><p>双引号会原样保存多余的空格。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;this is a     test&quot;</span></span><br><span class="line">this is a     <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>双引号还有一个作用，就是保存原始命令的输出格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单行输出</span></span><br><span class="line">$ <span class="built_in">echo</span> $(cal)</span><br><span class="line">一月 2020 日 一 二 三 四 五 六 1 2 3 ... 31</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始格式输出</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(cal)</span>&quot;</span></span><br><span class="line">      一月 2020</span><br><span class="line">日 一 二 三 四 五 六</span><br><span class="line">          1  2  3  4</span><br><span class="line"> 5  6  7  8  9 10 11</span><br><span class="line">12 13 14 15 16 17 18</span><br><span class="line">19 20 21 22 23 24 25</span><br><span class="line">26 27 28 29 30 31</span><br></pre></td></tr></table></figure><p>上面例子中，如果<code>$(cal)</code>不放在双引号之中，<code>echo</code>就会将所有结果以单行输出，丢弃了所有原始的格式。</p><h2 id="Here-文档"><a href="#Here-文档" class="headerlink" title="Here 文档"></a>Here 文档</h2><p>Here 文档（here document）是一种输入多行字符串的方法，格式如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt; <span class="string">token</span></span><br><span class="line"><span class="string">text</span></span><br><span class="line"><span class="string">token</span></span><br></pre></td></tr></table></figure><p>它的格式分成开始标记（<code>&lt;&lt; token</code>）和结束标记（<code>token</code>）。开始标记是两个小于号 + Here 文档的名称，名称可以随意取，后面必须是一个换行符；结束标记是单独一行顶格写的 Here 文档名称，如果不是顶格，结束标记不起作用。两者之间就是多行字符串的内容。</p><p>下面是一个通过 Here 文档输出 HTML 代码的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &lt;&lt; <span class="string">_EOF_</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;</span></span><br><span class="line"><span class="string">    The title of your page</span></span><br><span class="line"><span class="string">    &lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    Your page content goes here.</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">_EOF_</span></span><br></pre></td></tr></table></figure><p>Here 文档内部会发生变量替换，同时支持反斜杠转义，但是不支持通配符扩展，双引号和单引号也失去语法作用，变成了普通字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ foo=<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">$ <span class="built_in">cat</span> &lt;&lt; <span class="string">_example_</span></span><br><span class="line"><span class="string">$foo</span></span><br><span class="line"><span class="string">&quot;$foo&quot;</span></span><br><span class="line"><span class="string">&#x27;$foo&#x27;</span></span><br><span class="line"><span class="string">_example_</span></span><br><span class="line"></span><br><span class="line">hello world</span><br><span class="line"><span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure><p>上面例子中，变量<code>$foo</code>发生了替换，但是双引号和单引号都原样输出了，表明它们已经失去了引用的功能。</p><p>如果不希望发生变量替换，可以把 Here 文档的开始标记放在单引号之中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ foo=<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">$ <span class="built_in">cat</span> &lt;&lt; <span class="string">&#x27;_example_&#x27;</span></span><br><span class="line"><span class="variable">$foo</span></span><br><span class="line"><span class="string">&quot;<span class="variable">$foo</span>&quot;</span></span><br><span class="line"><span class="string">&#x27;$foo&#x27;</span></span><br><span class="line">_example_</span><br><span class="line"></span><br><span class="line"><span class="variable">$foo</span></span><br><span class="line"><span class="string">&quot;<span class="variable">$foo</span>&quot;</span></span><br><span class="line"><span class="string">&#x27;$foo&#x27;</span></span><br></pre></td></tr></table></figure><p>上面例子中，Here 文档的开始标记（<code>_example_</code>）放在单引号之中，导致变量替换失效了。</p><p>Here 文档的本质是重定向，它将字符串重定向输出给某个命令，相当于包含了<code>echo</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> &lt;&lt; <span class="string">token</span></span><br><span class="line"><span class="string">  string</span></span><br><span class="line"><span class="string">token</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> string | <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>上面代码中，Here 文档相当于<code>echo</code>命令的重定向。</p><p>所以，Here 字符串只适合那些可以接受标准输入作为参数的命令，对于其他命令无效，比如<code>echo</code>命令就不能用 Here 文档作为参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &lt;&lt; <span class="string">_example_</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">_example_</span></span><br></pre></td></tr></table></figure><p>上面例子不会有任何输出，因为 Here 文档对于<code>echo</code>命令无效。</p><p>此外，Here 文档也不能作为变量的值，只能用于命令的参数。</p><h2 id="Here-字符串"><a href="#Here-字符串" class="headerlink" title="Here 字符串"></a>Here 字符串</h2><p>Here 文档还有一个变体，叫做 Here 字符串（Here string），使用三个小于号（<code>&lt;&lt;&lt;</code>）表示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt; <span class="string">string</span></span><br></pre></td></tr></table></figure><p>它的作用是将字符串通过标准输入，传递给命令。</p><p>有些命令直接接受给定的参数，与通过标准输入接受参数，结果是不一样的。所以才有了这个语法，使得将字符串通过标准输入传递给命令更方便，比如<code>cat</code>命令只接受标准输入传入的字符串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &lt;&lt;&lt; <span class="string">&#x27;hi there&#x27;</span></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;hi there&#x27;</span> | <span class="built_in">cat</span></span><br></pre></td></tr></table></figure><p>上面的第一种语法使用了 Here 字符串，要比第二种语法看上去语义更好，也更简洁。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">md5sum</span> &lt;&lt;&lt; <span class="string">&#x27;ddd&#x27;</span></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;ddd&#x27;</span> | <span class="built_in">md5sum</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>md5sum</code>命令只能接受标准输入作为参数，不能直接将字符串放在命令后面，会被当作文件名，即<code>md5sum ddd</code>里面的<code>ddd</code>会被解释成文件名。这时就可以用 Here 字符串，将字符串传给<code>md5sum</code>命令。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash 的模式扩展</title>
      <link href="/2016/03/17/Bash%20%E7%9A%84%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95/"/>
      <url>/2016/03/17/Bash%20%E7%9A%84%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Shell 接收到用户输入的命令以后，会根据空格将用户的输入，拆分成一个个词元（token）。然后，Shell 会扩展词元里面的特殊字符，扩展完成后才会调用相应的命令。</p><p>这种特殊字符的扩展，称为模式扩展（globbing）。其中有些用到通配符，又称为通配符扩展（wildcard expansion）。Bash 一共提供八种扩展。</p><ul><li>波浪线扩展</li><li><code>?</code> 字符扩展</li><li><code>*</code> 字符扩展</li><li>方括号扩展</li><li>大括号扩展</li><li>变量扩展</li><li>子命令扩展</li><li>算术扩展</li></ul><p>本章介绍这八种扩展。</p><span id="more"></span><p>Bash 是先进行扩展，再执行命令。因此，扩展的结果是由 Bash 负责的，与所要执行的命令无关。命令本身并不存在参数扩展，收到什么参数就原样执行。这一点务必需要记住。</p><p>模块扩展的英文单词是<code>globbing</code>，这个词来自于早期的 Unix 系统有一个<code>/etc/glob</code>文件，保存扩展的模板。后来 Bash 内置了这个功能，但是这个名字就保留了下来。</p><p>模式扩展与正则表达式的关系是，模式扩展早于正则表达式出现，可以看作是原始的正则表达式。它的功能没有正则那么强大灵活，但是优点是简单和方便。</p><p>Bash 允许用户关闭扩展。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">set</span> -o <span class="built_in">noglob</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ <span class="built_in">set</span> -f</span><br></pre></td></tr></table></figure><p>下面的命令可以重新打开扩展。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">set</span> +o <span class="built_in">noglob</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ <span class="built_in">set</span> +f</span><br></pre></td></tr></table></figure><h2 id="波浪线扩展"><a href="#波浪线扩展" class="headerlink" title="波浪线扩展"></a>波浪线扩展</h2><p>波浪线<code>~</code>会自动扩展成当前用户的主目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> ~</span><br><span class="line">/home/me</span><br></pre></td></tr></table></figure><p><code>~/dir</code>表示扩展成主目录的某个子目录，<code>dir</code>是主目录里面的一个子目录名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 /home/me/foo 目录</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/foo</span><br></pre></td></tr></table></figure><p><code>~user</code>表示扩展成用户<code>user</code>的主目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> ~foo</span><br><span class="line">/home/foo</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> ~root</span><br><span class="line">/root</span><br></pre></td></tr></table></figure><p>上面例子中，Bash 会根据波浪号后面的用户名，返回该用户的主目录。</p><p>如果<code>~user</code>的<code>user</code>是不存在的用户名，则波浪号扩展不起作用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> ~nonExistedUser</span><br><span class="line">~nonExistedUser</span><br></pre></td></tr></table></figure><p><code>~+</code>会扩展成当前所在的目录，等同于<code>pwd</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/foo</span><br><span class="line">$ <span class="built_in">echo</span> ~+</span><br><span class="line">/home/me/foo</span><br></pre></td></tr></table></figure><h2 id="字符扩展"><a href="#字符扩展" class="headerlink" title="? 字符扩展"></a><code>?</code> 字符扩展</h2><p><code>?</code>字符代表文件路径里面的任意单个字符，不包括空字符。比如，<code>Data???</code>匹配所有<code>Data</code>后面跟着三个字符的文件名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存在文件 a.txt 和 b.txt</span></span><br><span class="line">$ <span class="built_in">ls</span> ?.txt</span><br><span class="line">a.txt b.txt</span><br></pre></td></tr></table></figure><p>上面命令中，<code>?</code>表示单个字符，所以会同时匹配<code>a.txt</code>和<code>b.txt</code>。</p><p>如果匹配多个字符，就需要多个<code>?</code>连用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存在文件 a.txt、b.txt 和 ab.txt</span></span><br><span class="line">$ <span class="built_in">ls</span> ??.txt</span><br><span class="line">ab.txt</span><br></pre></td></tr></table></figure><p>上面命令中，<code>??</code>匹配了两个字符。</p><p><code>?</code> 字符扩展属于文件名扩展，只有文件确实存在的前提下，才会发生扩展。如果文件不存在，扩展就不会发生。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前目录有 a.txt 文件</span></span><br><span class="line">$ <span class="built_in">echo</span> ?.txt</span><br><span class="line">a.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前目录为空目录</span></span><br><span class="line">$ <span class="built_in">echo</span> ?.txt</span><br><span class="line">?.txt</span><br></pre></td></tr></table></figure><p>上面例子中，如果<code>?.txt</code>可以扩展成文件名，<code>echo</code>命令会输出扩展后的结果；如果不能扩展成文件名，<code>echo</code>就会原样输出<code>?.txt</code>。</p><h2 id="字符扩展-1"><a href="#字符扩展-1" class="headerlink" title="* 字符扩展"></a><code>*</code> 字符扩展</h2><p><code>*</code>字符代表文件路径里面的任意数量的任意字符，包括零个字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存在文件 a.txt、b.txt 和 ab.txt</span></span><br><span class="line">$ <span class="built_in">ls</span> *.txt</span><br><span class="line">a.txt b.txt ab.txt</span><br></pre></td></tr></table></figure><p>上面例子中，<code>*.txt</code>代表后缀名为<code>.txt</code>的所有文件。</p><p>如果想输出当前目录的所有文件，直接用<code>*</code>即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> *</span><br></pre></td></tr></table></figure><p><code>*</code>可以匹配空字符，下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存在文件 a.txt、b.txt 和 ab.txt</span></span><br><span class="line">$ <span class="built_in">ls</span> a*.txt</span><br><span class="line">a.txt ab.txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> *b*</span><br><span class="line">b.txt ab.txt</span><br></pre></td></tr></table></figure><p>注意，<code>*</code>不会匹配隐藏文件（以<code>.</code>开头的文件），即<code>ls *</code>不会输出隐藏文件。</p><p>如果要匹配隐藏文件，需要写成<code>.*</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示所有隐藏文件</span></span><br><span class="line">$ <span class="built_in">echo</span> .*</span><br></pre></td></tr></table></figure><p>如果要匹配隐藏文件，同时要排除<code>.</code>和<code>..</code>这两个特殊的隐藏文件，可以与方括号扩展结合使用，写成<code>.[!.]*</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> .[!.]*</span><br></pre></td></tr></table></figure><p>注意，<code>*</code>字符扩展属于文件名扩展，只有文件确实存在的前提下才会扩展。如果文件不存在，就会原样输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前目录不存在 c 开头的文件</span></span><br><span class="line">$ <span class="built_in">echo</span> c*.txt</span><br><span class="line">c*.txt</span><br></pre></td></tr></table></figure><p>上面例子中，当前目录里面没有<code>c</code>开头的文件，导致<code>c*.txt</code>会原样输出。</p><p><code>*</code>只匹配当前目录，不会匹配子目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子目录有一个 a.txt</span></span><br><span class="line"><span class="comment"># 无效的写法</span></span><br><span class="line">$ <span class="built_in">ls</span> *.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有效的写法</span></span><br><span class="line">$ <span class="built_in">ls</span> */*.txt</span><br></pre></td></tr></table></figure><p>上面的例子，文本文件在子目录，<code>*.txt</code>不会产生匹配，必须写成<code>*/*.txt</code>。有几层子目录，就必须写几层星号。</p><p>Bash 4.0 引入了一个参数<code>globstar</code>，当该参数打开时，允许<code>**</code>匹配零个或多个子目录。因此，<code>**/*.txt</code>可以匹配顶层的文本文件和任意深度子目录的文本文件。详细介绍请看后面<code>shopt</code>命令的介绍。</p><h2 id="方括号扩展"><a href="#方括号扩展" class="headerlink" title="方括号扩展"></a>方括号扩展</h2><p>方括号扩展的形式是<code>[...]</code>，只有文件确实存在的前提下才会扩展。如果文件不存在，就会原样输出。括号之中的任意一个字符。比如，<code>[aeiou]</code>可以匹配五个元音字母中的任意一个。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存在文件 a.txt 和 b.txt</span></span><br><span class="line">$ <span class="built_in">ls</span> [ab].txt</span><br><span class="line">a.txt b.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只存在文件 a.txt</span></span><br><span class="line">$ <span class="built_in">ls</span> [ab].txt</span><br><span class="line">a.txt</span><br></pre></td></tr></table></figure><p>上面例子中，<code>[ab]</code>可以匹配<code>a</code>或<code>b</code>，前提是确实存在相应的文件。</p><p>方括号扩展属于文件名匹配，即扩展后的结果必须符合现有的文件路径。如果不存在匹配，就会保持原样，不进行扩展。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不存在文件 a.txt 和 b.txt</span></span><br><span class="line">$ <span class="built_in">ls</span> [ab].txt</span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;[ab].txt&#x27;</span>: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p>上面例子中，由于扩展后的文件不存在，<code>[ab].txt</code>就原样输出了，导致<code>ls</code>命名报错。</p><p>方括号扩展还有两种变体：<code>[^...]</code>和<code>[!...]</code>。它们表示匹配不在方括号里面的字符，这两种写法是等价的。比如，<code>[^abc]</code>或<code>[!abc]</code>表示匹配除了<code>a</code>、<code>b</code>、<code>c</code>以外的字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存在 aaa、bbb、aba 三个文件</span></span><br><span class="line">$ <span class="built_in">ls</span> ?[!a]?</span><br><span class="line">aba bbb</span><br></pre></td></tr></table></figure><p>上面命令中，<code>[!a]</code>表示文件名第二个字符不是<code>a</code>的文件名，所以返回了<code>aba</code>和<code>bbb</code>两个文件。</p><p>注意，如果需要匹配<code>[</code>字符，可以放在方括号内，比如<code>[[aeiou]</code>。如果需要匹配连字号<code>-</code>，只能放在方括号内部的开头或结尾，比如<code>[-aeiou]</code>或<code>[aeiou-]</code>。</p><h2 id="start-end-扩展"><a href="#start-end-扩展" class="headerlink" title="[start-end] 扩展"></a>[start-end] 扩展</h2><p>方括号扩展有一个简写形式<code>[start-end]</code>，表示匹配一个连续的范围。比如，<code>[a-c]</code>等同于<code>[abc]</code>，<code>[0-9]</code>匹配<code>[0123456789]</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存在文件 a.txt、b.txt 和 c.txt</span></span><br><span class="line">$ <span class="built_in">ls</span> [a-c].txt</span><br><span class="line">a.txt</span><br><span class="line">b.txt</span><br><span class="line">c.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存在文件 report1.txt、report2.txt 和 report3.txt</span></span><br><span class="line">$ <span class="built_in">ls</span> report[0-9].txt</span><br><span class="line">report1.txt</span><br><span class="line">report2.txt</span><br><span class="line">report3.txt</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>下面是一些常用简写的例子。</p><ul><li><code>[a-z]</code>：所有小写字母。</li><li><code>[a-zA-Z]</code>：所有小写字母与大写字母。</li><li><code>[a-zA-Z0-9]</code>：所有小写字母、大写字母与数字。</li><li><code>[abc]*</code>：所有以<code>a</code>、<code>b</code>、<code>c</code>字符之一开头的文件名。</li><li><code>program.[co]</code>：文件<code>program.c</code>与文件<code>program.o</code>。</li><li><code>BACKUP.[0-9][0-9][0-9]</code>：所有以<code>BACKUP.</code>开头，后面是三个数字的文件名。</li></ul><p>这种简写形式有一个否定形式<code>[!start-end]</code>，表示匹配不属于这个范围的字符。比如，<code>[!a-zA-Z]</code>表示匹配非英文字母的字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> report[!1–3].txt</span><br><span class="line">report4.txt report5.txt</span><br></pre></td></tr></table></figure><p>上面代码中，<code>[!1-3]</code>表示排除1、2和3。</p><h2 id="大括号扩展"><a href="#大括号扩展" class="headerlink" title="大括号扩展"></a>大括号扩展</h2><p>大括号扩展<code>&#123;...&#125;</code>表示分别扩展成大括号里面的所有值，各个值之间使用逗号分隔。比如，<code>&#123;1,2,3&#125;</code>扩展成<code>1 2 3</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;1,2,3&#125;</span><br><span class="line">1 2 3</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> d&#123;a,e,i,u,o&#125;g</span><br><span class="line">dag deg dig dug dog</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> Front-&#123;A,B,C&#125;-Back</span><br><span class="line">Front-A-Back Front-B-Back Front-C-Back</span><br></pre></td></tr></table></figure><p>注意，大括号扩展不是文件名扩展。它会扩展成所有给定的值，而不管是否有对应的文件存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> &#123;a,b,c&#125;.txt</span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;a.txt&#x27;</span>: 没有那个文件或目录</span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;b.txt&#x27;</span>: 没有那个文件或目录</span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;c.txt&#x27;</span>: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p>上面例子中，即使不存在对应的文件，<code>&#123;a,b,c&#125;</code>依然扩展成三个文件名，导致<code>ls</code>命令报了三个错误。</p><p>另一个需要注意的地方是，大括号内部的逗号前后不能有空格。否则，大括号扩展会失效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;1 , 2&#125;</span><br><span class="line">&#123;1 , 2&#125;</span><br></pre></td></tr></table></figure><p>上面例子中，逗号前后有空格，Bash 就会认为这不是大括号扩展，而是三个独立的参数。</p><p>逗号前面可以没有值，表示扩展的第一项为空。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> a.log&#123;,.bak&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"><span class="comment"># cp a.log a.log.bak</span></span><br></pre></td></tr></table></figure><p>大括号可以嵌套。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;j&#123;p,pe&#125;g,png&#125;</span><br><span class="line">jpg jpeg png</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> a&#123;A&#123;1,2&#125;,B&#123;3,4&#125;&#125;b</span><br><span class="line">aA1b aA2b aB3b aB4b</span><br></pre></td></tr></table></figure><p>大括号也可以与其他模式联用，并且总是先于其他模式进行扩展。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> /bin/&#123;<span class="built_in">cat</span>,b*&#125;</span><br><span class="line">/bin/cat /bin/b2sum /bin/base32 /bin/base64 ... ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本等同于</span></span><br><span class="line">$ <span class="built_in">echo</span> /bin/cat;<span class="built_in">echo</span> /bin/b*</span><br></pre></td></tr></table></figure><p>上面例子中，会先进行大括号扩展，然后进行<code>*</code>扩展，等同于执行两条<code>echo</code>命令。</p><p>大括号可以用于多字符的模式，方括号不行（只能匹配单字符）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;<span class="built_in">cat</span>,dog&#125;</span><br><span class="line"><span class="built_in">cat</span> dog</span><br></pre></td></tr></table></figure><p>由于大括号扩展<code>&#123;...&#125;</code>不是文件名扩展，所以它总是会扩展的。这与方括号扩展<code>[...]</code>完全不同，如果匹配的文件不存在，方括号就不会扩展。这一点要注意区分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不存在 a.txt 和 b.txt</span></span><br><span class="line">$ <span class="built_in">echo</span> [ab].txt</span><br><span class="line">[ab].txt</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> &#123;a,b&#125;.txt</span><br><span class="line">a.txt b.txt</span><br></pre></td></tr></table></figure><p>上面例子中，如果不存在<code>a.txt</code>和<code>b.txt</code>，那么<code>[ab].txt</code>就会变成一个普通的文件名，而<code>&#123;a,b&#125;.txt</code>可以照样扩展。</p><h2 id="start-end-扩展-1"><a href="#start-end-扩展-1" class="headerlink" title="{start..end} 扩展"></a>{start..end} 扩展</h2><p>大括号扩展有一个简写形式<code>&#123;start..end&#125;</code>，表示扩展成一个连续序列。比如，<code>&#123;a..z&#125;</code>可以扩展成26个小写英文字母。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;a..c&#125;</span><br><span class="line">a b c</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> d&#123;a..d&#125;g</span><br><span class="line">dag dbg dcg ddg</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> &#123;1..4&#125;</span><br><span class="line">1 2 3 4</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> Number_&#123;1..5&#125;</span><br><span class="line">Number_1 Number_2 Number_3 Number_4 Number_5</span><br></pre></td></tr></table></figure><p>这种简写形式支持逆序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;c..a&#125;</span><br><span class="line">c b a</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> &#123;5..1&#125;</span><br><span class="line">5 4 3 2 1</span><br></pre></td></tr></table></figure><p>注意，如果遇到无法理解的简写，大括号模式就会原样输出，不会扩展。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;a1..3c&#125;</span><br><span class="line">&#123;a1..3c&#125;</span><br></pre></td></tr></table></figure><p>这种简写形式可以嵌套使用，形成复杂的扩展。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> .&#123;mp&#123;3..4&#125;,m4&#123;a,b,p,v&#125;&#125;</span><br><span class="line">.mp3 .mp4 .m4a .m4b .m4p .m4v</span><br></pre></td></tr></table></figure><p>大括号扩展的常见用途为新建一系列目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> &#123;2007..2009&#125;-&#123;01..12&#125;</span><br></pre></td></tr></table></figure><p>上面命令会新建36个子目录，每个子目录的名字都是”年份-月份“。</p><p>这个写法的另一个常见用途，是直接用于<code>for</code>循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..4&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>上面例子会循环4次。</p><p>如果整数前面有前导<code>0</code>，扩展输出的每一项都有前导<code>0</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;01..5&#125;</span><br><span class="line">01 02 03 04 05</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> &#123;001..5&#125;</span><br><span class="line">001 002 003 004 005</span><br></pre></td></tr></table></figure><p>这种简写形式还可以使用第二个双点号（<code>start..end..step</code>），用来指定扩展的步长。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;0..8..2&#125;</span><br><span class="line">0 2 4 6 8</span><br></pre></td></tr></table></figure><p>上面代码将<code>0</code>扩展到<code>8</code>，每次递增的长度为<code>2</code>，所以一共输出5个数字。</p><p>多个简写形式连用，会有循环处理的效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;a..c&#125;&#123;1..3&#125;</span><br><span class="line">a1 a2 a3 b1 b2 b3 c1 c2 c3</span><br></pre></td></tr></table></figure><h2 id="变量扩展"><a href="#变量扩展" class="headerlink" title="变量扩展"></a>变量扩展</h2><p>Bash 将美元符号<code>$</code>开头的词元视为变量，将其扩展成变量值，详见《Bash 变量》一章。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><p>变量名除了放在美元符号后面，也可以放在<code>$&#123;&#125;</code>里面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;SHELL&#125;</span></span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><p><code>$&#123;!string*&#125;</code>或<code>$&#123;!string@&#125;</code>返回所有匹配给定字符串<code>string</code>的变量名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;!S*&#125;</span></span><br><span class="line">SECONDS SHELL SHELLOPTS SHLVL SSH_AGENT_PID SSH_AUTH_SOCK</span><br></pre></td></tr></table></figure><p>上面例子中，<code>$&#123;!S*&#125;</code>扩展成所有以<code>S</code>开头的变量名。</p><h2 id="子命令扩展"><a href="#子命令扩展" class="headerlink" title="子命令扩展"></a>子命令扩展</h2><p><code>$(...)</code>可以扩展成另一个命令的运行结果，该命令的所有输出都会作为返回值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $(<span class="built_in">date</span>)</span><br><span class="line">Tue Jan 28 00:01:13 CST 2020</span><br></pre></td></tr></table></figure><p>上面例子中，<code>$(date)</code>返回<code>date</code>命令的运行结果。</p><p>还有另一种较老的语法，子命令放在反引号之中，也可以扩展成命令的运行结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> `<span class="built_in">date</span>`</span><br><span class="line">Tue Jan 28 00:01:13 CST 2020</span><br></pre></td></tr></table></figure><p><code>$(...)</code>可以嵌套，比如<code>$(ls $(pwd))</code>。</p><h2 id="算术扩展"><a href="#算术扩展" class="headerlink" title="算术扩展"></a>算术扩展</h2><p><code>$((...))</code>可以扩展成整数运算的结果，详见《Bash 的算术运算》一章。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $((<span class="number">2</span> + <span class="number">2</span>))</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p><code>[[:class:]]</code>表示一个字符类，扩展成某一类特定字符之中的一个。常用的字符类如下。</p><ul><li><code>[[:alnum:]]</code>：匹配任意英文字母与数字</li><li><code>[[:alpha:]]</code>：匹配任意英文字母</li><li><code>[[:blank:]]</code>：空格和 Tab 键。</li><li><code>[[:cntrl:]]</code>：ASCII 码 0-31 的不可打印字符。</li><li><code>[[:digit:]]</code>：匹配任意数字 0-9。</li><li><code>[[:graph:]]</code>：A-Z、a-z、0-9 和标点符号。</li><li><code>[[:lower:]]</code>：匹配任意小写字母 a-z。</li><li><code>[[:print:]]</code>：ASCII 码 32-127 的可打印字符。</li><li><code>[[:punct:]]</code>：标点符号（除了 A-Z、a-z、0-9 的可打印字符）。</li><li><code>[[:space:]]</code>：空格、Tab、LF（10）、VT（11）、FF（12）、CR（13）。</li><li><code>[[:upper:]]</code>：匹配任意大写字母 A-Z。</li><li><code>[[:xdigit:]]</code>：16进制字符（A-F、a-f、0-9）。</li></ul><p>请看下面的例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> [[:upper:]]*</span><br></pre></td></tr></table></figure><p>上面命令输出所有大写字母开头的文件名。</p><p>字符类的第一个方括号后面，可以加上感叹号<code>!</code>，表示否定。比如，<code>[![:digit:]]</code>匹配所有非数字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> [![:digit:]]*</span><br></pre></td></tr></table></figure><p>上面命令输出所有不以数字开头的文件名。</p><p>字符类也属于文件名扩展，如果没有匹配的文件名，字符类就会原样输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不存在以大写字母开头的文件</span></span><br><span class="line">$ <span class="built_in">echo</span> [[:upper:]]*</span><br><span class="line">[[:upper:]]*</span><br></pre></td></tr></table></figure><p>上面例子中，由于没有可匹配的文件，字符类就原样输出了。</p><h2 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h2><p>通配符有一些使用注意点，不可不知。</p><p><strong>（1）通配符是先解释，再执行。</strong></p><p>Bash 接收到命令以后，发现里面有通配符，会进行通配符扩展，然后再执行命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> a*.txt</span><br><span class="line">ab.txt</span><br></pre></td></tr></table></figure><p>上面命令的执行过程是，Bash 先将<code>a*.txt</code>扩展成<code>ab.txt</code>，然后再执行<code>ls ab.txt</code>。</p><p><strong>（2）文件名扩展在不匹配时，会原样输出。</strong></p><p>文件名扩展在没有可匹配的文件时，会原样输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不存在 r 开头的文件名</span></span><br><span class="line">$ <span class="built_in">echo</span> r*</span><br><span class="line">r*</span><br></pre></td></tr></table></figure><p>上面代码中，由于不存在<code>r</code>开头的文件名，<code>r*</code>会原样输出。</p><p>下面是另一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> *.csv</span><br><span class="line"><span class="built_in">ls</span>: *.csv: No such file or directory</span><br></pre></td></tr></table></figure><p>另外，前面已经说过，大括号扩展<code>&#123;...&#125;</code>不是文件名扩展。</p><p><strong>（3）只适用于单层路径。</strong></p><p>所有文件名扩展只匹配单层路径，不能跨目录匹配，即无法匹配子目录里面的文件。或者说，<code>?</code>或<code>*</code>这样的通配符，不能匹配路径分隔符（<code>/</code>）。</p><p>如果要匹配子目录里面的文件，可以写成下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> */*.txt</span><br></pre></td></tr></table></figure><p>Bash 4.0 新增了一个<code>globstar</code>参数，允许<code>**</code>匹配零个或多个子目录，详见后面<code>shopt</code>命令的介绍。</p><p><strong>（4）文件名可以使用通配符。</strong></p><p>Bash 允许文件名使用通配符，即文件名包括特殊字符。这时引用文件名，需要把文件名放在单引号或双引号里面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> <span class="string">&#x27;fo*&#x27;</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">fo*</span><br></pre></td></tr></table></figure><p>上面代码创建了一个<code>fo*</code>文件，这时<code>*</code>就是文件名的一部分。</p><h2 id="量词语法"><a href="#量词语法" class="headerlink" title="量词语法"></a>量词语法</h2><p>量词语法用来控制模式匹配的次数。它只有在 Bash 的<code>extglob</code>参数打开的情况下才能使用，不过一般是默认打开的。下面的命令可以查询。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> extglob</span><br><span class="line">extglob        on</span><br></pre></td></tr></table></figure><p>如果<code>extglob</code>参数是关闭的，可以用下面的命令打开。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> -s extglob</span><br></pre></td></tr></table></figure><p>量词语法有下面几个。</p><ul><li><code>?(pattern-list)</code>：模式匹配零次或一次。</li><li><code>*(pattern-list)</code>：模式匹配零次或多次。</li><li><code>+(pattern-list)</code>：模式匹配一次或多次。</li><li><code>@(pattern-list)</code>：只匹配一次模式。</li><li><code>!(pattern-list)</code>：匹配给定模式以外的任何内容。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> abc?(.)txt</span><br><span class="line">abctxt abc.txt</span><br></pre></td></tr></table></figure><p>上面例子中，<code>?(.)</code>匹配零个或一个点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> abc?(def)</span><br><span class="line">abc abcdef</span><br></pre></td></tr></table></figure><p>上面例子中，<code>?(def)</code>匹配零个或一个<code>def</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> abc@(.txt|.php)</span><br><span class="line">abc.php abc.txt</span><br></pre></td></tr></table></figure><p>上面例子中，<code>@(.txt|.php)</code>匹配文件有且只有一个<code>.txt</code>或<code>.php</code>后缀名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> abc+(.txt)</span><br><span class="line">abc.txt abc.txt.txt</span><br></pre></td></tr></table></figure><p>上面例子中，<code>+(.txt)</code>匹配文件有一个或多个<code>.txt</code>后缀名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> a!(b).txt</span><br><span class="line">a.txt abb.txt ac.txt</span><br></pre></td></tr></table></figure><p>上面例子中，<code>!(b)</code>表示匹配单个字母<code>b</code>以外的任意内容，所以除了<code>ab.txt</code>以外，其他文件名都能匹配。</p><p>量词语法也属于文件名扩展，如果不存在可匹配的文件，就会原样输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有 abc 开头的文件名</span></span><br><span class="line">$ <span class="built_in">ls</span> abc?(def)</span><br><span class="line"><span class="built_in">ls</span>: 无法访问<span class="string">&#x27;abc?(def)&#x27;</span>: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p>上面例子中，由于没有可匹配的文件，<code>abc?(def)</code>就原样输出，导致<code>ls</code>命令报错。</p><h2 id="shopt-命令"><a href="#shopt-命令" class="headerlink" title="shopt 命令"></a>shopt 命令</h2><p><code>shopt</code>命令可以调整 Bash 的行为。它有好几个参数跟通配符扩展有关。</p><p><code>shopt</code>命令的使用方法如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开某个参数</span></span><br><span class="line">$ <span class="built_in">shopt</span> -s [optionname]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭某个参数</span></span><br><span class="line">$ <span class="built_in">shopt</span> -u [optionname]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询某个参数关闭还是打开</span></span><br><span class="line">$ <span class="built_in">shopt</span> [optionname]</span><br></pre></td></tr></table></figure><p><strong>（1）dotglob 参数</strong></p><p><code>dotglob</code>参数可以让扩展结果包括隐藏文件（即点开头的文件）。</p><p>正常情况下，扩展结果不包括隐藏文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> *</span><br><span class="line">abc.txt</span><br></pre></td></tr></table></figure><p>打开<code>dotglob</code>，就会包括隐藏文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> -s dotglob</span><br><span class="line">$ <span class="built_in">ls</span> *</span><br><span class="line">abc.txt .config</span><br></pre></td></tr></table></figure><p><strong>（2）nullglob 参数</strong></p><p><code>nullglob</code>参数可以让通配符不匹配任何文件名时，返回空字符。</p><p>默认情况下，通配符不匹配任何文件名时，会保持不变。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> b*</span><br><span class="line"><span class="built_in">rm</span>: 无法删除<span class="string">&#x27;b*&#x27;</span>: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p>上面例子中，由于当前目录不包括<code>b</code>开头的文件名，导致<code>b*</code>不会发生文件名扩展，保持原样不变，所以<code>rm</code>命令报错没有<code>b*</code>这个文件。</p><p>打开<code>nullglob</code>参数，就可以让不匹配的通配符返回空字符串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> -s nullglob</span><br><span class="line">$ <span class="built_in">rm</span> b*</span><br><span class="line"><span class="built_in">rm</span>: 缺少操作数</span><br></pre></td></tr></table></figure><p>上面例子中，由于没有<code>b*</code>匹配的文件名，所以<code>rm b*</code>扩展成了<code>rm</code>，导致报错变成了”缺少操作数“。</p><p><strong>（3）failglob 参数</strong></p><p><code>failglob</code>参数使得通配符不匹配任何文件名时，Bash 会直接报错，而不是让各个命令去处理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> -s failglob</span><br><span class="line">$ <span class="built_in">rm</span> b*</span><br><span class="line">bash: 无匹配: b*</span><br></pre></td></tr></table></figure><p>上面例子中，打开<code>failglob</code>以后，由于<code>b*</code>不匹配任何文件名，Bash 直接报错了，不再让<code>rm</code>命令去处理。</p><p><strong>（4）extglob 参数</strong></p><p><code>extglob</code>参数使得 Bash 支持 ksh 的一些扩展语法。它默认应该是打开的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> extglob</span><br><span class="line">extglob        on</span><br></pre></td></tr></table></figure><p>它的主要应用是支持量词语法。如果不希望支持量词语法，可以用下面的命令关闭。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> -u extglob</span><br></pre></td></tr></table></figure><p><strong>（5）nocaseglob 参数</strong></p><p><code>nocaseglob</code>参数可以让通配符扩展不区分大小写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> -s nocaseglob</span><br><span class="line">$ <span class="built_in">ls</span> /windows/program*</span><br><span class="line">/windows/ProgramData</span><br><span class="line">/windows/Program Files</span><br><span class="line">/windows/Program Files (x86)</span><br></pre></td></tr></table></figure><p>上面例子中，打开<code>nocaseglob</code>以后，<code>program*</code>就不区分大小写了，可以匹配<code>ProgramData</code>等。</p><p><strong>（6）globstar 参数</strong></p><p><code>globstar</code>参数可以使得<code>**</code>匹配零个或多个子目录。该参数默认是关闭的。</p><p>假设有下面的文件结构。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.txt</span><br><span class="line">sub1/b.txt</span><br><span class="line">sub1/sub2/c.txt</span><br></pre></td></tr></table></figure><p>上面的文件结构中，顶层目录、第一级子目录<code>sub1</code>、第二级子目录<code>sub1\sub2</code>里面各有一个文本文件。请问怎样才能使用通配符，将它们显示出来？</p><p>默认情况下，只能写成下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> *.txt */*.txt */*/*.txt</span><br><span class="line">a.txt  sub1/b.txt  sub1/sub2/c.txt</span><br></pre></td></tr></table></figure><p>这是因为<code>*</code>只匹配当前目录，如果要匹配子目录，只能一层层写出来。</p><p>打开<code>globstar</code>参数以后，<code>**</code>匹配零个或多个子目录。因此，<code>**/*.txt</code>就可以得到想要的结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">shopt</span> -s globstar</span><br><span class="line">$ <span class="built_in">ls</span> **/*.txt</span><br><span class="line">a.txt  sub1/b.txt  sub1/sub2/c.txt</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://medium.com/@leedowthwaite/why-most-people-only-think-they-understand-wildcards-63bb9c2024ab">Think You Understand Wildcards? Think Again</a></li><li><a href="https://appcodelabs.com/advanced-wildcard-patterns-most-people-dont-know">Advanced Wildcard Patterns Most People Don’t Know</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash 的基本语法</title>
      <link href="/2016/03/13/Bash%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2016/03/13/Bash%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>本章介绍 Bash 的最基本语法。</p><h2 id="echo-命令"><a href="#echo-命令" class="headerlink" title="echo 命令"></a>echo 命令</h2><p>由于后面的例子会大量用到<code>echo</code>命令，这里先介绍这个命令。</p><p><code>echo</code>命令的作用是在屏幕输出一行文本，可以将该命令的参数原样输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> hello world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>上面例子中，<code>echo</code>的参数是<code>hello world</code>，可以原样输出。</p><p>如果想要输出的是多行文本，即包括换行符。这时就需要把多行文本放在引号里面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;&lt;HTML&gt;</span></span><br><span class="line"><span class="string">    &lt;HEAD&gt;</span></span><br><span class="line"><span class="string">          &lt;TITLE&gt;Page Title&lt;/TITLE&gt;</span></span><br><span class="line"><span class="string">    &lt;/HEAD&gt;</span></span><br><span class="line"><span class="string">    &lt;BODY&gt;</span></span><br><span class="line"><span class="string">          Page body.</span></span><br><span class="line"><span class="string">    &lt;/BODY&gt;</span></span><br><span class="line"><span class="string">&lt;/HTML&gt;&quot;</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>echo</code>可以原样输出多行文本。</p><span id="more"></span><h3 id="n参数"><a href="#n参数" class="headerlink" title="-n参数"></a><code>-n</code>参数</h3><p>默认情况下，<code>echo</code>输出的文本末尾会有一个回车符。<code>-n</code>参数可以取消末尾的回车符，使得下一个提示符紧跟在输出内容的后面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -n hello world</span><br><span class="line">hello world$</span><br></pre></td></tr></table></figure><p>上面例子中，<code>world</code>后面直接就是下一行的提示符<code>$</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> a;<span class="built_in">echo</span> b</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> -n a;<span class="built_in">echo</span> b</span><br><span class="line">ab</span><br></pre></td></tr></table></figure><p>上面例子中，<code>-n</code>参数可以让两个<code>echo</code>命令的输出连在一起，出现在同一行。</p><h3 id="e参数"><a href="#e参数" class="headerlink" title="-e参数"></a><code>-e</code>参数</h3><p><code>-e</code>参数会解释引号（双引号和单引号）里面的特殊字符（比如换行符<code>\n</code>）。如果不使用<code>-e</code>参数，即默认情况下，引号会让特殊字符变成普通字符，<code>echo</code>不解释它们，原样输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;Hello\nWorld&quot;</span></span><br><span class="line">Hello\nWorld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双引号的情况</span></span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&quot;Hello\nWorld&quot;</span></span><br><span class="line">Hello</span><br><span class="line">World</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号的情况</span></span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&#x27;Hello\nWorld&#x27;</span></span><br><span class="line">Hello</span><br><span class="line">World</span><br></pre></td></tr></table></figure><p>上面代码中，<code>-e</code>参数使得<code>\n</code>解释为换行符，导致输出内容里面出现换行。</p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><p>命令行环境中，主要通过使用 Shell 命令，进行各种操作。Shell 命令基本都是下面的格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> [ arg1 ... [ argN ]]</span><br></pre></td></tr></table></figure><p>上面代码中，<code>command</code>是具体的命令或者一个可执行文件，<code>arg1 ... argN</code>是传递给命令的参数，它们是可选的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l</span><br></pre></td></tr></table></figure><p>上面这个命令中，<code>ls</code>是命令，<code>-l</code>是参数。</p><p>有些参数是命令的配置项，这些配置项一般都以一个连词线开头，比如上面的<code>-l</code>。同一个配置项往往有长和短两种形式，比如<code>-l</code>是短形式，<code>--list</code>是长形式，它们的作用完全相同。短形式便于手动输入，长形式一般用在脚本之中，可读性更好，利于解释自身的含义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 短形式</span></span><br><span class="line">$ <span class="built_in">ls</span> -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 长形式</span></span><br><span class="line">$ <span class="built_in">ls</span> --reverse</span><br></pre></td></tr></table></figure><p>上面命令中，<code>-r</code>是短形式，<code>--reverse</code>是长形式，作用完全一样。前者便于输入，后者便于理解。</p><p>Bash 单个命令一般都是一行，用户按下回车键，就开始执行。有些命令比较长，写成多行会有利于阅读和编辑，这时可以在每一行的结尾加上反斜杠，Bash 就会将下一行跟当前行放在一起解释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> foo bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">$ <span class="built_in">echo</span> foo \</span><br><span class="line">bar</span><br></pre></td></tr></table></figure><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>Bash 使用空格（或 Tab 键）区分不同的参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> foo bar</span><br></pre></td></tr></table></figure><p>上面命令中，<code>foo</code>和<code>bar</code>之间有一个空格，所以 Bash 认为它们是两个参数。</p><p>如果参数之间有多个空格，Bash 会自动忽略多余的空格。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> this is a     <span class="built_in">test</span></span><br><span class="line">this is a <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>上面命令中，<code>a</code>和<code>test</code>之间有多个空格，Bash 会忽略多余的空格。</p><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>分号（<code>;</code>）是命令的结束符，使得一行可以放置多个命令，上一个命令执行结束后，再执行第二个命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clear; <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>上面例子中，Bash 先执行<code>clear</code>命令，执行完成后，再执行<code>ls</code>命令。</p><p>注意，使用分号时，第二个命令总是接着第一个命令执行，不管第一个命令执行成功或失败。</p><h2 id="命令的组合符-amp-amp-和"><a href="#命令的组合符-amp-amp-和" class="headerlink" title="命令的组合符&amp;&amp;和||"></a>命令的组合符<code>&amp;&amp;</code>和<code>||</code></h2><p>除了分号，Bash 还提供两个命令组合符<code>&amp;&amp;</code>和<code>||</code>，允许更好地控制多个命令之间的继发关系。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Command1 &amp;&amp; Command2</span><br></pre></td></tr></table></figure><p>上面命令的意思是，如果<code>Command1</code>命令运行成功，则继续运行<code>Command2</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Command1 || Command2</span><br></pre></td></tr></table></figure><p>上面命令的意思是，如果<code>Command1</code>命令运行失败，则继续运行<code>Command2</code>命令。</p><p>下面是一些例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> filelist.txt ; <span class="built_in">ls</span> -l filelist.txt</span><br></pre></td></tr></table></figure><p>上面例子中，只要<code>cat</code>命令执行结束，不管成功或失败，都会继续执行<code>ls</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> filelist.txt &amp;&amp; <span class="built_in">ls</span> -l filelist.txt</span><br></pre></td></tr></table></figure><p>上面例子中，只有<code>cat</code>命令执行成功，才会继续执行<code>ls</code>命令。如果<code>cat</code>执行失败（比如不存在文件<code>flielist.txt</code>），那么<code>ls</code>命令就不会执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> foo || <span class="built_in">mkdir</span> bar</span><br></pre></td></tr></table></figure><p>上面例子中，只有<code>mkdir foo</code>命令执行失败（比如<code>foo</code>目录已经存在），才会继续执行<code>mkdir bar</code>命令。如果<code>mkdir foo</code>命令执行成功，就不会创建<code>bar</code>目录了。</p><h2 id="type-命令"><a href="#type-命令" class="headerlink" title="type 命令"></a>type 命令</h2><p>Bash 本身内置了很多命令，同时也可以执行外部程序。怎么知道一个命令是内置命令，还是外部程序呢？</p><p><code>type</code>命令用来判断命令的来源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">type</span> <span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> is a shell <span class="built_in">builtin</span></span><br><span class="line">$ <span class="built_in">type</span> <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span> is hashed (/bin/ls)</span><br></pre></td></tr></table></figure><p>上面代码中，<code>type</code>命令告诉我们，<code>echo</code>是内部命令，<code>ls</code>是外部程序（<code>/bin/ls</code>）。</p><p><code>type</code>命令本身也是内置命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">type</span> <span class="built_in">type</span></span><br><span class="line"><span class="built_in">type</span> is a shell <span class="built_in">builtin</span></span><br></pre></td></tr></table></figure><p>如果要查看一个命令的所有定义，可以使用<code>type</code>命令的<code>-a</code>参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">type</span> -a <span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> is shell <span class="built_in">builtin</span></span><br><span class="line"><span class="built_in">echo</span> is /usr/bin/echo</span><br><span class="line"><span class="built_in">echo</span> is /bin/echo</span><br></pre></td></tr></table></figure><p>上面代码表示，<code>echo</code>命令既是内置命令，也有对应的外部程序。</p><p><code>type</code>命令的<code>-t</code>参数，可以返回一个命令的类型：别名（alias），关键词（keyword），函数（function），内置命令（builtin）和文件（file）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">type</span> -t bash</span><br><span class="line">file</span><br><span class="line">$ <span class="built_in">type</span> -t <span class="keyword">if</span></span><br><span class="line">keyword</span><br></pre></td></tr></table></figure><p>上面例子中，<code>bash</code>是文件，<code>if</code>是关键词。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>Bash 提供很多快捷键，可以大大方便操作。下面是一些最常用的快捷键，完整的介绍参见《行操作》一章。</p><ul><li><code>Ctrl + L</code>：清除屏幕并将当前行移到页面顶部。</li><li><code>Ctrl + C</code>：中止当前正在执行的命令。</li><li><code>Shift + PageUp</code>：向上滚动。</li><li><code>Shift + PageDown</code>：向下滚动。</li><li><code>Ctrl + U</code>：从光标位置删除到行首。</li><li><code>Ctrl + K</code>：从光标位置删除到行尾。</li><li><code>Ctrl + W</code>：删除光标位置前一个单词。</li><li><code>Ctrl + D</code>：关闭 Shell 会话。</li><li><code>↑</code>，<code>↓</code>：浏览已执行命令的历史记录。</li></ul><p>除了上面的快捷键，Bash 还具有自动补全功能。命令输入到一半的时候，可以按下 Tab 键，Bash 会自动完成剩下的部分。比如，输入<code>tou</code>，然后按一下 Tab 键，Bash 会自动补上<code>ch</code>。</p><p>除了命令的自动补全，Bash 还支持路径的自动补全。有时，需要输入很长的路径，这时只需要输入前面的部分，然后按下 Tab 键，就会自动补全后面的部分。如果有多个可能的选择，按两次 Tab 键，Bash 会显示所有选项，让你选择。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash 简介</title>
      <link href="/2016/03/06/Bash%20%E7%AE%80%E4%BB%8B/"/>
      <url>/2016/03/06/Bash%20%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>Bash 是 Unix 系统和 Linux 系统的一种 Shell（命令行环境），是目前绝大多数 Linux 发行版的默认 Shell。</p><h2 id="Shell-的含义"><a href="#Shell-的含义" class="headerlink" title="Shell 的含义"></a>Shell 的含义</h2><p>学习 Bash，首先需要理解 Shell 是什么。Shell 这个单词的原意是“外壳”，跟 kernel（内核）相对应，比喻内核外面的一层，即用户跟内核交互的对话界面。</p><p>具体来说，Shell 这个词有多种含义。</p><p>首先，Shell 是一个程序，提供一个与用户对话的环境。这个环境只有一个命令提示符，让用户从键盘输入命令，所以又称为命令行环境（command line interface，简写为 CLI）。Shell 接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。本书中，除非特别指明，Shell 指的就是命令行环境。</p><p>其次，Shell 是一个命令解释器，解释用户输入的命令。它支持变量、条件判断、循环操作等语法，所以用户可以用 Shell 命令写出各种小程序，又称为脚本（script）。这些脚本都通过 Shell 的解释执行，而不通过编译。</p><p>最后，Shell 是一个工具箱，提供了各种小工具，供用户方便地使用操作系统的功能。</p><span id="more"></span><h2 id="Shell-的种类"><a href="#Shell-的种类" class="headerlink" title="Shell 的种类"></a>Shell 的种类</h2><p>Shell 有很多种，只要能给用户提供命令行环境的程序，都可以看作是 Shell。</p><p>历史上，主要的 Shell 有下面这些。</p><ul><li>Bourne Shell（sh）</li><li>Bourne Again shell（bash）</li><li>C Shell（csh）</li><li>TENEX C Shell（tcsh）</li><li>Korn shell（ksh）</li><li>Z Shell（zsh）</li><li>Friendly Interactive Shell（fish）</li></ul><p>Bash 是目前最常用的 Shell，除非特别指明，下文的 Shell 和 Bash 当作同义词使用，可以互换。</p><p>下面的命令可以查看当前设备的默认 Shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><p>当前正在使用的 Shell 不一定是默认 Shell，一般来说，<code>ps</code>命令结果的倒数第二行是当前 Shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ps</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line"> 4467 pts/0    00:00:00 bash</span><br><span class="line"> 5379 pts/0    00:00:00 ps</span><br></pre></td></tr></table></figure><p>上面示例中，<code>ps</code>命令结果的倒数第二行显示，运行的命令（<code>cmd</code>）是<code>bash</code>，表明当前正在使用的<br>Shell 是 Bash。</p><p>下面的命令可以查看当前的 Linux 系统安装的所有 Shell。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/shells</span><br></pre></td></tr></table></figure><p>上面三个命令中，<code>$</code>是命令行环境的提示符，用户只需要输入提示符后面的内容。</p><p>Linux 允许每个用户使用不同的 Shell，用户的默认 Shell 一般都是 Bash，或者与 Bash 兼容。</p><h2 id="命令行环境"><a href="#命令行环境" class="headerlink" title="命令行环境"></a>命令行环境</h2><h3 id="终端模拟器"><a href="#终端模拟器" class="headerlink" title="终端模拟器"></a>终端模拟器</h3><p>如果是不带有图形环境的 Linux 系统（比如专用于服务器的系统），启动后就直接是命令行环境。</p><p>不过，现在大部分的 Linux 发行版，尤其是针对普通用户的发行版，都是图形环境。用户登录系统后，自动进入图形环境，需要自己启动终端模拟器，才能进入命令行环境。</p><p>所谓“终端模拟器”（terminal emulator）就是一个模拟命令行窗口的程序，让用户在一个窗口中使用命令行环境，并且提供各种附加功能，比如调整颜色、字体大小、行距等等。</p><p>不同 Linux 发行版（准确地说是不同的桌面环境）带有的终端程序是不一样的，比如 KDE 桌面环境的终端程序是 konsole，Gnome 桌面环境的终端程序是 gnome-terminal，用户也可以安装第三方的终端程序。所有终端程序，尽管名字不同，基本功能都是一样的，就是让用户可以进入命令行环境，使用 Shell。</p><h3 id="命令行提示符"><a href="#命令行提示符" class="headerlink" title="命令行提示符"></a>命令行提示符</h3><p>进入命令行环境以后，用户会看到 Shell 的提示符。提示符往往是一串前缀，最后以一个美元符号<code>$</code>结尾，用户可以在这个符号后面输入各种命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[user@hostname] $</span><br></pre></td></tr></table></figure><p>上面例子中，完整的提示符是<code>[user@hostname] $</code>，其中前缀是用户名（<code>user</code>）加上<code>@</code>，再加主机名（<code>hostname</code>）。比如，用户名是<code>bill</code>，主机名是<code>home-machine</code>，前缀就是<code>bill@home-machine</code>。</p><p>注意，根用户（root）的提示符，不以美元符号（<code>$</code>）结尾，而以井号（<code>#</code>）结尾，用来提醒用户，现在具有根权限，可以执行各种操作，务必小心，不要出现误操作。这个符号是可以自己定义的，详见《命令提示符》一章。</p><p>为了简洁，后文的命令行提示符都只使用<code>$</code>表示。</p><h3 id="进入和退出方法"><a href="#进入和退出方法" class="headerlink" title="进入和退出方法"></a>进入和退出方法</h3><p>进入命令行环境以后，一般就已经打开 Bash 了。如果你的 Shell 不是 Bash，可以输入<code>bash</code>命令启动 Bash。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash</span><br></pre></td></tr></table></figure><p>退出 Bash 环境，可以使用<code>exit</code>命令，也可以同时按下<code>Ctrl + d</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>Bash 的基本用法就是在命令行输入各种命令，非常直观。作为练习，可以试着输入<code>pwd</code>命令。按下回车键，就会显示当前所在的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/me</span><br></pre></td></tr></table></figure><p>如果不小心输入了<code>pwe</code>，会返回一个提示，表示输入出错，没有对应的可执行程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pwe</span><br><span class="line">bash: pwe：未找到命令</span><br></pre></td></tr></table></figure><h2 id="Shell-和-Bash-的历史"><a href="#Shell-和-Bash-的历史" class="headerlink" title="Shell 和 Bash 的历史"></a>Shell 和 Bash 的历史</h2><p>Shell 伴随着 Unix 系统的诞生而诞生。</p><p>1969年，Ken Thompson 和 Dennis Ritchie 开发了第一版的 Unix。</p><p>1971年，Ken Thompson 编写了最初的 Shell，称为 Thompson shell，程序名是<code>sh</code>，方便用户使用 Unix。</p><p>1973年至1975年间，John R. Mashey 扩展了最初的 Thompson shell，添加了编程功能，使得 Shell 成为一种编程语言。这个版本的 Shell 称为 Mashey shell。</p><p>1976年，Stephen Bourne 结合 Mashey shell 的功能，重写一个新的 Shell，称为 Bourne shell。</p><p>1978年，加州大学伯克利分校的 Bill Joy 开发了 C shell，为 Shell 提供 C 语言的语法，程序名是<code>csh</code>。它是第一个真正替代<code>sh</code>的 UNIX shell，被合并到 Berkeley UNIX 的 2BSD 版本中。</p><p>1979年，UNIX 第七版发布，内置了 Bourne Shell，导致它成为 Unix 的默认 Shell。注意，Thompson shell、Mashey shell 和 Bourne shell 都是贝尔实验室的产品，程序名都是<code>sh</code>。对于用户来说，它们是同一个东西，只是底层代码不同而已。</p><p>1983年，David Korn 开发了Korn shell，程序名是<code>ksh</code>。</p><p>1985年，Richard Stallman 成立了自由软件基金会（FSF），由于 Shell 的版权属于贝尔公司，所以他决定写一个自由版权的、使用 GNU 许可证的 Shell 程序，避免 Unix 的版权争议。</p><p>1988年，自由软件基金会的第一个付薪程序员 Brian Fox 写了一个 Shell，功能基本上是 Bourne shell 的克隆，叫做 Bourne-Again SHell，简称 Bash，程序名为<code>bash</code>，任何人都可以免费使用。后来，它逐渐成为 Linux 系统的标准 Shell。</p><p>1989年，Bash 发布1.0版。</p><p>1996年，Bash 发布2.0版。</p><p>2004年，Bash 发布3.0版。</p><p>2009年，Bash 发布4.0版。</p><p>2019年，Bash 发布5.0版。</p><p>用户可以通过<code>bash</code>命令的<code>--version</code>参数或者环境变量<code>$BASH_VERSION</code>，查看本机的 Bash 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ bash --version</span><br><span class="line">GNU bash，版本 5.0.3(1)-release (x86_64-pc-linux-gnu)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$BASH_VERSION</span></span><br><span class="line">5.0.3(1)-release</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Shell 学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>“认真的生活，认真的做选择，并且为自己的选择负责，在自己擅长的领域努力的学习和工作，在自己的工作上尽可能的有所作为，并且能够维护住一个温暖的家庭。”</p><p>这就是我一直想做，且一直在做的事情。</p><p>怎么说呢，一个人想要活成自己喜欢的样子，可以做自己喜欢的事情，真的是一件很难的事情。不过值得庆幸的是，我虽然没有活成自己喜欢的样子，但我一直在尽力做自己喜欢的事情。</p><p>希望自己变得越来越好，保持着对生活的热爱，把学习作为终身的习惯，认真的做好每一件事情，开开心心的过好每一天。</p><p>“能和你一起成长，我荣幸之至”</p><p>这就是我写这个博客的初心。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
